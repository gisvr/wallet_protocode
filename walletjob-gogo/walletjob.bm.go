// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: walletjob.proto

package pbwalletjob

import (
	"context"

	bm "github.com/gisvr/golib/net/http/blademaster"
	"github.com/gisvr/golib/net/http/blademaster/binding"
)
import coinwallet_api "github.com/gisvr/wallet_protocode/coinwallet-gogo"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathIndexOnRecvBlock = "/wallet/job/blockheader"
var PathIndexOnRecvTx = "/wallet/job/transaction"

const (
	PermissionOnRecvBlock = "PermissionIndexOnRecvBlock"
	PermissionOnRecvTx    = "PermissionIndexOnRecvTx"
)

type Permission struct {
	Module      string
	Name        string
	Url         string
	Description string
}

var Perms = []Permission{
	Permission{"Index", PermissionOnRecvBlock, PathIndexOnRecvBlock, "接收到block时的回调"},
	Permission{"Index", PermissionOnRecvTx, PathIndexOnRecvTx, "解析出Tx时的回调"},
}

// IndexBMServer is the server API for Index service.
type IndexBMServer interface {
	// 接收到block时的回调
	OnRecvBlock(ctx context.Context, req *coinwallet_api.EventBlock) (resp *EventBlockResponse, err error)

	// 解析出Tx时的回调
	OnRecvTx(ctx context.Context, req *coinwallet_api.EventTx) (resp *EventTxResponse, err error)
}

var IndexSvc IndexBMServer

type JSONReaderFunc func(c *bm.Context, data interface{}, err error)

func DefaultJSONReader(c *bm.Context, data interface{}, err error) {
	c.JSON(data, err)
}

var JF JSONReaderFunc = DefaultJSONReader

func IndexOnRecvBlock(c *bm.Context) {
	p := new(coinwallet_api.EventBlock)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := IndexSvc.OnRecvBlock(c, p)
	JF(c, resp, err)
}

func IndexOnRecvTx(c *bm.Context) {
	p := new(coinwallet_api.EventTx)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := IndexSvc.OnRecvTx(c, p)
	JF(c, resp, err)
}

// RegisterIndexBMServer Register the blademaster route
func RegisterIndexBMServer(e *bm.Engine, server IndexBMServer) {
	IndexSvc = server
	e.POST(PathIndexOnRecvBlock, IndexOnRecvBlock)
	e.POST(PathIndexOnRecvTx, IndexOnRecvTx)
}
