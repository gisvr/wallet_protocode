// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: assite.proto

package pbassite

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time "github.com/gisvr/wallet/src/lib/time"
	shared_gogo "github.com/gisvr/wallet_protocode/shared-gogo"
	_ "github.com/gisvr/wallet_protocode/wallet-gogo"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RegisterRequest struct {
	//账户名称
	AccountName string `protobuf:"bytes,1,opt,name=AccountName,proto3" json:"account_name"  validate:"required"`
	//账户描述
	AccountDescription string `protobuf:"bytes,2,opt,name=AccountDescription,proto3" json:"account_description" `
	//用户名称
	Username string `protobuf:"bytes,3,opt,name=Username,proto3" json:"user_name" validate:"required"`
	//密码
	Password string `protobuf:"bytes,4,opt,name=Password,proto3" json:"pass" validate:"required"`
	//邮箱
	Email string `protobuf:"bytes,5,opt,name=Email,proto3" json:"email" validate:"email,required"`
	//手机号
	Mobile string `protobuf:"bytes,6,opt,name=Mobile,proto3" json:"mobile" `
	//地区代码
	CountryCode string `protobuf:"bytes,7,opt,name=CountryCode,proto3" json:"country_code"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{0}
}
func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *RegisterRequest) GetAccountDescription() string {
	if m != nil {
		return m.AccountDescription
	}
	return ""
}

func (m *RegisterRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RegisterRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RegisterRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterRequest) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *RegisterRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

type RegisterResponse struct {
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{1}
}
func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

type LoginRequest struct {
	//邮箱
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"email" form:"name" validate:"required"`
	//密码
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"pass"`
	//2FA
	Otp string `protobuf:"bytes,3,opt,name=Otp,proto3" json:"otp" form:"otp" validate:"alphanum"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{2}
}
func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(m, src)
}
func (m *LoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *LoginRequest) GetOtp() string {
	if m != nil {
		return m.Otp
	}
	return ""
}

type LoginResponse struct {
	//session id
	SessionId string `protobuf:"bytes,1,opt,name=SessionId,proto3" json:"session_id"`
	//密码错误重试剩余次数
	RemainRetryNum int32 `protobuf:"varint,2,opt,name=RemainRetryNum,proto3" json:"remain_retry_num"`
}

func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()    {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{3}
}
func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(m, src)
}
func (m *LoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *LoginResponse) GetRemainRetryNum() int32 {
	if m != nil {
		return m.RemainRetryNum
	}
	return 0
}

type LogoutRequest struct {
}

func (m *LogoutRequest) Reset()         { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string { return proto.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()    {}
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{4}
}
func (m *LogoutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogoutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutRequest.Merge(m, src)
}
func (m *LogoutRequest) XXX_Size() int {
	return m.Size()
}
func (m *LogoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutRequest proto.InternalMessageInfo

type LogoutResponse struct {
}

func (m *LogoutResponse) Reset()         { *m = LogoutResponse{} }
func (m *LogoutResponse) String() string { return proto.CompactTextString(m) }
func (*LogoutResponse) ProtoMessage()    {}
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{5}
}
func (m *LogoutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogoutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutResponse.Merge(m, src)
}
func (m *LogoutResponse) XXX_Size() int {
	return m.Size()
}
func (m *LogoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutResponse proto.InternalMessageInfo

type ForgetPassRequest struct {
	//邮箱
	Email string `protobuf:"bytes,1,opt,name=Email,proto3" json:"email" validate:"email,required"`
}

func (m *ForgetPassRequest) Reset()         { *m = ForgetPassRequest{} }
func (m *ForgetPassRequest) String() string { return proto.CompactTextString(m) }
func (*ForgetPassRequest) ProtoMessage()    {}
func (*ForgetPassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{6}
}
func (m *ForgetPassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForgetPassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForgetPassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForgetPassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForgetPassRequest.Merge(m, src)
}
func (m *ForgetPassRequest) XXX_Size() int {
	return m.Size()
}
func (m *ForgetPassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ForgetPassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ForgetPassRequest proto.InternalMessageInfo

func (m *ForgetPassRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type ForgetPassResponse struct {
}

func (m *ForgetPassResponse) Reset()         { *m = ForgetPassResponse{} }
func (m *ForgetPassResponse) String() string { return proto.CompactTextString(m) }
func (*ForgetPassResponse) ProtoMessage()    {}
func (*ForgetPassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{7}
}
func (m *ForgetPassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForgetPassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForgetPassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForgetPassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForgetPassResponse.Merge(m, src)
}
func (m *ForgetPassResponse) XXX_Size() int {
	return m.Size()
}
func (m *ForgetPassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ForgetPassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ForgetPassResponse proto.InternalMessageInfo

type UserActiveRequest struct {
	//激活码
	ActivationCode string `protobuf:"bytes,1,opt,name=ActivationCode,proto3" json:"activation_code"`
	//FA验证码
	TwoFACaptcha string `protobuf:"bytes,2,opt,name=TwoFACaptcha,proto3" json:"two_fa_captcha"`
	//密码
	Pass string `protobuf:"bytes,3,opt,name=Pass,proto3" json:"pass"`
}

func (m *UserActiveRequest) Reset()         { *m = UserActiveRequest{} }
func (m *UserActiveRequest) String() string { return proto.CompactTextString(m) }
func (*UserActiveRequest) ProtoMessage()    {}
func (*UserActiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{8}
}
func (m *UserActiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserActiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserActiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserActiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserActiveRequest.Merge(m, src)
}
func (m *UserActiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserActiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserActiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserActiveRequest proto.InternalMessageInfo

func (m *UserActiveRequest) GetActivationCode() string {
	if m != nil {
		return m.ActivationCode
	}
	return ""
}

func (m *UserActiveRequest) GetTwoFACaptcha() string {
	if m != nil {
		return m.TwoFACaptcha
	}
	return ""
}

func (m *UserActiveRequest) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

type ListCountryCodeRequest struct {
}

func (m *ListCountryCodeRequest) Reset()         { *m = ListCountryCodeRequest{} }
func (m *ListCountryCodeRequest) String() string { return proto.CompactTextString(m) }
func (*ListCountryCodeRequest) ProtoMessage()    {}
func (*ListCountryCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{9}
}
func (m *ListCountryCodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCountryCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCountryCodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCountryCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCountryCodeRequest.Merge(m, src)
}
func (m *ListCountryCodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCountryCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCountryCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCountryCodeRequest proto.InternalMessageInfo

type ReSendActivationCodeRequest struct {
	//邮箱
	Email string `protobuf:"bytes,1,opt,name=Email,proto3" json:"email" validate:"email,required"`
}

func (m *ReSendActivationCodeRequest) Reset()         { *m = ReSendActivationCodeRequest{} }
func (m *ReSendActivationCodeRequest) String() string { return proto.CompactTextString(m) }
func (*ReSendActivationCodeRequest) ProtoMessage()    {}
func (*ReSendActivationCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{10}
}
func (m *ReSendActivationCodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReSendActivationCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReSendActivationCodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReSendActivationCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReSendActivationCodeRequest.Merge(m, src)
}
func (m *ReSendActivationCodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReSendActivationCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReSendActivationCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReSendActivationCodeRequest proto.InternalMessageInfo

func (m *ReSendActivationCodeRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type ReSendActivationCodeResponse struct {
}

func (m *ReSendActivationCodeResponse) Reset()         { *m = ReSendActivationCodeResponse{} }
func (m *ReSendActivationCodeResponse) String() string { return proto.CompactTextString(m) }
func (*ReSendActivationCodeResponse) ProtoMessage()    {}
func (*ReSendActivationCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{11}
}
func (m *ReSendActivationCodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReSendActivationCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReSendActivationCodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReSendActivationCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReSendActivationCodeResponse.Merge(m, src)
}
func (m *ReSendActivationCodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReSendActivationCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReSendActivationCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReSendActivationCodeResponse proto.InternalMessageInfo

type ListCountryCodeResponse struct {
	//地区代码列表
	Items []*shared_gogo.CountryCode `protobuf:"bytes,1,rep,name=Items,proto3" json:"items"`
}

func (m *ListCountryCodeResponse) Reset()         { *m = ListCountryCodeResponse{} }
func (m *ListCountryCodeResponse) String() string { return proto.CompactTextString(m) }
func (*ListCountryCodeResponse) ProtoMessage()    {}
func (*ListCountryCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{12}
}
func (m *ListCountryCodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCountryCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCountryCodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCountryCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCountryCodeResponse.Merge(m, src)
}
func (m *ListCountryCodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCountryCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCountryCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCountryCodeResponse proto.InternalMessageInfo

func (m *ListCountryCodeResponse) GetItems() []*shared_gogo.CountryCode {
	if m != nil {
		return m.Items
	}
	return nil
}

type UserActiveResponse struct {
	//激活码
	ActivationCode string `protobuf:"bytes,1,opt,name=ActivationCode,proto3" json:"activation_code"`
	//2FA编码
	TwoFACode string `protobuf:"bytes,2,opt,name=TwoFACode,proto3" json:"two_fa_code"`
	//1 激活 2 改密码 3 改2FA
	OpType int32 `protobuf:"varint,3,opt,name=OpType,proto3" json:"op_type"`
}

func (m *UserActiveResponse) Reset()         { *m = UserActiveResponse{} }
func (m *UserActiveResponse) String() string { return proto.CompactTextString(m) }
func (*UserActiveResponse) ProtoMessage()    {}
func (*UserActiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{13}
}
func (m *UserActiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserActiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserActiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserActiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserActiveResponse.Merge(m, src)
}
func (m *UserActiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *UserActiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserActiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserActiveResponse proto.InternalMessageInfo

func (m *UserActiveResponse) GetActivationCode() string {
	if m != nil {
		return m.ActivationCode
	}
	return ""
}

func (m *UserActiveResponse) GetTwoFACode() string {
	if m != nil {
		return m.TwoFACode
	}
	return ""
}

func (m *UserActiveResponse) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

type UserInviteRequest struct {
	//用户姓名
	Username string `protobuf:"bytes,1,opt,name=Username,proto3" json:"user_name" validate:"required"`
	//邮箱
	Email string `protobuf:"bytes,2,opt,name=Email,proto3" json:"email" validate:"required"`
	//手机号
	Mobile string `protobuf:"bytes,3,opt,name=Mobile,proto3" json:"mobile" validate:"required"`
	//地区代码
	CountryCode string `protobuf:"bytes,4,opt,name=CountryCode,proto3" json:"country_code"`
}

func (m *UserInviteRequest) Reset()         { *m = UserInviteRequest{} }
func (m *UserInviteRequest) String() string { return proto.CompactTextString(m) }
func (*UserInviteRequest) ProtoMessage()    {}
func (*UserInviteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{14}
}
func (m *UserInviteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInviteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInviteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInviteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInviteRequest.Merge(m, src)
}
func (m *UserInviteRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserInviteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInviteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserInviteRequest proto.InternalMessageInfo

func (m *UserInviteRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserInviteRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInviteRequest) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UserInviteRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

type UserInviteResponse struct {
}

func (m *UserInviteResponse) Reset()         { *m = UserInviteResponse{} }
func (m *UserInviteResponse) String() string { return proto.CompactTextString(m) }
func (*UserInviteResponse) ProtoMessage()    {}
func (*UserInviteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{15}
}
func (m *UserInviteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInviteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInviteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInviteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInviteResponse.Merge(m, src)
}
func (m *UserInviteResponse) XXX_Size() int {
	return m.Size()
}
func (m *UserInviteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInviteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserInviteResponse proto.InternalMessageInfo

type ApplyResetOtherPassRequest struct {
	//用户id
	Uid int64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"uid" validate:"required"`
}

func (m *ApplyResetOtherPassRequest) Reset()         { *m = ApplyResetOtherPassRequest{} }
func (m *ApplyResetOtherPassRequest) String() string { return proto.CompactTextString(m) }
func (*ApplyResetOtherPassRequest) ProtoMessage()    {}
func (*ApplyResetOtherPassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{16}
}
func (m *ApplyResetOtherPassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyResetOtherPassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyResetOtherPassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyResetOtherPassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyResetOtherPassRequest.Merge(m, src)
}
func (m *ApplyResetOtherPassRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplyResetOtherPassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyResetOtherPassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyResetOtherPassRequest proto.InternalMessageInfo

func (m *ApplyResetOtherPassRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type ApplyResetOtherPassResponse struct {
}

func (m *ApplyResetOtherPassResponse) Reset()         { *m = ApplyResetOtherPassResponse{} }
func (m *ApplyResetOtherPassResponse) String() string { return proto.CompactTextString(m) }
func (*ApplyResetOtherPassResponse) ProtoMessage()    {}
func (*ApplyResetOtherPassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{17}
}
func (m *ApplyResetOtherPassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyResetOtherPassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyResetOtherPassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyResetOtherPassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyResetOtherPassResponse.Merge(m, src)
}
func (m *ApplyResetOtherPassResponse) XXX_Size() int {
	return m.Size()
}
func (m *ApplyResetOtherPassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyResetOtherPassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyResetOtherPassResponse proto.InternalMessageInfo

type ApplyResetOther2FARequest struct {
	//用户id
	Uid int64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"uid" validate:"required"`
}

func (m *ApplyResetOther2FARequest) Reset()         { *m = ApplyResetOther2FARequest{} }
func (m *ApplyResetOther2FARequest) String() string { return proto.CompactTextString(m) }
func (*ApplyResetOther2FARequest) ProtoMessage()    {}
func (*ApplyResetOther2FARequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{18}
}
func (m *ApplyResetOther2FARequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyResetOther2FARequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyResetOther2FARequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyResetOther2FARequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyResetOther2FARequest.Merge(m, src)
}
func (m *ApplyResetOther2FARequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplyResetOther2FARequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyResetOther2FARequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyResetOther2FARequest proto.InternalMessageInfo

func (m *ApplyResetOther2FARequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type ApplyResetOther2FAResponse struct {
}

func (m *ApplyResetOther2FAResponse) Reset()         { *m = ApplyResetOther2FAResponse{} }
func (m *ApplyResetOther2FAResponse) String() string { return proto.CompactTextString(m) }
func (*ApplyResetOther2FAResponse) ProtoMessage()    {}
func (*ApplyResetOther2FAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{19}
}
func (m *ApplyResetOther2FAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyResetOther2FAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyResetOther2FAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyResetOther2FAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyResetOther2FAResponse.Merge(m, src)
}
func (m *ApplyResetOther2FAResponse) XXX_Size() int {
	return m.Size()
}
func (m *ApplyResetOther2FAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyResetOther2FAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyResetOther2FAResponse proto.InternalMessageInfo

type ResetMePassRequest struct {
	//旧密码
	OldPass string `protobuf:"bytes,1,opt,name=OldPass,proto3" json:"old_pass"`
	//新密码
	NewPass string `protobuf:"bytes,2,opt,name=NewPass,proto3" json:"new_pass"`
}

func (m *ResetMePassRequest) Reset()         { *m = ResetMePassRequest{} }
func (m *ResetMePassRequest) String() string { return proto.CompactTextString(m) }
func (*ResetMePassRequest) ProtoMessage()    {}
func (*ResetMePassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{20}
}
func (m *ResetMePassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetMePassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetMePassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetMePassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetMePassRequest.Merge(m, src)
}
func (m *ResetMePassRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResetMePassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetMePassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResetMePassRequest proto.InternalMessageInfo

func (m *ResetMePassRequest) GetOldPass() string {
	if m != nil {
		return m.OldPass
	}
	return ""
}

func (m *ResetMePassRequest) GetNewPass() string {
	if m != nil {
		return m.NewPass
	}
	return ""
}

type ResetMePassResponse struct {
}

func (m *ResetMePassResponse) Reset()         { *m = ResetMePassResponse{} }
func (m *ResetMePassResponse) String() string { return proto.CompactTextString(m) }
func (*ResetMePassResponse) ProtoMessage()    {}
func (*ResetMePassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{21}
}
func (m *ResetMePassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetMePassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetMePassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetMePassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetMePassResponse.Merge(m, src)
}
func (m *ResetMePassResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResetMePassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetMePassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResetMePassResponse proto.InternalMessageInfo

type ResetMe2FARequest struct {
	//旧2FA验证码
	OldTwoFACaptcha string `protobuf:"bytes,1,opt,name=OldTwoFACaptcha,proto3" json:"old_two_fa_captcha"`
	//新2FA验证码
	NewTwoFACaptcha string `protobuf:"bytes,2,opt,name=NewTwoFACaptcha,proto3" json:"new_two_fa_captcha"`
	//后台授权码,从第一次的ResetMe2FAResponse中获取
	AuthCode string `protobuf:"bytes,3,opt,name=AuthCode,proto3" json:"auth_code"`
}

func (m *ResetMe2FARequest) Reset()         { *m = ResetMe2FARequest{} }
func (m *ResetMe2FARequest) String() string { return proto.CompactTextString(m) }
func (*ResetMe2FARequest) ProtoMessage()    {}
func (*ResetMe2FARequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{22}
}
func (m *ResetMe2FARequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetMe2FARequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetMe2FARequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetMe2FARequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetMe2FARequest.Merge(m, src)
}
func (m *ResetMe2FARequest) XXX_Size() int {
	return m.Size()
}
func (m *ResetMe2FARequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetMe2FARequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResetMe2FARequest proto.InternalMessageInfo

func (m *ResetMe2FARequest) GetOldTwoFACaptcha() string {
	if m != nil {
		return m.OldTwoFACaptcha
	}
	return ""
}

func (m *ResetMe2FARequest) GetNewTwoFACaptcha() string {
	if m != nil {
		return m.NewTwoFACaptcha
	}
	return ""
}

func (m *ResetMe2FARequest) GetAuthCode() string {
	if m != nil {
		return m.AuthCode
	}
	return ""
}

type ResetMe2FAResponse struct {
	//2FA 编码
	TwoFACode string `protobuf:"bytes,1,opt,name=TwoFACode,proto3" json:"two_fa_code"`
	//后台授权码
	AuthCode string `protobuf:"bytes,2,opt,name=AuthCode,proto3" json:"auth_code"`
}

func (m *ResetMe2FAResponse) Reset()         { *m = ResetMe2FAResponse{} }
func (m *ResetMe2FAResponse) String() string { return proto.CompactTextString(m) }
func (*ResetMe2FAResponse) ProtoMessage()    {}
func (*ResetMe2FAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{23}
}
func (m *ResetMe2FAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetMe2FAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetMe2FAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetMe2FAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetMe2FAResponse.Merge(m, src)
}
func (m *ResetMe2FAResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResetMe2FAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetMe2FAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResetMe2FAResponse proto.InternalMessageInfo

func (m *ResetMe2FAResponse) GetTwoFACode() string {
	if m != nil {
		return m.TwoFACode
	}
	return ""
}

func (m *ResetMe2FAResponse) GetAuthCode() string {
	if m != nil {
		return m.AuthCode
	}
	return ""
}

type GetMeRequest struct {
}

func (m *GetMeRequest) Reset()         { *m = GetMeRequest{} }
func (m *GetMeRequest) String() string { return proto.CompactTextString(m) }
func (*GetMeRequest) ProtoMessage()    {}
func (*GetMeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{24}
}
func (m *GetMeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMeRequest.Merge(m, src)
}
func (m *GetMeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMeRequest proto.InternalMessageInfo

type GetMeResponse struct {
	Item *shared_gogo.UserData `protobuf:"bytes,1,opt,name=item,proto3" json:"item"`
}

func (m *GetMeResponse) Reset()         { *m = GetMeResponse{} }
func (m *GetMeResponse) String() string { return proto.CompactTextString(m) }
func (*GetMeResponse) ProtoMessage()    {}
func (*GetMeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{25}
}
func (m *GetMeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMeResponse.Merge(m, src)
}
func (m *GetMeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMeResponse proto.InternalMessageInfo

func (m *GetMeResponse) GetItem() *shared_gogo.UserData {
	if m != nil {
		return m.Item
	}
	return nil
}

type UpdateMeRequest struct {
	//用户名
	UserName string `protobuf:"bytes,1,opt,name=UserName,proto3" json:"user_name"`
	//语言
	Lang string `protobuf:"bytes,2,opt,name=Lang,proto3" json:"lang"`
	//货币
	Currency string `protobuf:"bytes,3,opt,name=Currency,proto3" json:"currency"`
	//防钓鱼码
	Welcome string `protobuf:"bytes,4,opt,name=Welcome,proto3" json:"welcome"`
}

func (m *UpdateMeRequest) Reset()         { *m = UpdateMeRequest{} }
func (m *UpdateMeRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMeRequest) ProtoMessage()    {}
func (*UpdateMeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{26}
}
func (m *UpdateMeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMeRequest.Merge(m, src)
}
func (m *UpdateMeRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMeRequest proto.InternalMessageInfo

func (m *UpdateMeRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UpdateMeRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *UpdateMeRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *UpdateMeRequest) GetWelcome() string {
	if m != nil {
		return m.Welcome
	}
	return ""
}

type UpdateMeResponse struct {
}

func (m *UpdateMeResponse) Reset()         { *m = UpdateMeResponse{} }
func (m *UpdateMeResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateMeResponse) ProtoMessage()    {}
func (*UpdateMeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{27}
}
func (m *UpdateMeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMeResponse.Merge(m, src)
}
func (m *UpdateMeResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMeResponse proto.InternalMessageInfo

type VerifyMePassRequest struct {
	//密码
	Pass string `protobuf:"bytes,1,opt,name=Pass,proto3" json:"pass"`
}

func (m *VerifyMePassRequest) Reset()         { *m = VerifyMePassRequest{} }
func (m *VerifyMePassRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyMePassRequest) ProtoMessage()    {}
func (*VerifyMePassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{28}
}
func (m *VerifyMePassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyMePassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyMePassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyMePassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyMePassRequest.Merge(m, src)
}
func (m *VerifyMePassRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyMePassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyMePassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyMePassRequest proto.InternalMessageInfo

func (m *VerifyMePassRequest) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

type VerifyMePassResponse struct {
}

func (m *VerifyMePassResponse) Reset()         { *m = VerifyMePassResponse{} }
func (m *VerifyMePassResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyMePassResponse) ProtoMessage()    {}
func (*VerifyMePassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{29}
}
func (m *VerifyMePassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyMePassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyMePassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyMePassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyMePassResponse.Merge(m, src)
}
func (m *VerifyMePassResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyMePassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyMePassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyMePassResponse proto.InternalMessageInfo

type ListUserRequest struct {
	//分页
	Page int32 `protobuf:"varint,10,opt,name=Page,proto3" json:"page"`
	//每页记录数
	PageSize int32 `protobuf:"varint,11,opt,name=PageSize,proto3" json:"page_size"`
}

func (m *ListUserRequest) Reset()         { *m = ListUserRequest{} }
func (m *ListUserRequest) String() string { return proto.CompactTextString(m) }
func (*ListUserRequest) ProtoMessage()    {}
func (*ListUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{30}
}
func (m *ListUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserRequest.Merge(m, src)
}
func (m *ListUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserRequest proto.InternalMessageInfo

func (m *ListUserRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListUserRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListUserResponse struct {
	Items []*shared_gogo.UserData `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
	//总记录数
	TotalNum int32 `protobuf:"varint,10,opt,name=TotalNum,proto3" json:"total_num"`
	//分页
	Page int32 `protobuf:"varint,11,opt,name=Page,proto3" json:"page"`
}

func (m *ListUserResponse) Reset()         { *m = ListUserResponse{} }
func (m *ListUserResponse) String() string { return proto.CompactTextString(m) }
func (*ListUserResponse) ProtoMessage()    {}
func (*ListUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{31}
}
func (m *ListUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserResponse.Merge(m, src)
}
func (m *ListUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserResponse proto.InternalMessageInfo

func (m *ListUserResponse) GetItems() []*shared_gogo.UserData {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListUserResponse) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *ListUserResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ListRoleAndPermissionRequest struct {
}

func (m *ListRoleAndPermissionRequest) Reset()         { *m = ListRoleAndPermissionRequest{} }
func (m *ListRoleAndPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*ListRoleAndPermissionRequest) ProtoMessage()    {}
func (*ListRoleAndPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{32}
}
func (m *ListRoleAndPermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoleAndPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoleAndPermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoleAndPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoleAndPermissionRequest.Merge(m, src)
}
func (m *ListRoleAndPermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRoleAndPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoleAndPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoleAndPermissionRequest proto.InternalMessageInfo

type ListRoleAndPermissionResponse struct {
	Roles []*shared_gogo.RoleItem `protobuf:"bytes,1,rep,name=Roles,proto3" json:"roles"`
	Perms []*shared_gogo.AuthItem `protobuf:"bytes,2,rep,name=Perms,proto3" json:"perms"`
}

func (m *ListRoleAndPermissionResponse) Reset()         { *m = ListRoleAndPermissionResponse{} }
func (m *ListRoleAndPermissionResponse) String() string { return proto.CompactTextString(m) }
func (*ListRoleAndPermissionResponse) ProtoMessage()    {}
func (*ListRoleAndPermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{33}
}
func (m *ListRoleAndPermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoleAndPermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoleAndPermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoleAndPermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoleAndPermissionResponse.Merge(m, src)
}
func (m *ListRoleAndPermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListRoleAndPermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoleAndPermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoleAndPermissionResponse proto.InternalMessageInfo

func (m *ListRoleAndPermissionResponse) GetRoles() []*shared_gogo.RoleItem {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *ListRoleAndPermissionResponse) GetPerms() []*shared_gogo.AuthItem {
	if m != nil {
		return m.Perms
	}
	return nil
}

type UpdateOtherUserGenericInfoRequest struct {
	//用户id
	Uid int64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"uid" validate:"required"`
	//用户名称
	UserName string `protobuf:"bytes,2,opt,name=UserName,proto3" json:"user_name"`
	//邮箱
	EMail string `protobuf:"bytes,3,opt,name=EMail,proto3" json:"email"`
	//手机号
	Mobile string `protobuf:"bytes,4,opt,name=Mobile,proto3" json:"mobile"`
	//地区代码
	CountryCode string `protobuf:"bytes,5,opt,name=CountryCode,proto3" json:"country_code"`
}

func (m *UpdateOtherUserGenericInfoRequest) Reset()         { *m = UpdateOtherUserGenericInfoRequest{} }
func (m *UpdateOtherUserGenericInfoRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateOtherUserGenericInfoRequest) ProtoMessage()    {}
func (*UpdateOtherUserGenericInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{34}
}
func (m *UpdateOtherUserGenericInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOtherUserGenericInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOtherUserGenericInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOtherUserGenericInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOtherUserGenericInfoRequest.Merge(m, src)
}
func (m *UpdateOtherUserGenericInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOtherUserGenericInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOtherUserGenericInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOtherUserGenericInfoRequest proto.InternalMessageInfo

func (m *UpdateOtherUserGenericInfoRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateOtherUserGenericInfoRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UpdateOtherUserGenericInfoRequest) GetEMail() string {
	if m != nil {
		return m.EMail
	}
	return ""
}

func (m *UpdateOtherUserGenericInfoRequest) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UpdateOtherUserGenericInfoRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

type UpdateOtherUserGenericInfoResponse struct {
}

func (m *UpdateOtherUserGenericInfoResponse) Reset()         { *m = UpdateOtherUserGenericInfoResponse{} }
func (m *UpdateOtherUserGenericInfoResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateOtherUserGenericInfoResponse) ProtoMessage()    {}
func (*UpdateOtherUserGenericInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{35}
}
func (m *UpdateOtherUserGenericInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOtherUserGenericInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOtherUserGenericInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOtherUserGenericInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOtherUserGenericInfoResponse.Merge(m, src)
}
func (m *UpdateOtherUserGenericInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOtherUserGenericInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOtherUserGenericInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOtherUserGenericInfoResponse proto.InternalMessageInfo

type UpdateOtherUserImportantInfoRequest struct {
	//用户id
	Uid int64 `protobuf:"varint,1,opt,name=Uid,proto3" json:"uid" validate:"required"`
	//新增的用户角色
	AddRoles []string `protobuf:"bytes,2,rep,name=AddRoles,proto3" json:"add_roles"`
	//删除的用户角色
	DelRoles []string `protobuf:"bytes,3,rep,name=DelRoles,proto3" json:"del_roles"`
	//用户状态
	State int32 `protobuf:"varint,4,opt,name=State,proto3" json:"state"`
}

func (m *UpdateOtherUserImportantInfoRequest) Reset()         { *m = UpdateOtherUserImportantInfoRequest{} }
func (m *UpdateOtherUserImportantInfoRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateOtherUserImportantInfoRequest) ProtoMessage()    {}
func (*UpdateOtherUserImportantInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{36}
}
func (m *UpdateOtherUserImportantInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOtherUserImportantInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOtherUserImportantInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOtherUserImportantInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOtherUserImportantInfoRequest.Merge(m, src)
}
func (m *UpdateOtherUserImportantInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOtherUserImportantInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOtherUserImportantInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOtherUserImportantInfoRequest proto.InternalMessageInfo

func (m *UpdateOtherUserImportantInfoRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateOtherUserImportantInfoRequest) GetAddRoles() []string {
	if m != nil {
		return m.AddRoles
	}
	return nil
}

func (m *UpdateOtherUserImportantInfoRequest) GetDelRoles() []string {
	if m != nil {
		return m.DelRoles
	}
	return nil
}

func (m *UpdateOtherUserImportantInfoRequest) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type UpdateOtherUserImportantInfoResponse struct {
}

func (m *UpdateOtherUserImportantInfoResponse) Reset()         { *m = UpdateOtherUserImportantInfoResponse{} }
func (m *UpdateOtherUserImportantInfoResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateOtherUserImportantInfoResponse) ProtoMessage()    {}
func (*UpdateOtherUserImportantInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{37}
}
func (m *UpdateOtherUserImportantInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOtherUserImportantInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOtherUserImportantInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOtherUserImportantInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOtherUserImportantInfoResponse.Merge(m, src)
}
func (m *UpdateOtherUserImportantInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOtherUserImportantInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOtherUserImportantInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOtherUserImportantInfoResponse proto.InternalMessageInfo

//***************************** API_KEY相关链接。 **************************************************
type AddApiKeyRequest struct {
	// 钱包id
	WalletId int64 `protobuf:"varint,1,opt,name=WalletId,proto3" json:"wallet_id" validate:"required"`
	// 权限类型：0:查询;1:操作及查询;2:提现、操作及查询。
	AccessType int32 `protobuf:"varint,2,opt,name=AccessType,proto3" json:"access_type" validate:"required"`
	// 用户验签公钥。
	PublicKey string `protobuf:"bytes,3,opt,name=PublicKey,proto3" json:"public_key" validate:"required"`
	// api用户描述
	Remark string `protobuf:"bytes,4,opt,name=Remark,proto3" json:"remark"`
	// IP白名单，多个IP用逗号分隔，为空不限制
	IpLimit string `protobuf:"bytes,5,opt,name=IpLimit,proto3" json:"ip_limit"`
}

func (m *AddApiKeyRequest) Reset()         { *m = AddApiKeyRequest{} }
func (m *AddApiKeyRequest) String() string { return proto.CompactTextString(m) }
func (*AddApiKeyRequest) ProtoMessage()    {}
func (*AddApiKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{38}
}
func (m *AddApiKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddApiKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddApiKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddApiKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddApiKeyRequest.Merge(m, src)
}
func (m *AddApiKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddApiKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddApiKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddApiKeyRequest proto.InternalMessageInfo

func (m *AddApiKeyRequest) GetWalletId() int64 {
	if m != nil {
		return m.WalletId
	}
	return 0
}

func (m *AddApiKeyRequest) GetAccessType() int32 {
	if m != nil {
		return m.AccessType
	}
	return 0
}

func (m *AddApiKeyRequest) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *AddApiKeyRequest) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *AddApiKeyRequest) GetIpLimit() string {
	if m != nil {
		return m.IpLimit
	}
	return ""
}

type AddApiKeyResponse struct {
	Item *shared_gogo.ApiKey `protobuf:"bytes,1,opt,name=Item,proto3" json:"item"`
}

func (m *AddApiKeyResponse) Reset()         { *m = AddApiKeyResponse{} }
func (m *AddApiKeyResponse) String() string { return proto.CompactTextString(m) }
func (*AddApiKeyResponse) ProtoMessage()    {}
func (*AddApiKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{39}
}
func (m *AddApiKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddApiKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddApiKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddApiKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddApiKeyResponse.Merge(m, src)
}
func (m *AddApiKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddApiKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddApiKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddApiKeyResponse proto.InternalMessageInfo

func (m *AddApiKeyResponse) GetItem() *shared_gogo.ApiKey {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListApiKeyRequest struct {
	//钱包id
	WalletId int64 `protobuf:"varint,1,opt,name=WalletId,proto3" json:"wallet_id" form:"walletId" validate:"required"`
}

func (m *ListApiKeyRequest) Reset()         { *m = ListApiKeyRequest{} }
func (m *ListApiKeyRequest) String() string { return proto.CompactTextString(m) }
func (*ListApiKeyRequest) ProtoMessage()    {}
func (*ListApiKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{40}
}
func (m *ListApiKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListApiKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListApiKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListApiKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListApiKeyRequest.Merge(m, src)
}
func (m *ListApiKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListApiKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListApiKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListApiKeyRequest proto.InternalMessageInfo

func (m *ListApiKeyRequest) GetWalletId() int64 {
	if m != nil {
		return m.WalletId
	}
	return 0
}

type ListApiKeyResponse struct {
	Items []*shared_gogo.ApiKey `protobuf:"bytes,1,rep,name=Items,proto3" json:"items"`
}

func (m *ListApiKeyResponse) Reset()         { *m = ListApiKeyResponse{} }
func (m *ListApiKeyResponse) String() string { return proto.CompactTextString(m) }
func (*ListApiKeyResponse) ProtoMessage()    {}
func (*ListApiKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{41}
}
func (m *ListApiKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListApiKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListApiKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListApiKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListApiKeyResponse.Merge(m, src)
}
func (m *ListApiKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListApiKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListApiKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListApiKeyResponse proto.InternalMessageInfo

func (m *ListApiKeyResponse) GetItems() []*shared_gogo.ApiKey {
	if m != nil {
		return m.Items
	}
	return nil
}

type UpdateApiKeyRequest struct {
	// API_KEY的id。
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"id" validate:"required"`
	// 权限类型：0:查询;1:操作及查询;2:提现、操作及查询。
	AccessType int32 `protobuf:"varint,2,opt,name=AccessType,proto3" json:"access_type" validate:"required"`
	// api用户描述
	Remark string `protobuf:"bytes,3,opt,name=Remark,proto3" json:"remark"`
	// IP白名单，多个IP用逗号分隔，为空不限制
	IpLimit string `protobuf:"bytes,4,opt,name=IpLimit,proto3" json:"ip_limit"`
}

func (m *UpdateApiKeyRequest) Reset()         { *m = UpdateApiKeyRequest{} }
func (m *UpdateApiKeyRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateApiKeyRequest) ProtoMessage()    {}
func (*UpdateApiKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{42}
}
func (m *UpdateApiKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateApiKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateApiKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateApiKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateApiKeyRequest.Merge(m, src)
}
func (m *UpdateApiKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateApiKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateApiKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateApiKeyRequest proto.InternalMessageInfo

func (m *UpdateApiKeyRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateApiKeyRequest) GetAccessType() int32 {
	if m != nil {
		return m.AccessType
	}
	return 0
}

func (m *UpdateApiKeyRequest) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *UpdateApiKeyRequest) GetIpLimit() string {
	if m != nil {
		return m.IpLimit
	}
	return ""
}

type UpdateApiKeyResponse struct {
}

func (m *UpdateApiKeyResponse) Reset()         { *m = UpdateApiKeyResponse{} }
func (m *UpdateApiKeyResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateApiKeyResponse) ProtoMessage()    {}
func (*UpdateApiKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{43}
}
func (m *UpdateApiKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateApiKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateApiKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateApiKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateApiKeyResponse.Merge(m, src)
}
func (m *UpdateApiKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateApiKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateApiKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateApiKeyResponse proto.InternalMessageInfo

type DeleteApiKeyRequest struct {
	// API_KEY的id。
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"id" validate:"required"`
}

func (m *DeleteApiKeyRequest) Reset()         { *m = DeleteApiKeyRequest{} }
func (m *DeleteApiKeyRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteApiKeyRequest) ProtoMessage()    {}
func (*DeleteApiKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{44}
}
func (m *DeleteApiKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteApiKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteApiKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteApiKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteApiKeyRequest.Merge(m, src)
}
func (m *DeleteApiKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteApiKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteApiKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteApiKeyRequest proto.InternalMessageInfo

func (m *DeleteApiKeyRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteApiKeyResponse struct {
}

func (m *DeleteApiKeyResponse) Reset()         { *m = DeleteApiKeyResponse{} }
func (m *DeleteApiKeyResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteApiKeyResponse) ProtoMessage()    {}
func (*DeleteApiKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{45}
}
func (m *DeleteApiKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteApiKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteApiKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteApiKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteApiKeyResponse.Merge(m, src)
}
func (m *DeleteApiKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteApiKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteApiKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteApiKeyResponse proto.InternalMessageInfo

//*******************************************************************************
type AddWalletRequest struct {
	//钱包名称
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"name" validate:"required"`
	//钱包类型 0 hd钱包 1 导入钱包 2 系统钱包
	WType shared_gogo.WalletType `protobuf:"varint,3,opt,name=WType,proto3,enum=shared.api.WalletType" json:"wtype" validate:"oneof=0 1 2"`
}

func (m *AddWalletRequest) Reset()         { *m = AddWalletRequest{} }
func (m *AddWalletRequest) String() string { return proto.CompactTextString(m) }
func (*AddWalletRequest) ProtoMessage()    {}
func (*AddWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{46}
}
func (m *AddWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWalletRequest.Merge(m, src)
}
func (m *AddWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWalletRequest proto.InternalMessageInfo

func (m *AddWalletRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddWalletRequest) GetWType() shared_gogo.WalletType {
	if m != nil {
		return m.WType
	}
	return shared_gogo.WalletType_WalletType_HD
}

type AddWalletResponse struct {
	//钱包id
	Wid int64 `protobuf:"varint,1,opt,name=Wid,proto3" json:"wid"`
}

func (m *AddWalletResponse) Reset()         { *m = AddWalletResponse{} }
func (m *AddWalletResponse) String() string { return proto.CompactTextString(m) }
func (*AddWalletResponse) ProtoMessage()    {}
func (*AddWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{47}
}
func (m *AddWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWalletResponse.Merge(m, src)
}
func (m *AddWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddWalletResponse proto.InternalMessageInfo

func (m *AddWalletResponse) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

type UpdateWalletRequest struct {
	//钱包id
	Wid int64 `protobuf:"varint,1,opt,name=Wid,proto3" json:"wid" validate:"required"`
	//钱包名称
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	//钱包状态  1 冻结 2 激活
	State shared_gogo.StateType `protobuf:"varint,3,opt,name=State,proto3,enum=shared.api.StateType" json:"state"`
}

func (m *UpdateWalletRequest) Reset()         { *m = UpdateWalletRequest{} }
func (m *UpdateWalletRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateWalletRequest) ProtoMessage()    {}
func (*UpdateWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{48}
}
func (m *UpdateWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWalletRequest.Merge(m, src)
}
func (m *UpdateWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWalletRequest proto.InternalMessageInfo

func (m *UpdateWalletRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *UpdateWalletRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateWalletRequest) GetState() shared_gogo.StateType {
	if m != nil {
		return m.State
	}
	return shared_gogo.StateType_State_Unknown
}

type UpdateWalletResponse struct {
}

func (m *UpdateWalletResponse) Reset()         { *m = UpdateWalletResponse{} }
func (m *UpdateWalletResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateWalletResponse) ProtoMessage()    {}
func (*UpdateWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{49}
}
func (m *UpdateWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWalletResponse.Merge(m, src)
}
func (m *UpdateWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWalletResponse proto.InternalMessageInfo

type RemoveWalletRequest struct {
	//钱包id
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"wid" validate:"required"`
}

func (m *RemoveWalletRequest) Reset()         { *m = RemoveWalletRequest{} }
func (m *RemoveWalletRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveWalletRequest) ProtoMessage()    {}
func (*RemoveWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{50}
}
func (m *RemoveWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWalletRequest.Merge(m, src)
}
func (m *RemoveWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWalletRequest proto.InternalMessageInfo

func (m *RemoveWalletRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

type RemoveWalletResponse struct {
}

func (m *RemoveWalletResponse) Reset()         { *m = RemoveWalletResponse{} }
func (m *RemoveWalletResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveWalletResponse) ProtoMessage()    {}
func (*RemoveWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{51}
}
func (m *RemoveWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWalletResponse.Merge(m, src)
}
func (m *RemoveWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWalletResponse proto.InternalMessageInfo

type ListWalletRequest struct {
	Wid int64 `protobuf:"varint,1,opt,name=Wid,proto3" json:"wid"`
	//分页
	Page int32 `protobuf:"varint,10,opt,name=Page,proto3" json:"page"`
	//每页记录数
	PageSize int32 `protobuf:"varint,11,opt,name=PageSize,proto3" json:"page_size"`
}

func (m *ListWalletRequest) Reset()         { *m = ListWalletRequest{} }
func (m *ListWalletRequest) String() string { return proto.CompactTextString(m) }
func (*ListWalletRequest) ProtoMessage()    {}
func (*ListWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{52}
}
func (m *ListWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletRequest.Merge(m, src)
}
func (m *ListWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletRequest proto.InternalMessageInfo

func (m *ListWalletRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListWalletRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListWalletRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListWalletResponse struct {
	Items []*shared_gogo.WalletInfo `protobuf:"bytes,1,rep,name=Items,proto3" json:"items"`
	//总记录数
	TotalNum int32 `protobuf:"varint,10,opt,name=TotalNum,proto3" json:"total_num"`
	//分页
	Page int32 `protobuf:"varint,11,opt,name=Page,proto3" json:"page"`
}

func (m *ListWalletResponse) Reset()         { *m = ListWalletResponse{} }
func (m *ListWalletResponse) String() string { return proto.CompactTextString(m) }
func (*ListWalletResponse) ProtoMessage()    {}
func (*ListWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{53}
}
func (m *ListWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletResponse.Merge(m, src)
}
func (m *ListWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletResponse proto.InternalMessageInfo

func (m *ListWalletResponse) GetItems() []*shared_gogo.WalletInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListWalletResponse) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *ListWalletResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ListCoinInfoRequest struct {
	//分页
	Page int32 `protobuf:"varint,10,opt,name=Page,proto3" json:"page"`
	//每页记录数
	PageSize int32 `protobuf:"varint,11,opt,name=PageSize,proto3" json:"page_size"`
}

func (m *ListCoinInfoRequest) Reset()         { *m = ListCoinInfoRequest{} }
func (m *ListCoinInfoRequest) String() string { return proto.CompactTextString(m) }
func (*ListCoinInfoRequest) ProtoMessage()    {}
func (*ListCoinInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{54}
}
func (m *ListCoinInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCoinInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCoinInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCoinInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCoinInfoRequest.Merge(m, src)
}
func (m *ListCoinInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCoinInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCoinInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCoinInfoRequest proto.InternalMessageInfo

func (m *ListCoinInfoRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListCoinInfoRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListCoinInfoResponse struct {
	Items []*shared_gogo.CoinInfo `protobuf:"bytes,1,rep,name=Items,proto3" json:"items"`
	//总记录数
	TotalNum int32 `protobuf:"varint,10,opt,name=TotalNum,proto3" json:"total_num"`
	//分页
	Page int32 `protobuf:"varint,11,opt,name=Page,proto3" json:"page"`
}

func (m *ListCoinInfoResponse) Reset()         { *m = ListCoinInfoResponse{} }
func (m *ListCoinInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListCoinInfoResponse) ProtoMessage()    {}
func (*ListCoinInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{55}
}
func (m *ListCoinInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCoinInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCoinInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCoinInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCoinInfoResponse.Merge(m, src)
}
func (m *ListCoinInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCoinInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCoinInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCoinInfoResponse proto.InternalMessageInfo

func (m *ListCoinInfoResponse) GetItems() []*shared_gogo.CoinInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListCoinInfoResponse) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *ListCoinInfoResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type AddWalletCoinRequest struct {
	//钱包id
	Wid int64 `protobuf:"varint,1,opt,name=Wid,proto3" json:"wid" validate:"required"`
	//Coin id
	Cid int64 `protobuf:"varint,2,opt,name=Cid,proto3" json:"cid" validate:"required"`
	//是否能充值
	CanDeposit bool `protobuf:"varint,3,opt,name=CanDeposit,proto3" json:"can_deposit"`
	//是否能提现
	CanWithdraw bool `protobuf:"varint,4,opt,name=CanWithdraw,proto3" json:"can_withdraw"`
}

func (m *AddWalletCoinRequest) Reset()         { *m = AddWalletCoinRequest{} }
func (m *AddWalletCoinRequest) String() string { return proto.CompactTextString(m) }
func (*AddWalletCoinRequest) ProtoMessage()    {}
func (*AddWalletCoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{56}
}
func (m *AddWalletCoinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWalletCoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWalletCoinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWalletCoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWalletCoinRequest.Merge(m, src)
}
func (m *AddWalletCoinRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddWalletCoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWalletCoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWalletCoinRequest proto.InternalMessageInfo

func (m *AddWalletCoinRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *AddWalletCoinRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *AddWalletCoinRequest) GetCanDeposit() bool {
	if m != nil {
		return m.CanDeposit
	}
	return false
}

func (m *AddWalletCoinRequest) GetCanWithdraw() bool {
	if m != nil {
		return m.CanWithdraw
	}
	return false
}

type AddWalletCoinResponse struct {
	//钱包Coin id
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"id"`
}

func (m *AddWalletCoinResponse) Reset()         { *m = AddWalletCoinResponse{} }
func (m *AddWalletCoinResponse) String() string { return proto.CompactTextString(m) }
func (*AddWalletCoinResponse) ProtoMessage()    {}
func (*AddWalletCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{57}
}
func (m *AddWalletCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWalletCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWalletCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWalletCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWalletCoinResponse.Merge(m, src)
}
func (m *AddWalletCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddWalletCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWalletCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddWalletCoinResponse proto.InternalMessageInfo

func (m *AddWalletCoinResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveWalletCoinRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"id" validate:"required"`
}

func (m *RemoveWalletCoinRequest) Reset()         { *m = RemoveWalletCoinRequest{} }
func (m *RemoveWalletCoinRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveWalletCoinRequest) ProtoMessage()    {}
func (*RemoveWalletCoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{58}
}
func (m *RemoveWalletCoinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWalletCoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWalletCoinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWalletCoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWalletCoinRequest.Merge(m, src)
}
func (m *RemoveWalletCoinRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWalletCoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWalletCoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWalletCoinRequest proto.InternalMessageInfo

func (m *RemoveWalletCoinRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveWalletCoinResponse struct {
}

func (m *RemoveWalletCoinResponse) Reset()         { *m = RemoveWalletCoinResponse{} }
func (m *RemoveWalletCoinResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveWalletCoinResponse) ProtoMessage()    {}
func (*RemoveWalletCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{59}
}
func (m *RemoveWalletCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWalletCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWalletCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWalletCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWalletCoinResponse.Merge(m, src)
}
func (m *RemoveWalletCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWalletCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWalletCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWalletCoinResponse proto.InternalMessageInfo

type ListWalletCoinRequest struct {
	//钱包id
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"wid" validate:"required"`
	//Coin id
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"cid"`
	//分页
	Page int32 `protobuf:"varint,10,opt,name=Page,proto3" json:"page"`
	//每页记录数
	PageSize int32 `protobuf:"varint,11,opt,name=PageSize,proto3" json:"page_size"`
}

func (m *ListWalletCoinRequest) Reset()         { *m = ListWalletCoinRequest{} }
func (m *ListWalletCoinRequest) String() string { return proto.CompactTextString(m) }
func (*ListWalletCoinRequest) ProtoMessage()    {}
func (*ListWalletCoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{60}
}
func (m *ListWalletCoinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletCoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletCoinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletCoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletCoinRequest.Merge(m, src)
}
func (m *ListWalletCoinRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletCoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletCoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletCoinRequest proto.InternalMessageInfo

func (m *ListWalletCoinRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListWalletCoinRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ListWalletCoinRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListWalletCoinRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListWalletCoinResponse struct {
	//钱包Coin列表
	Items []*shared_gogo.WalletCoin `protobuf:"bytes,3,rep,name=Items,proto3" json:"items"`
	//总记录数
	TotalNum int32 `protobuf:"varint,10,opt,name=TotalNum,proto3" json:"total_num"`
	//分页
	Page int32 `protobuf:"varint,11,opt,name=Page,proto3" json:"page"`
}

func (m *ListWalletCoinResponse) Reset()         { *m = ListWalletCoinResponse{} }
func (m *ListWalletCoinResponse) String() string { return proto.CompactTextString(m) }
func (*ListWalletCoinResponse) ProtoMessage()    {}
func (*ListWalletCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{61}
}
func (m *ListWalletCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletCoinResponse.Merge(m, src)
}
func (m *ListWalletCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletCoinResponse proto.InternalMessageInfo

func (m *ListWalletCoinResponse) GetItems() []*shared_gogo.WalletCoin {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListWalletCoinResponse) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *ListWalletCoinResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ListAddressRequest struct {
	//钱包id
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"wid" validate:"required"`
	//Coin id
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"cid" validate:"required"`
	//指定address
	Address string `protobuf:"bytes,4,opt,name=Address,proto3" json:"address"`
	//分页
	Page int32 `protobuf:"varint,10,opt,name=Page,proto3" json:"page"`
	//每页记录数
	PageSize int32 `protobuf:"varint,11,opt,name=PageSize,proto3" json:"page_size"`
}

func (m *ListAddressRequest) Reset()         { *m = ListAddressRequest{} }
func (m *ListAddressRequest) String() string { return proto.CompactTextString(m) }
func (*ListAddressRequest) ProtoMessage()    {}
func (*ListAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{62}
}
func (m *ListAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAddressRequest.Merge(m, src)
}
func (m *ListAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAddressRequest proto.InternalMessageInfo

func (m *ListAddressRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListAddressRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ListAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ListAddressRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListAddressRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type SimpleAddressInfo struct {
	//地址
	Address string `protobuf:"bytes,13,opt,name=Address,proto3" json:"address"`
	//memo eos用
	Memo string `protobuf:"bytes,14,opt,name=Memo,proto3" json:"memo"`
	//创建者
	Creator string `protobuf:"bytes,15,opt,name=Creator,proto3" json:"creator"`
	//创建时间
	CreateAt bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,20,opt,name=CreateAt,proto3,casttype=github.com/gisvr/wallet/src/lib/time.Time" json:"create_at" gorm:"type:datetime;"`
	//最后更新时间
	UpdateAt bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,21,opt,name=UpdateAt,proto3,casttype=github.com/gisvr/wallet/src/lib/time.Time" json:"update_at" gorm:"type:datetime;"`
}

func (m *SimpleAddressInfo) Reset()         { *m = SimpleAddressInfo{} }
func (m *SimpleAddressInfo) String() string { return proto.CompactTextString(m) }
func (*SimpleAddressInfo) ProtoMessage()    {}
func (*SimpleAddressInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{63}
}
func (m *SimpleAddressInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleAddressInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleAddressInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleAddressInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleAddressInfo.Merge(m, src)
}
func (m *SimpleAddressInfo) XXX_Size() int {
	return m.Size()
}
func (m *SimpleAddressInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleAddressInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleAddressInfo proto.InternalMessageInfo

func (m *SimpleAddressInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SimpleAddressInfo) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *SimpleAddressInfo) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SimpleAddressInfo) GetCreateAt() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *SimpleAddressInfo) GetUpdateAt() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

type ListAddressResponse struct {
	//地址列表
	Items []*SimpleAddressInfo `protobuf:"bytes,1,rep,name=Items,proto3" json:"items"`
	//总记录数
	TotalNum int32 `protobuf:"varint,10,opt,name=TotalNum,proto3" json:"total_num"`
	//分页
	Page int32 `protobuf:"varint,11,opt,name=Page,proto3" json:"page"`
}

func (m *ListAddressResponse) Reset()         { *m = ListAddressResponse{} }
func (m *ListAddressResponse) String() string { return proto.CompactTextString(m) }
func (*ListAddressResponse) ProtoMessage()    {}
func (*ListAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{64}
}
func (m *ListAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAddressResponse.Merge(m, src)
}
func (m *ListAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAddressResponse proto.InternalMessageInfo

func (m *ListAddressResponse) GetItems() []*SimpleAddressInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListAddressResponse) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *ListAddressResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type GetNewAddressRequest struct {
	//钱包id
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"wid" validate:"required"`
	//Coin id
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"cid" validate:"required"`
	//label
	Label string `protobuf:"bytes,4,opt,name=Label,proto3" json:"label"`
}

func (m *GetNewAddressRequest) Reset()         { *m = GetNewAddressRequest{} }
func (m *GetNewAddressRequest) String() string { return proto.CompactTextString(m) }
func (*GetNewAddressRequest) ProtoMessage()    {}
func (*GetNewAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{65}
}
func (m *GetNewAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNewAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNewAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNewAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNewAddressRequest.Merge(m, src)
}
func (m *GetNewAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNewAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNewAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNewAddressRequest proto.InternalMessageInfo

func (m *GetNewAddressRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *GetNewAddressRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *GetNewAddressRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type GetNewAddressResponse struct {
	//地址详情
	Item *shared_gogo.AddressInfo `protobuf:"bytes,1,opt,name=Item,proto3" json:"item"`
}

func (m *GetNewAddressResponse) Reset()         { *m = GetNewAddressResponse{} }
func (m *GetNewAddressResponse) String() string { return proto.CompactTextString(m) }
func (*GetNewAddressResponse) ProtoMessage()    {}
func (*GetNewAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{66}
}
func (m *GetNewAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNewAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNewAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNewAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNewAddressResponse.Merge(m, src)
}
func (m *GetNewAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNewAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNewAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNewAddressResponse proto.InternalMessageInfo

func (m *GetNewAddressResponse) GetItem() *shared_gogo.AddressInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type HideAddressRequest struct {
	//钱包id
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"wid" validate:"required"`
	//Coin id
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"cid" validate:"required"`
	//地址
	Address string `protobuf:"bytes,4,opt,name=Address,proto3" json:"address" validate:"required"`
	//memo
	Memo string `protobuf:"bytes,5,opt,name=Memo,proto3" json:"memo"`
}

func (m *HideAddressRequest) Reset()         { *m = HideAddressRequest{} }
func (m *HideAddressRequest) String() string { return proto.CompactTextString(m) }
func (*HideAddressRequest) ProtoMessage()    {}
func (*HideAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{67}
}
func (m *HideAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HideAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HideAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HideAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HideAddressRequest.Merge(m, src)
}
func (m *HideAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *HideAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HideAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HideAddressRequest proto.InternalMessageInfo

func (m *HideAddressRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *HideAddressRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *HideAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *HideAddressRequest) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type HideAddressResponse struct {
}

func (m *HideAddressResponse) Reset()         { *m = HideAddressResponse{} }
func (m *HideAddressResponse) String() string { return proto.CompactTextString(m) }
func (*HideAddressResponse) ProtoMessage()    {}
func (*HideAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{68}
}
func (m *HideAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HideAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HideAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HideAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HideAddressResponse.Merge(m, src)
}
func (m *HideAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *HideAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HideAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HideAddressResponse proto.InternalMessageInfo

type HasAddressRequest struct {
	//钱包id
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"wid" validate:"required"`
	//Coin id
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"cid" validate:"required"`
	//地址
	Address string `protobuf:"bytes,4,opt,name=Address,proto3" json:"address" validate:"required"`
	//memo eos有用
	Memo string `protobuf:"bytes,5,opt,name=Memo,proto3" json:"memo"`
}

func (m *HasAddressRequest) Reset()         { *m = HasAddressRequest{} }
func (m *HasAddressRequest) String() string { return proto.CompactTextString(m) }
func (*HasAddressRequest) ProtoMessage()    {}
func (*HasAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{69}
}
func (m *HasAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HasAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HasAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HasAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasAddressRequest.Merge(m, src)
}
func (m *HasAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *HasAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HasAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HasAddressRequest proto.InternalMessageInfo

func (m *HasAddressRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *HasAddressRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *HasAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *HasAddressRequest) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type HasAddressResponse struct {
	//是否存在
	Exist bool `protobuf:"varint,1,opt,name=Exist,proto3" json:"exist"`
}

func (m *HasAddressResponse) Reset()         { *m = HasAddressResponse{} }
func (m *HasAddressResponse) String() string { return proto.CompactTextString(m) }
func (*HasAddressResponse) ProtoMessage()    {}
func (*HasAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{70}
}
func (m *HasAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HasAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HasAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HasAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasAddressResponse.Merge(m, src)
}
func (m *HasAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *HasAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HasAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HasAddressResponse proto.InternalMessageInfo

func (m *HasAddressResponse) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

type CheckAddressRequest struct {
	//Coin id
	Cid int64 `protobuf:"varint,1,opt,name=Cid,proto3" json:"cid" validate:"required"`
	//地址
	Address string `protobuf:"bytes,2,opt,name=Address,proto3" json:"address" validate:"required"`
	//memo eos有用
	Memo string `protobuf:"bytes,3,opt,name=Memo,proto3" json:"memo"`
}

func (m *CheckAddressRequest) Reset()         { *m = CheckAddressRequest{} }
func (m *CheckAddressRequest) String() string { return proto.CompactTextString(m) }
func (*CheckAddressRequest) ProtoMessage()    {}
func (*CheckAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{71}
}
func (m *CheckAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckAddressRequest.Merge(m, src)
}
func (m *CheckAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckAddressRequest proto.InternalMessageInfo

func (m *CheckAddressRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *CheckAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CheckAddressRequest) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type CheckAddressResponse struct {
	//是否有效
	Valid bool `protobuf:"varint,1,opt,name=Valid,proto3" json:"valid"`
}

func (m *CheckAddressResponse) Reset()         { *m = CheckAddressResponse{} }
func (m *CheckAddressResponse) String() string { return proto.CompactTextString(m) }
func (*CheckAddressResponse) ProtoMessage()    {}
func (*CheckAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{72}
}
func (m *CheckAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckAddressResponse.Merge(m, src)
}
func (m *CheckAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckAddressResponse proto.InternalMessageInfo

func (m *CheckAddressResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type GetCoinFeeRequest struct {
	//钱包id
	Wid int64 `protobuf:"varint,1,opt,name=Wid,proto3" json:"wid" validate:"required"`
	//Coin id
	Cid int64 `protobuf:"varint,2,opt,name=Cid,proto3" json:"cid" validate:"required"`
}

func (m *GetCoinFeeRequest) Reset()         { *m = GetCoinFeeRequest{} }
func (m *GetCoinFeeRequest) String() string { return proto.CompactTextString(m) }
func (*GetCoinFeeRequest) ProtoMessage()    {}
func (*GetCoinFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{73}
}
func (m *GetCoinFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoinFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoinFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCoinFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoinFeeRequest.Merge(m, src)
}
func (m *GetCoinFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCoinFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoinFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoinFeeRequest proto.InternalMessageInfo

func (m *GetCoinFeeRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *GetCoinFeeRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type GetCoinFeeResponse struct {
	//最慢一档手续费
	FeeSlow float64 `protobuf:"fixed64,1,opt,name=FeeSlow,proto3" json:"fee_slow"`
	//中间一档手续费
	FeeMiddle float64 `protobuf:"fixed64,2,opt,name=FeeMiddle,proto3" json:"fee_middle"`
	//最快一档手续费
	FeeFast float64 `protobuf:"fixed64,3,opt,name=FeeFast,proto3" json:"fee_fast"`
	//手续费限额 eth用
	LimitFee float64 `protobuf:"fixed64,4,opt,name=LimitFee,proto3" json:"limit_fee"`
	//平台费
	PlatformFee float64 `protobuf:"fixed64,5,opt,name=PlatformFee,proto3" json:"platform_fee"`
	//最慢一档手续费
	FeeSlowStr string `protobuf:"bytes,11,opt,name=FeeSlowStr,proto3" json:"fee_slow_str"`
	//中间一档手续费
	FeeMiddleStr string `protobuf:"bytes,112,opt,name=FeeMiddleStr,proto3" json:"fee_middle_str"`
	//最快一档手续费
	FeeFastStr string `protobuf:"bytes,13,opt,name=FeeFastStr,proto3" json:"fee_fast_str"`
	//手续费限额 eth用
	LimitFeeStr string `protobuf:"bytes,14,opt,name=LimitFeeStr,proto3" json:"limit_fee_str"`
	//平台费
	PlatformFeeStr string `protobuf:"bytes,15,opt,name=PlatformFeeStr,proto3" json:"platform_fee_str"`
}

func (m *GetCoinFeeResponse) Reset()         { *m = GetCoinFeeResponse{} }
func (m *GetCoinFeeResponse) String() string { return proto.CompactTextString(m) }
func (*GetCoinFeeResponse) ProtoMessage()    {}
func (*GetCoinFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{74}
}
func (m *GetCoinFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoinFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoinFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCoinFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoinFeeResponse.Merge(m, src)
}
func (m *GetCoinFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCoinFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoinFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoinFeeResponse proto.InternalMessageInfo

func (m *GetCoinFeeResponse) GetFeeSlow() float64 {
	if m != nil {
		return m.FeeSlow
	}
	return 0
}

func (m *GetCoinFeeResponse) GetFeeMiddle() float64 {
	if m != nil {
		return m.FeeMiddle
	}
	return 0
}

func (m *GetCoinFeeResponse) GetFeeFast() float64 {
	if m != nil {
		return m.FeeFast
	}
	return 0
}

func (m *GetCoinFeeResponse) GetLimitFee() float64 {
	if m != nil {
		return m.LimitFee
	}
	return 0
}

func (m *GetCoinFeeResponse) GetPlatformFee() float64 {
	if m != nil {
		return m.PlatformFee
	}
	return 0
}

func (m *GetCoinFeeResponse) GetFeeSlowStr() string {
	if m != nil {
		return m.FeeSlowStr
	}
	return ""
}

func (m *GetCoinFeeResponse) GetFeeMiddleStr() string {
	if m != nil {
		return m.FeeMiddleStr
	}
	return ""
}

func (m *GetCoinFeeResponse) GetFeeFastStr() string {
	if m != nil {
		return m.FeeFastStr
	}
	return ""
}

func (m *GetCoinFeeResponse) GetLimitFeeStr() string {
	if m != nil {
		return m.LimitFeeStr
	}
	return ""
}

func (m *GetCoinFeeResponse) GetPlatformFeeStr() string {
	if m != nil {
		return m.PlatformFeeStr
	}
	return ""
}

type ListCoinTxRequest struct {
	//钱包id
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"wid"`
	//coin id
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"cid"`
	//上链时才有值
	Txid string `protobuf:"bytes,4,opt,name=Txid,proto3" json:"txid"`
	//由钱包决定从哪个钱包内的地址转出
	FromAddress string `protobuf:"bytes,5,opt,name=FromAddress,proto3" json:"from_address"`
	//目标地址
	ToAddress string `protobuf:"bytes,6,opt,name=ToAddress,proto3" json:"to_address"`
	//toAddress的memo eos用
	Memo string `protobuf:"bytes,7,opt,name=Memo,proto3" json:"memo"`
	//提现申请id
	RequestId string `protobuf:"bytes,8,opt,name=RequestId,proto3" json:"request_id"`
	//提现类型 快速提现(钱包内地址互转)/普通提现
	Type int64 `protobuf:"varint,9,opt,name=Type,proto3" json:"type"`
	//最小确认数
	MinConfirmedNum int64 `protobuf:"varint,10,opt,name=MinConfirmedNum,proto3" json:"min_confirmed_num"`
	//cointx.id >= MinId
	MinId int64 `protobuf:"varint,11,opt,name=MinId,proto3" json:"min_id"`
	//cointx.id < MinId
	MaxId int64 `protobuf:"varint,12,opt,name=MaxId,proto3" json:"max_id"`
	//每页大小, 不传则默认为50, 最大也是50
	Limit int32 `protobuf:"varint,13,opt,name=Limit,proto3" json:"limit"`
	//cointx.BlockTime >= BeginBlockTime
	BeginBlockTime bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,14,opt,name=BeginBlockTime,proto3,casttype=github.com/gisvr/wallet/src/lib/time.Time" json:"begin_block_time" gorm:"type:datetime;"`
	//cointx.BlockTime < EndBlockTime
	EndBlockTime bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,15,opt,name=EndBlockTime,proto3,casttype=github.com/gisvr/wallet/src/lib/time.Time" json:"end_block_time" gorm:"type:datetime;"`
	//充值提现
	Side shared_gogo.TxSideType `protobuf:"varint,16,opt,name=Side,proto3,enum=shared.api.TxSideType" json:"side"`
}

func (m *ListCoinTxRequest) Reset()         { *m = ListCoinTxRequest{} }
func (m *ListCoinTxRequest) String() string { return proto.CompactTextString(m) }
func (*ListCoinTxRequest) ProtoMessage()    {}
func (*ListCoinTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{75}
}
func (m *ListCoinTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCoinTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCoinTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCoinTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCoinTxRequest.Merge(m, src)
}
func (m *ListCoinTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCoinTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCoinTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCoinTxRequest proto.InternalMessageInfo

func (m *ListCoinTxRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListCoinTxRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ListCoinTxRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *ListCoinTxRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *ListCoinTxRequest) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *ListCoinTxRequest) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *ListCoinTxRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ListCoinTxRequest) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ListCoinTxRequest) GetMinConfirmedNum() int64 {
	if m != nil {
		return m.MinConfirmedNum
	}
	return 0
}

func (m *ListCoinTxRequest) GetMinId() int64 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *ListCoinTxRequest) GetMaxId() int64 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ListCoinTxRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListCoinTxRequest) GetBeginBlockTime() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.BeginBlockTime
	}
	return 0
}

func (m *ListCoinTxRequest) GetEndBlockTime() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.EndBlockTime
	}
	return 0
}

func (m *ListCoinTxRequest) GetSide() shared_gogo.TxSideType {
	if m != nil {
		return m.Side
	}
	return shared_gogo.TxSideType_TxSide_Unknown
}

type ListCoinTxResponse struct {
	//交易列表
	Items []*shared_gogo.CoinTx `protobuf:"bytes,1,rep,name=Items,proto3" json:"items"`
}

func (m *ListCoinTxResponse) Reset()         { *m = ListCoinTxResponse{} }
func (m *ListCoinTxResponse) String() string { return proto.CompactTextString(m) }
func (*ListCoinTxResponse) ProtoMessage()    {}
func (*ListCoinTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{76}
}
func (m *ListCoinTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCoinTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCoinTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCoinTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCoinTxResponse.Merge(m, src)
}
func (m *ListCoinTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCoinTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCoinTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCoinTxResponse proto.InternalMessageInfo

func (m *ListCoinTxResponse) GetItems() []*shared_gogo.CoinTx {
	if m != nil {
		return m.Items
	}
	return nil
}

type QueryCoinTxRequest struct {
	//模糊条件
	Txt string `protobuf:"bytes,2,opt,name=txt,proto3" json:"txt"`
	//钱包id
	Wids []int64 `protobuf:"varint,3,rep,packed,name=Wids,proto3" json:"wids"`
	//coin id
	Cids []int64 `protobuf:"varint,4,rep,packed,name=Cids,proto3" json:"cids"`
	//状态 3 等待审核 11 等待确认 13 成功 14 失败
	States []shared_gogo.TxStateType `protobuf:"varint,5,rep,packed,name=States,proto3,enum=shared.api.TxStateType" json:"states"`
	//类型 1 接收 2 发送
	Sides []shared_gogo.TxSideType `protobuf:"varint,6,rep,packed,name=Sides,proto3,enum=shared.api.TxSideType" json:"sides"`
	//上链时间 起始
	BeginBlockTime bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,7,opt,name=BeginBlockTime,proto3,casttype=github.com/gisvr/wallet/src/lib/time.Time" json:"begin_block_time" gorm:"type:datetime;"`
	//上链时间 结束 cointx.BlockTime < EndBlockTime
	EndBlockTime bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,8,opt,name=EndBlockTime,proto3,casttype=github.com/gisvr/wallet/src/lib/time.Time" json:"end_block_time" gorm:"type:datetime;"`
	//创建时间 起始
	BeginCreateAt bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,9,opt,name=BeginCreateAt,proto3,casttype=github.com/gisvr/wallet/src/lib/time.Time" json:"begin_create_at" gorm:"type:datetime;"`
	//创建时间 结束 cointx.BlockTime < EndBlockTime
	EndCreateAt bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,10,opt,name=EndCreateAt,proto3,casttype=github.com/gisvr/wallet/src/lib/time.Time" json:"end_create_at" gorm:"type:datetime;"`
	//更新时间 起始
	BeginUpdateAt bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,11,opt,name=BeginUpdateAt,proto3,casttype=github.com/gisvr/wallet/src/lib/time.Time" json:"begin_update_at" gorm:"type:datetime;"`
	//更新时间 结束 cointx.BlockTime < EndBlockTime
	EndUpdateAt bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,12,opt,name=EndUpdateAt,proto3,casttype=github.com/gisvr/wallet/src/lib/time.Time" json:"end_update_at" gorm:"type:datetime;"`
	//第几页
	Page int32 `protobuf:"varint,50,opt,name=Page,proto3" json:"page"`
	//每页条数
	PageSize int32 `protobuf:"varint,51,opt,name=PageSize,proto3" json:"page_size"`
}

func (m *QueryCoinTxRequest) Reset()         { *m = QueryCoinTxRequest{} }
func (m *QueryCoinTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCoinTxRequest) ProtoMessage()    {}
func (*QueryCoinTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{77}
}
func (m *QueryCoinTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCoinTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCoinTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCoinTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCoinTxRequest.Merge(m, src)
}
func (m *QueryCoinTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCoinTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCoinTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCoinTxRequest proto.InternalMessageInfo

func (m *QueryCoinTxRequest) GetTxt() string {
	if m != nil {
		return m.Txt
	}
	return ""
}

func (m *QueryCoinTxRequest) GetWids() []int64 {
	if m != nil {
		return m.Wids
	}
	return nil
}

func (m *QueryCoinTxRequest) GetCids() []int64 {
	if m != nil {
		return m.Cids
	}
	return nil
}

func (m *QueryCoinTxRequest) GetStates() []shared_gogo.TxStateType {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *QueryCoinTxRequest) GetSides() []shared_gogo.TxSideType {
	if m != nil {
		return m.Sides
	}
	return nil
}

func (m *QueryCoinTxRequest) GetBeginBlockTime() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.BeginBlockTime
	}
	return 0
}

func (m *QueryCoinTxRequest) GetEndBlockTime() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.EndBlockTime
	}
	return 0
}

func (m *QueryCoinTxRequest) GetBeginCreateAt() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.BeginCreateAt
	}
	return 0
}

func (m *QueryCoinTxRequest) GetEndCreateAt() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.EndCreateAt
	}
	return 0
}

func (m *QueryCoinTxRequest) GetBeginUpdateAt() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.BeginUpdateAt
	}
	return 0
}

func (m *QueryCoinTxRequest) GetEndUpdateAt() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.EndUpdateAt
	}
	return 0
}

func (m *QueryCoinTxRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryCoinTxRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type QueryCoinTxResponse struct {
	//交易列表
	Items []*shared_gogo.CoinTx `protobuf:"bytes,1,rep,name=Items,proto3" json:"items"`
	//总数
	TotalNum int32 `protobuf:"varint,2,opt,name=TotalNum,proto3" json:"total_num"`
	//第几页
	Page int32 `protobuf:"varint,3,opt,name=Page,proto3" json:"page"`
}

func (m *QueryCoinTxResponse) Reset()         { *m = QueryCoinTxResponse{} }
func (m *QueryCoinTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCoinTxResponse) ProtoMessage()    {}
func (*QueryCoinTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{78}
}
func (m *QueryCoinTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCoinTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCoinTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCoinTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCoinTxResponse.Merge(m, src)
}
func (m *QueryCoinTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCoinTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCoinTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCoinTxResponse proto.InternalMessageInfo

func (m *QueryCoinTxResponse) GetItems() []*shared_gogo.CoinTx {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *QueryCoinTxResponse) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *QueryCoinTxResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ExportCoinTxRequest struct {
	//导出保存的文件名
	FileName string `protobuf:"bytes,1,opt,name=FileName,proto3" json:"file_name"`
	//模糊条件
	Txt string `protobuf:"bytes,2,opt,name=txt,proto3" json:"txt"`
	//钱包id
	Wids []int64 `protobuf:"varint,3,rep,packed,name=Wids,proto3" json:"wids"`
	//coin id
	Cids []int64 `protobuf:"varint,4,rep,packed,name=Cids,proto3" json:"cids"`
	//状态 3 等待审核 11 等待确认 13 成功 14 失败
	States []shared_gogo.TxStateType `protobuf:"varint,5,rep,packed,name=States,proto3,enum=shared.api.TxStateType" json:"states"`
	//类型 1 接收 2 发送
	Sides []shared_gogo.TxSideType `protobuf:"varint,6,rep,packed,name=Sides,proto3,enum=shared.api.TxSideType" json:"sides"`
	//时间 起始
	BeginBlockTime bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,7,opt,name=BeginBlockTime,proto3,casttype=github.com/gisvr/wallet/src/lib/time.Time" json:"begin_block_time" gorm:"type:datetime;"`
	//时间 结束 cointx.BlockTime < EndBlockTime
	EndBlockTime bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,8,opt,name=EndBlockTime,proto3,casttype=github.com/gisvr/wallet/src/lib/time.Time" json:"end_block_time" gorm:"type:datetime;"`
}

func (m *ExportCoinTxRequest) Reset()         { *m = ExportCoinTxRequest{} }
func (m *ExportCoinTxRequest) String() string { return proto.CompactTextString(m) }
func (*ExportCoinTxRequest) ProtoMessage()    {}
func (*ExportCoinTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{79}
}
func (m *ExportCoinTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportCoinTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportCoinTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportCoinTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportCoinTxRequest.Merge(m, src)
}
func (m *ExportCoinTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExportCoinTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportCoinTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExportCoinTxRequest proto.InternalMessageInfo

func (m *ExportCoinTxRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ExportCoinTxRequest) GetTxt() string {
	if m != nil {
		return m.Txt
	}
	return ""
}

func (m *ExportCoinTxRequest) GetWids() []int64 {
	if m != nil {
		return m.Wids
	}
	return nil
}

func (m *ExportCoinTxRequest) GetCids() []int64 {
	if m != nil {
		return m.Cids
	}
	return nil
}

func (m *ExportCoinTxRequest) GetStates() []shared_gogo.TxStateType {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *ExportCoinTxRequest) GetSides() []shared_gogo.TxSideType {
	if m != nil {
		return m.Sides
	}
	return nil
}

func (m *ExportCoinTxRequest) GetBeginBlockTime() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.BeginBlockTime
	}
	return 0
}

func (m *ExportCoinTxRequest) GetEndBlockTime() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.EndBlockTime
	}
	return 0
}

type ExportCoinTxResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
}

func (m *ExportCoinTxResponse) Reset()         { *m = ExportCoinTxResponse{} }
func (m *ExportCoinTxResponse) String() string { return proto.CompactTextString(m) }
func (*ExportCoinTxResponse) ProtoMessage()    {}
func (*ExportCoinTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{80}
}
func (m *ExportCoinTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportCoinTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportCoinTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportCoinTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportCoinTxResponse.Merge(m, src)
}
func (m *ExportCoinTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExportCoinTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportCoinTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExportCoinTxResponse proto.InternalMessageInfo

func (m *ExportCoinTxResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type NewWithdrawRequest struct {
	//从钱包id提现
	Wid int64 `protobuf:"varint,1,opt,name=Wid,proto3" json:"wid" validate:"required"`
	//申请提现coin id
	Cid int64 `protobuf:"varint,2,opt,name=Cid,proto3" json:"cid" validate:"required"`
	//提现申请Id
	RequestId string `protobuf:"bytes,3,opt,name=RequestId,proto3" json:"request_id"`
	//提现地址
	Address string `protobuf:"bytes,4,opt,name=Address,proto3" json:"address" validate:"required"`
	//提现数额
	Amount float64 `protobuf:"fixed64,5,opt,name=Amount,proto3" json:"amount" validate:"required"`
	//交易memo(在某些币种里面也叫tag), 当提现EOS, XRP, IOST等币时，根据情况传入
	Memo string `protobuf:"bytes,6,opt,name=Memo,proto3" json:"memo"`
	//手续费coin id
	FeeCid int64 `protobuf:"varint,7,opt,name=FeeCid,proto3" json:"fee_cid"`
	//手续费
	Fee float64 `protobuf:"fixed64,8,opt,name=Fee,proto3" json:"fee"`
}

func (m *NewWithdrawRequest) Reset()         { *m = NewWithdrawRequest{} }
func (m *NewWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*NewWithdrawRequest) ProtoMessage()    {}
func (*NewWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{81}
}
func (m *NewWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewWithdrawRequest.Merge(m, src)
}
func (m *NewWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewWithdrawRequest proto.InternalMessageInfo

func (m *NewWithdrawRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *NewWithdrawRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *NewWithdrawRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *NewWithdrawRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NewWithdrawRequest) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *NewWithdrawRequest) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *NewWithdrawRequest) GetFeeCid() int64 {
	if m != nil {
		return m.FeeCid
	}
	return 0
}

func (m *NewWithdrawRequest) GetFee() float64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type NewWithdrawResponse struct {
	//
	InnerTxid string `protobuf:"bytes,1,opt,name=InnerTxid,proto3" json:"inner_txid"`
}

func (m *NewWithdrawResponse) Reset()         { *m = NewWithdrawResponse{} }
func (m *NewWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*NewWithdrawResponse) ProtoMessage()    {}
func (*NewWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{82}
}
func (m *NewWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewWithdrawResponse.Merge(m, src)
}
func (m *NewWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewWithdrawResponse proto.InternalMessageInfo

func (m *NewWithdrawResponse) GetInnerTxid() string {
	if m != nil {
		return m.InnerTxid
	}
	return ""
}

type GetWithdrawDetailRequest struct {
	//钱包id
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"wid" validate:"required"`
	//Coin id
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"cid" validate:"required"`
	//提现请求id
	RequestId string `protobuf:"bytes,4,opt,name=RequestId,proto3" json:"request_id" validate:"required"`
}

func (m *GetWithdrawDetailRequest) Reset()         { *m = GetWithdrawDetailRequest{} }
func (m *GetWithdrawDetailRequest) String() string { return proto.CompactTextString(m) }
func (*GetWithdrawDetailRequest) ProtoMessage()    {}
func (*GetWithdrawDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{83}
}
func (m *GetWithdrawDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWithdrawDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWithdrawDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWithdrawDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWithdrawDetailRequest.Merge(m, src)
}
func (m *GetWithdrawDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWithdrawDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWithdrawDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWithdrawDetailRequest proto.InternalMessageInfo

func (m *GetWithdrawDetailRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *GetWithdrawDetailRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *GetWithdrawDetailRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type GetWithdrawDetailResponse struct {
	Item *shared_gogo.CoinTx `protobuf:"bytes,1,opt,name=Item,proto3" json:"item"`
}

func (m *GetWithdrawDetailResponse) Reset()         { *m = GetWithdrawDetailResponse{} }
func (m *GetWithdrawDetailResponse) String() string { return proto.CompactTextString(m) }
func (*GetWithdrawDetailResponse) ProtoMessage()    {}
func (*GetWithdrawDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{84}
}
func (m *GetWithdrawDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWithdrawDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWithdrawDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWithdrawDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWithdrawDetailResponse.Merge(m, src)
}
func (m *GetWithdrawDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWithdrawDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWithdrawDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWithdrawDetailResponse proto.InternalMessageInfo

func (m *GetWithdrawDetailResponse) GetItem() *shared_gogo.CoinTx {
	if m != nil {
		return m.Item
	}
	return nil
}

type GetWalletAssetRequest struct {
	//钱包id
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"wid" validate:"required"`
	//Coin id
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"cid" validate:"required"`
}

func (m *GetWalletAssetRequest) Reset()         { *m = GetWalletAssetRequest{} }
func (m *GetWalletAssetRequest) String() string { return proto.CompactTextString(m) }
func (*GetWalletAssetRequest) ProtoMessage()    {}
func (*GetWalletAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{85}
}
func (m *GetWalletAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWalletAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWalletAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWalletAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWalletAssetRequest.Merge(m, src)
}
func (m *GetWalletAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWalletAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWalletAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWalletAssetRequest proto.InternalMessageInfo

func (m *GetWalletAssetRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *GetWalletAssetRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type GetWalletAssetResponse struct {
	Item *shared_gogo.WalletAsset `protobuf:"bytes,1,opt,name=Item,proto3" json:"item"`
}

func (m *GetWalletAssetResponse) Reset()         { *m = GetWalletAssetResponse{} }
func (m *GetWalletAssetResponse) String() string { return proto.CompactTextString(m) }
func (*GetWalletAssetResponse) ProtoMessage()    {}
func (*GetWalletAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{86}
}
func (m *GetWalletAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWalletAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWalletAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWalletAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWalletAssetResponse.Merge(m, src)
}
func (m *GetWalletAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWalletAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWalletAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWalletAssetResponse proto.InternalMessageInfo

func (m *GetWalletAssetResponse) GetItem() *shared_gogo.WalletAsset {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListWalletAssetRequest struct {
	//钱包id
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"wid"`
}

func (m *ListWalletAssetRequest) Reset()         { *m = ListWalletAssetRequest{} }
func (m *ListWalletAssetRequest) String() string { return proto.CompactTextString(m) }
func (*ListWalletAssetRequest) ProtoMessage()    {}
func (*ListWalletAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{87}
}
func (m *ListWalletAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletAssetRequest.Merge(m, src)
}
func (m *ListWalletAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletAssetRequest proto.InternalMessageInfo

func (m *ListWalletAssetRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

type ListWalletAssetResponse struct {
	Items []*shared_gogo.WalletAsset `protobuf:"bytes,1,rep,name=Items,proto3" json:"items"`
}

func (m *ListWalletAssetResponse) Reset()         { *m = ListWalletAssetResponse{} }
func (m *ListWalletAssetResponse) String() string { return proto.CompactTextString(m) }
func (*ListWalletAssetResponse) ProtoMessage()    {}
func (*ListWalletAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{88}
}
func (m *ListWalletAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletAssetResponse.Merge(m, src)
}
func (m *ListWalletAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletAssetResponse proto.InternalMessageInfo

func (m *ListWalletAssetResponse) GetItems() []*shared_gogo.WalletAsset {
	if m != nil {
		return m.Items
	}
	return nil
}

type ListWalletDetailRequest struct {
	Wid int64 `protobuf:"varint,1,opt,name=Wid,proto3" json:"wid"`
	Cid int64 `protobuf:"varint,2,opt,name=Cid,proto3" json:"cid"`
}

func (m *ListWalletDetailRequest) Reset()         { *m = ListWalletDetailRequest{} }
func (m *ListWalletDetailRequest) String() string { return proto.CompactTextString(m) }
func (*ListWalletDetailRequest) ProtoMessage()    {}
func (*ListWalletDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{89}
}
func (m *ListWalletDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletDetailRequest.Merge(m, src)
}
func (m *ListWalletDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletDetailRequest proto.InternalMessageInfo

func (m *ListWalletDetailRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListWalletDetailRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type ListWalletDetailResponse struct {
	Items []*shared_gogo.WalletDetail `protobuf:"bytes,1,rep,name=Items,proto3" json:"wallet_detail"`
}

func (m *ListWalletDetailResponse) Reset()         { *m = ListWalletDetailResponse{} }
func (m *ListWalletDetailResponse) String() string { return proto.CompactTextString(m) }
func (*ListWalletDetailResponse) ProtoMessage()    {}
func (*ListWalletDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{90}
}
func (m *ListWalletDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletDetailResponse.Merge(m, src)
}
func (m *ListWalletDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletDetailResponse proto.InternalMessageInfo

func (m *ListWalletDetailResponse) GetItems() []*shared_gogo.WalletDetail {
	if m != nil {
		return m.Items
	}
	return nil
}

type ListWalletCoinDetailRequest struct {
	//钱包id
	Wid int64 `protobuf:"varint,1,opt,name=Wid,proto3" json:"wid"`
	//coin id
	Cid int64 `protobuf:"varint,2,opt,name=Cid,proto3" json:"cid"`
	//第几页
	Page int32 `protobuf:"varint,10,opt,name=Page,proto3" json:"page"`
	//每页条数
	PageSize int32 `protobuf:"varint,11,opt,name=PageSize,proto3" json:"page_size"`
}

func (m *ListWalletCoinDetailRequest) Reset()         { *m = ListWalletCoinDetailRequest{} }
func (m *ListWalletCoinDetailRequest) String() string { return proto.CompactTextString(m) }
func (*ListWalletCoinDetailRequest) ProtoMessage()    {}
func (*ListWalletCoinDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{91}
}
func (m *ListWalletCoinDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletCoinDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletCoinDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletCoinDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletCoinDetailRequest.Merge(m, src)
}
func (m *ListWalletCoinDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletCoinDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletCoinDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletCoinDetailRequest proto.InternalMessageInfo

func (m *ListWalletCoinDetailRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListWalletCoinDetailRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ListWalletCoinDetailRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListWalletCoinDetailRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListWalletCoinDetailResponse struct {
	//coin详情
	Items []*shared_gogo.WalletCoinDetail `protobuf:"bytes,1,rep,name=Items,proto3" json:"coin_detail"`
	//总数
	TotalNum int32 `protobuf:"varint,2,opt,name=TotalNum,proto3" json:"total_num"`
	//第几页
	Page int32 `protobuf:"varint,3,opt,name=Page,proto3" json:"page"`
}

func (m *ListWalletCoinDetailResponse) Reset()         { *m = ListWalletCoinDetailResponse{} }
func (m *ListWalletCoinDetailResponse) String() string { return proto.CompactTextString(m) }
func (*ListWalletCoinDetailResponse) ProtoMessage()    {}
func (*ListWalletCoinDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{92}
}
func (m *ListWalletCoinDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletCoinDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletCoinDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletCoinDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletCoinDetailResponse.Merge(m, src)
}
func (m *ListWalletCoinDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletCoinDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletCoinDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletCoinDetailResponse proto.InternalMessageInfo

func (m *ListWalletCoinDetailResponse) GetItems() []*shared_gogo.WalletCoinDetail {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListWalletCoinDetailResponse) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *ListWalletCoinDetailResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type AddWithdrawSettingRequest struct {
	//钱包id
	Wid int64 `protobuf:"varint,1,opt,name=Wid,proto3" json:"wid" validate:"required"`
	//审核所有交易
	ApproveAll bool `protobuf:"varint,2,opt,name=ApproveAll,proto3" json:"approved_all"`
	//提现确认回调url
	WithdrawCallbackUrl string `protobuf:"bytes,3,opt,name=WithdrawCallbackUrl,proto3" json:"withdraw_callback_url"`
	//交易回调url
	TransferCallbackUrl string `protobuf:"bytes,4,opt,name=TransferCallbackUrl,proto3" json:"transfer_callback_url"`
	//每增加一个确认数交易是否需要回调
	IsContainConfirmNum bool `protobuf:"varint,5,opt,name=IsContainConfirmNum,proto3" json:"is_contain_confirm_num"`
}

func (m *AddWithdrawSettingRequest) Reset()         { *m = AddWithdrawSettingRequest{} }
func (m *AddWithdrawSettingRequest) String() string { return proto.CompactTextString(m) }
func (*AddWithdrawSettingRequest) ProtoMessage()    {}
func (*AddWithdrawSettingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{93}
}
func (m *AddWithdrawSettingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWithdrawSettingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWithdrawSettingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWithdrawSettingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWithdrawSettingRequest.Merge(m, src)
}
func (m *AddWithdrawSettingRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddWithdrawSettingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWithdrawSettingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWithdrawSettingRequest proto.InternalMessageInfo

func (m *AddWithdrawSettingRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *AddWithdrawSettingRequest) GetApproveAll() bool {
	if m != nil {
		return m.ApproveAll
	}
	return false
}

func (m *AddWithdrawSettingRequest) GetWithdrawCallbackUrl() string {
	if m != nil {
		return m.WithdrawCallbackUrl
	}
	return ""
}

func (m *AddWithdrawSettingRequest) GetTransferCallbackUrl() string {
	if m != nil {
		return m.TransferCallbackUrl
	}
	return ""
}

func (m *AddWithdrawSettingRequest) GetIsContainConfirmNum() bool {
	if m != nil {
		return m.IsContainConfirmNum
	}
	return false
}

type AddWithdrawSettingResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"id"`
}

func (m *AddWithdrawSettingResponse) Reset()         { *m = AddWithdrawSettingResponse{} }
func (m *AddWithdrawSettingResponse) String() string { return proto.CompactTextString(m) }
func (*AddWithdrawSettingResponse) ProtoMessage()    {}
func (*AddWithdrawSettingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{94}
}
func (m *AddWithdrawSettingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWithdrawSettingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWithdrawSettingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWithdrawSettingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWithdrawSettingResponse.Merge(m, src)
}
func (m *AddWithdrawSettingResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddWithdrawSettingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWithdrawSettingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddWithdrawSettingResponse proto.InternalMessageInfo

func (m *AddWithdrawSettingResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateWithdrawSettingRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"id" validate:"required"`
	//审核所有交易
	ApproveAll bool `protobuf:"varint,3,opt,name=ApproveAll,proto3" json:"approved_all"`
	//提现确认回调url
	WithdrawCallbackUrl string `protobuf:"bytes,4,opt,name=WithdrawCallbackUrl,proto3" json:"withdraw_callback_url"`
	//交易回调url
	TransferCallbackUrl string `protobuf:"bytes,5,opt,name=TransferCallbackUrl,proto3" json:"transfer_callback_url"`
	//每增加一个确认数交易是否需要回调
	IsContainConfirmNum bool `protobuf:"varint,6,opt,name=IsContainConfirmNum,proto3" json:"is_contain_confirm_num"`
}

func (m *UpdateWithdrawSettingRequest) Reset()         { *m = UpdateWithdrawSettingRequest{} }
func (m *UpdateWithdrawSettingRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateWithdrawSettingRequest) ProtoMessage()    {}
func (*UpdateWithdrawSettingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{95}
}
func (m *UpdateWithdrawSettingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWithdrawSettingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWithdrawSettingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWithdrawSettingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWithdrawSettingRequest.Merge(m, src)
}
func (m *UpdateWithdrawSettingRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWithdrawSettingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWithdrawSettingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWithdrawSettingRequest proto.InternalMessageInfo

func (m *UpdateWithdrawSettingRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateWithdrawSettingRequest) GetApproveAll() bool {
	if m != nil {
		return m.ApproveAll
	}
	return false
}

func (m *UpdateWithdrawSettingRequest) GetWithdrawCallbackUrl() string {
	if m != nil {
		return m.WithdrawCallbackUrl
	}
	return ""
}

func (m *UpdateWithdrawSettingRequest) GetTransferCallbackUrl() string {
	if m != nil {
		return m.TransferCallbackUrl
	}
	return ""
}

func (m *UpdateWithdrawSettingRequest) GetIsContainConfirmNum() bool {
	if m != nil {
		return m.IsContainConfirmNum
	}
	return false
}

type UpdateWithdrawSettingResponse struct {
}

func (m *UpdateWithdrawSettingResponse) Reset()         { *m = UpdateWithdrawSettingResponse{} }
func (m *UpdateWithdrawSettingResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateWithdrawSettingResponse) ProtoMessage()    {}
func (*UpdateWithdrawSettingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{96}
}
func (m *UpdateWithdrawSettingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWithdrawSettingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWithdrawSettingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWithdrawSettingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWithdrawSettingResponse.Merge(m, src)
}
func (m *UpdateWithdrawSettingResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWithdrawSettingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWithdrawSettingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWithdrawSettingResponse proto.InternalMessageInfo

type RemoveWithdrawSettingRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"id" validate:"required"`
}

func (m *RemoveWithdrawSettingRequest) Reset()         { *m = RemoveWithdrawSettingRequest{} }
func (m *RemoveWithdrawSettingRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveWithdrawSettingRequest) ProtoMessage()    {}
func (*RemoveWithdrawSettingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{97}
}
func (m *RemoveWithdrawSettingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWithdrawSettingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWithdrawSettingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWithdrawSettingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWithdrawSettingRequest.Merge(m, src)
}
func (m *RemoveWithdrawSettingRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWithdrawSettingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWithdrawSettingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWithdrawSettingRequest proto.InternalMessageInfo

func (m *RemoveWithdrawSettingRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveWithdrawSettingResponse struct {
}

func (m *RemoveWithdrawSettingResponse) Reset()         { *m = RemoveWithdrawSettingResponse{} }
func (m *RemoveWithdrawSettingResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveWithdrawSettingResponse) ProtoMessage()    {}
func (*RemoveWithdrawSettingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{98}
}
func (m *RemoveWithdrawSettingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWithdrawSettingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWithdrawSettingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWithdrawSettingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWithdrawSettingResponse.Merge(m, src)
}
func (m *RemoveWithdrawSettingResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWithdrawSettingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWithdrawSettingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWithdrawSettingResponse proto.InternalMessageInfo

type GetWithdrawSettingRequest struct {
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"wid" validate:"required"`
}

func (m *GetWithdrawSettingRequest) Reset()         { *m = GetWithdrawSettingRequest{} }
func (m *GetWithdrawSettingRequest) String() string { return proto.CompactTextString(m) }
func (*GetWithdrawSettingRequest) ProtoMessage()    {}
func (*GetWithdrawSettingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{99}
}
func (m *GetWithdrawSettingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWithdrawSettingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWithdrawSettingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWithdrawSettingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWithdrawSettingRequest.Merge(m, src)
}
func (m *GetWithdrawSettingRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWithdrawSettingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWithdrawSettingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWithdrawSettingRequest proto.InternalMessageInfo

func (m *GetWithdrawSettingRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

type GetWithdrawSettingResponse struct {
	Item *shared_gogo.WithdrawSetting `protobuf:"bytes,1,opt,name=Item,proto3" json:"item"`
}

func (m *GetWithdrawSettingResponse) Reset()         { *m = GetWithdrawSettingResponse{} }
func (m *GetWithdrawSettingResponse) String() string { return proto.CompactTextString(m) }
func (*GetWithdrawSettingResponse) ProtoMessage()    {}
func (*GetWithdrawSettingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{100}
}
func (m *GetWithdrawSettingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWithdrawSettingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWithdrawSettingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWithdrawSettingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWithdrawSettingResponse.Merge(m, src)
}
func (m *GetWithdrawSettingResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWithdrawSettingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWithdrawSettingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWithdrawSettingResponse proto.InternalMessageInfo

func (m *GetWithdrawSettingResponse) GetItem() *shared_gogo.WithdrawSetting {
	if m != nil {
		return m.Item
	}
	return nil
}

type AddWithdrawQuotaRequest struct {
	Wid int64 `protobuf:"varint,1,opt,name=Wid,proto3" json:"wid" validate:"required"`
	Cid int64 `protobuf:"varint,2,opt,name=Cid,proto3" json:"cid" validate:"required"`
	//每笔限额
	QuotaPerTx float64 `protobuf:"fixed64,3,opt,name=QuotaPerTx,proto3" json:"quota_per_tx"`
	//每小时限额
	QuotaPerHour float64 `protobuf:"fixed64,4,opt,name=QuotaPerHour,proto3" json:"quota_per_hour"`
	//每天限额
	QuotaPerDay float64 `protobuf:"fixed64,5,opt,name=QuotaPerDay,proto3" json:"quota_per_day"`
	//需要审核的人数
	ApprovedPerson int32 `protobuf:"varint,6,opt,name=ApprovedPerson,proto3" json:"approved_person"`
}

func (m *AddWithdrawQuotaRequest) Reset()         { *m = AddWithdrawQuotaRequest{} }
func (m *AddWithdrawQuotaRequest) String() string { return proto.CompactTextString(m) }
func (*AddWithdrawQuotaRequest) ProtoMessage()    {}
func (*AddWithdrawQuotaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{101}
}
func (m *AddWithdrawQuotaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWithdrawQuotaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWithdrawQuotaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWithdrawQuotaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWithdrawQuotaRequest.Merge(m, src)
}
func (m *AddWithdrawQuotaRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddWithdrawQuotaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWithdrawQuotaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWithdrawQuotaRequest proto.InternalMessageInfo

func (m *AddWithdrawQuotaRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *AddWithdrawQuotaRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *AddWithdrawQuotaRequest) GetQuotaPerTx() float64 {
	if m != nil {
		return m.QuotaPerTx
	}
	return 0
}

func (m *AddWithdrawQuotaRequest) GetQuotaPerHour() float64 {
	if m != nil {
		return m.QuotaPerHour
	}
	return 0
}

func (m *AddWithdrawQuotaRequest) GetQuotaPerDay() float64 {
	if m != nil {
		return m.QuotaPerDay
	}
	return 0
}

func (m *AddWithdrawQuotaRequest) GetApprovedPerson() int32 {
	if m != nil {
		return m.ApprovedPerson
	}
	return 0
}

type AddWithdrawQuotaResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"id"`
}

func (m *AddWithdrawQuotaResponse) Reset()         { *m = AddWithdrawQuotaResponse{} }
func (m *AddWithdrawQuotaResponse) String() string { return proto.CompactTextString(m) }
func (*AddWithdrawQuotaResponse) ProtoMessage()    {}
func (*AddWithdrawQuotaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{102}
}
func (m *AddWithdrawQuotaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWithdrawQuotaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWithdrawQuotaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWithdrawQuotaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWithdrawQuotaResponse.Merge(m, src)
}
func (m *AddWithdrawQuotaResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddWithdrawQuotaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWithdrawQuotaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddWithdrawQuotaResponse proto.InternalMessageInfo

func (m *AddWithdrawQuotaResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveWithdrawQuotaRequest struct {
	Id  int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"id" validate:"required"`
	Wid int64 `protobuf:"varint,3,opt,name=Wid,proto3" json:"wid" validate:"required"`
	Cid int64 `protobuf:"varint,4,opt,name=Cid,proto3" json:"cid" validate:"required"`
}

func (m *RemoveWithdrawQuotaRequest) Reset()         { *m = RemoveWithdrawQuotaRequest{} }
func (m *RemoveWithdrawQuotaRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveWithdrawQuotaRequest) ProtoMessage()    {}
func (*RemoveWithdrawQuotaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{103}
}
func (m *RemoveWithdrawQuotaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWithdrawQuotaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWithdrawQuotaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWithdrawQuotaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWithdrawQuotaRequest.Merge(m, src)
}
func (m *RemoveWithdrawQuotaRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWithdrawQuotaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWithdrawQuotaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWithdrawQuotaRequest proto.InternalMessageInfo

func (m *RemoveWithdrawQuotaRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RemoveWithdrawQuotaRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *RemoveWithdrawQuotaRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type RemoveWithdrawQuotaResponse struct {
}

func (m *RemoveWithdrawQuotaResponse) Reset()         { *m = RemoveWithdrawQuotaResponse{} }
func (m *RemoveWithdrawQuotaResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveWithdrawQuotaResponse) ProtoMessage()    {}
func (*RemoveWithdrawQuotaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{104}
}
func (m *RemoveWithdrawQuotaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWithdrawQuotaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWithdrawQuotaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWithdrawQuotaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWithdrawQuotaResponse.Merge(m, src)
}
func (m *RemoveWithdrawQuotaResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWithdrawQuotaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWithdrawQuotaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWithdrawQuotaResponse proto.InternalMessageInfo

type ListWithdrawQuotaRequest struct {
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"wid" validate:"required"`
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"cid" validate:"required"`
}

func (m *ListWithdrawQuotaRequest) Reset()         { *m = ListWithdrawQuotaRequest{} }
func (m *ListWithdrawQuotaRequest) String() string { return proto.CompactTextString(m) }
func (*ListWithdrawQuotaRequest) ProtoMessage()    {}
func (*ListWithdrawQuotaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{105}
}
func (m *ListWithdrawQuotaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWithdrawQuotaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWithdrawQuotaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWithdrawQuotaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWithdrawQuotaRequest.Merge(m, src)
}
func (m *ListWithdrawQuotaRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWithdrawQuotaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWithdrawQuotaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWithdrawQuotaRequest proto.InternalMessageInfo

func (m *ListWithdrawQuotaRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListWithdrawQuotaRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type ListWithdrawQuotaResponse struct {
	Items []*shared_gogo.CoinWithdrawQuota `protobuf:"bytes,1,rep,name=Items,proto3" json:"items"`
}

func (m *ListWithdrawQuotaResponse) Reset()         { *m = ListWithdrawQuotaResponse{} }
func (m *ListWithdrawQuotaResponse) String() string { return proto.CompactTextString(m) }
func (*ListWithdrawQuotaResponse) ProtoMessage()    {}
func (*ListWithdrawQuotaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{106}
}
func (m *ListWithdrawQuotaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWithdrawQuotaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWithdrawQuotaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWithdrawQuotaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWithdrawQuotaResponse.Merge(m, src)
}
func (m *ListWithdrawQuotaResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWithdrawQuotaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWithdrawQuotaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWithdrawQuotaResponse proto.InternalMessageInfo

func (m *ListWithdrawQuotaResponse) GetItems() []*shared_gogo.CoinWithdrawQuota {
	if m != nil {
		return m.Items
	}
	return nil
}

type AddWithdrawWhitelistRequest struct {
	Wid     int64                 `protobuf:"varint,1,opt,name=Wid,proto3" json:"wid" validate:"required"`
	Cid     int64                 `protobuf:"varint,2,opt,name=Cid,proto3" json:"cid" validate:"required"`
	Address string                `protobuf:"bytes,3,opt,name=Address,proto3" json:"address" validate:"required"`
	Memo    string                `protobuf:"bytes,4,opt,name=Memo,proto3" json:"memo"`
	State   shared_gogo.StateType `protobuf:"varint,5,opt,name=State,proto3,enum=shared.api.StateType" json:"state"`
}

func (m *AddWithdrawWhitelistRequest) Reset()         { *m = AddWithdrawWhitelistRequest{} }
func (m *AddWithdrawWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*AddWithdrawWhitelistRequest) ProtoMessage()    {}
func (*AddWithdrawWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{107}
}
func (m *AddWithdrawWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWithdrawWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWithdrawWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWithdrawWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWithdrawWhitelistRequest.Merge(m, src)
}
func (m *AddWithdrawWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddWithdrawWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWithdrawWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWithdrawWhitelistRequest proto.InternalMessageInfo

func (m *AddWithdrawWhitelistRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *AddWithdrawWhitelistRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *AddWithdrawWhitelistRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddWithdrawWhitelistRequest) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *AddWithdrawWhitelistRequest) GetState() shared_gogo.StateType {
	if m != nil {
		return m.State
	}
	return shared_gogo.StateType_State_Unknown
}

type AddWithdrawWhitelistResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"id"`
}

func (m *AddWithdrawWhitelistResponse) Reset()         { *m = AddWithdrawWhitelistResponse{} }
func (m *AddWithdrawWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*AddWithdrawWhitelistResponse) ProtoMessage()    {}
func (*AddWithdrawWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{108}
}
func (m *AddWithdrawWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWithdrawWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWithdrawWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWithdrawWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWithdrawWhitelistResponse.Merge(m, src)
}
func (m *AddWithdrawWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddWithdrawWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWithdrawWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddWithdrawWhitelistResponse proto.InternalMessageInfo

func (m *AddWithdrawWhitelistResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveWithdrawWhitelistRequest struct {
	Id  int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"id" validate:"required"`
	Wid int64 `protobuf:"varint,3,opt,name=Wid,proto3" json:"wid" validate:"required"`
	Cid int64 `protobuf:"varint,4,opt,name=Cid,proto3" json:"cid" validate:"required"`
}

func (m *RemoveWithdrawWhitelistRequest) Reset()         { *m = RemoveWithdrawWhitelistRequest{} }
func (m *RemoveWithdrawWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveWithdrawWhitelistRequest) ProtoMessage()    {}
func (*RemoveWithdrawWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{109}
}
func (m *RemoveWithdrawWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWithdrawWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWithdrawWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWithdrawWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWithdrawWhitelistRequest.Merge(m, src)
}
func (m *RemoveWithdrawWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWithdrawWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWithdrawWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWithdrawWhitelistRequest proto.InternalMessageInfo

func (m *RemoveWithdrawWhitelistRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RemoveWithdrawWhitelistRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *RemoveWithdrawWhitelistRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type RemoveWithdrawWhitelistResponse struct {
}

func (m *RemoveWithdrawWhitelistResponse) Reset()         { *m = RemoveWithdrawWhitelistResponse{} }
func (m *RemoveWithdrawWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveWithdrawWhitelistResponse) ProtoMessage()    {}
func (*RemoveWithdrawWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{110}
}
func (m *RemoveWithdrawWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWithdrawWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWithdrawWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWithdrawWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWithdrawWhitelistResponse.Merge(m, src)
}
func (m *RemoveWithdrawWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWithdrawWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWithdrawWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWithdrawWhitelistResponse proto.InternalMessageInfo

type ListWithdrawWhitelistRequest struct {
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"wid" validate:"required"`
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"cid"`
}

func (m *ListWithdrawWhitelistRequest) Reset()         { *m = ListWithdrawWhitelistRequest{} }
func (m *ListWithdrawWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*ListWithdrawWhitelistRequest) ProtoMessage()    {}
func (*ListWithdrawWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{111}
}
func (m *ListWithdrawWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWithdrawWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWithdrawWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWithdrawWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWithdrawWhitelistRequest.Merge(m, src)
}
func (m *ListWithdrawWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWithdrawWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWithdrawWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWithdrawWhitelistRequest proto.InternalMessageInfo

func (m *ListWithdrawWhitelistRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListWithdrawWhitelistRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type ListWithdrawWhitelistResponse struct {
	Items []*shared_gogo.CoinWithdrawWhitelist `protobuf:"bytes,1,rep,name=Items,proto3" json:"items"`
}

func (m *ListWithdrawWhitelistResponse) Reset()         { *m = ListWithdrawWhitelistResponse{} }
func (m *ListWithdrawWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*ListWithdrawWhitelistResponse) ProtoMessage()    {}
func (*ListWithdrawWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{112}
}
func (m *ListWithdrawWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWithdrawWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWithdrawWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWithdrawWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWithdrawWhitelistResponse.Merge(m, src)
}
func (m *ListWithdrawWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWithdrawWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWithdrawWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWithdrawWhitelistResponse proto.InternalMessageInfo

func (m *ListWithdrawWhitelistResponse) GetItems() []*shared_gogo.CoinWithdrawWhitelist {
	if m != nil {
		return m.Items
	}
	return nil
}

type UpdateWithdrawPolicyRequest struct {
	//新增的策略参数
	AddItem *shared_gogo.WithdrawPolicy `protobuf:"bytes,1,opt,name=AddItem,proto3" json:"add_item"`
	//删除的策略参数
	DelItem *shared_gogo.WithdrawPolicy `protobuf:"bytes,2,opt,name=DelItem,proto3" json:"del_item"`
	//更新的策略参数
	UpdateItem *shared_gogo.WithdrawPolicy `protobuf:"bytes,3,opt,name=UpdateItem,proto3" json:"update_item"`
}

func (m *UpdateWithdrawPolicyRequest) Reset()         { *m = UpdateWithdrawPolicyRequest{} }
func (m *UpdateWithdrawPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateWithdrawPolicyRequest) ProtoMessage()    {}
func (*UpdateWithdrawPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{113}
}
func (m *UpdateWithdrawPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWithdrawPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWithdrawPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWithdrawPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWithdrawPolicyRequest.Merge(m, src)
}
func (m *UpdateWithdrawPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWithdrawPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWithdrawPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWithdrawPolicyRequest proto.InternalMessageInfo

func (m *UpdateWithdrawPolicyRequest) GetAddItem() *shared_gogo.WithdrawPolicy {
	if m != nil {
		return m.AddItem
	}
	return nil
}

func (m *UpdateWithdrawPolicyRequest) GetDelItem() *shared_gogo.WithdrawPolicy {
	if m != nil {
		return m.DelItem
	}
	return nil
}

func (m *UpdateWithdrawPolicyRequest) GetUpdateItem() *shared_gogo.WithdrawPolicy {
	if m != nil {
		return m.UpdateItem
	}
	return nil
}

type UpdateWithdrawPolicyResponse struct {
}

func (m *UpdateWithdrawPolicyResponse) Reset()         { *m = UpdateWithdrawPolicyResponse{} }
func (m *UpdateWithdrawPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateWithdrawPolicyResponse) ProtoMessage()    {}
func (*UpdateWithdrawPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{114}
}
func (m *UpdateWithdrawPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWithdrawPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWithdrawPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWithdrawPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWithdrawPolicyResponse.Merge(m, src)
}
func (m *UpdateWithdrawPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWithdrawPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWithdrawPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWithdrawPolicyResponse proto.InternalMessageInfo

type ListWithdrawPolicyRequest struct {
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"wid" validate:"required"`
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"cid"`
}

func (m *ListWithdrawPolicyRequest) Reset()         { *m = ListWithdrawPolicyRequest{} }
func (m *ListWithdrawPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*ListWithdrawPolicyRequest) ProtoMessage()    {}
func (*ListWithdrawPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{115}
}
func (m *ListWithdrawPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWithdrawPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWithdrawPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWithdrawPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWithdrawPolicyRequest.Merge(m, src)
}
func (m *ListWithdrawPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWithdrawPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWithdrawPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWithdrawPolicyRequest proto.InternalMessageInfo

func (m *ListWithdrawPolicyRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListWithdrawPolicyRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type ListWithdrawPolicyResponse struct {
	Item *shared_gogo.WithdrawPolicy `protobuf:"bytes,1,opt,name=Item,proto3" json:"item"`
}

func (m *ListWithdrawPolicyResponse) Reset()         { *m = ListWithdrawPolicyResponse{} }
func (m *ListWithdrawPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*ListWithdrawPolicyResponse) ProtoMessage()    {}
func (*ListWithdrawPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{116}
}
func (m *ListWithdrawPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWithdrawPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWithdrawPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWithdrawPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWithdrawPolicyResponse.Merge(m, src)
}
func (m *ListWithdrawPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWithdrawPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWithdrawPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWithdrawPolicyResponse proto.InternalMessageInfo

func (m *ListWithdrawPolicyResponse) GetItem() *shared_gogo.WithdrawPolicy {
	if m != nil {
		return m.Item
	}
	return nil
}

type AddMessageRequest struct {
	Item *shared_gogo.Message `protobuf:"bytes,1,opt,name=Item,proto3" json:"item"`
}

func (m *AddMessageRequest) Reset()         { *m = AddMessageRequest{} }
func (m *AddMessageRequest) String() string { return proto.CompactTextString(m) }
func (*AddMessageRequest) ProtoMessage()    {}
func (*AddMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{117}
}
func (m *AddMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMessageRequest.Merge(m, src)
}
func (m *AddMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddMessageRequest proto.InternalMessageInfo

func (m *AddMessageRequest) GetItem() *shared_gogo.Message {
	if m != nil {
		return m.Item
	}
	return nil
}

type AddMessageResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"id"`
}

func (m *AddMessageResponse) Reset()         { *m = AddMessageResponse{} }
func (m *AddMessageResponse) String() string { return proto.CompactTextString(m) }
func (*AddMessageResponse) ProtoMessage()    {}
func (*AddMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{118}
}
func (m *AddMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMessageResponse.Merge(m, src)
}
func (m *AddMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddMessageResponse proto.InternalMessageInfo

func (m *AddMessageResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateMessageRequest struct {
	Item *shared_gogo.Message `protobuf:"bytes,1,opt,name=Item,proto3" json:"item"`
}

func (m *UpdateMessageRequest) Reset()         { *m = UpdateMessageRequest{} }
func (m *UpdateMessageRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMessageRequest) ProtoMessage()    {}
func (*UpdateMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{119}
}
func (m *UpdateMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageRequest.Merge(m, src)
}
func (m *UpdateMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageRequest proto.InternalMessageInfo

func (m *UpdateMessageRequest) GetItem() *shared_gogo.Message {
	if m != nil {
		return m.Item
	}
	return nil
}

type UpdateMessageResponse struct {
}

func (m *UpdateMessageResponse) Reset()         { *m = UpdateMessageResponse{} }
func (m *UpdateMessageResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateMessageResponse) ProtoMessage()    {}
func (*UpdateMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{120}
}
func (m *UpdateMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageResponse.Merge(m, src)
}
func (m *UpdateMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageResponse proto.InternalMessageInfo

type ListMessageRequest struct {
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"wid" validate:"required"`
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"cid"`
	//分页
	Page int32 `protobuf:"varint,10,opt,name=Page,proto3" json:"page"`
	//每页记录数
	PageSize int32 `protobuf:"varint,11,opt,name=PageSize,proto3" json:"page_size"`
}

func (m *ListMessageRequest) Reset()         { *m = ListMessageRequest{} }
func (m *ListMessageRequest) String() string { return proto.CompactTextString(m) }
func (*ListMessageRequest) ProtoMessage()    {}
func (*ListMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{121}
}
func (m *ListMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMessageRequest.Merge(m, src)
}
func (m *ListMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMessageRequest proto.InternalMessageInfo

func (m *ListMessageRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListMessageRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ListMessageRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListMessageRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListMessageResponse struct {
	Items []*shared_gogo.Message `protobuf:"bytes,1,rep,name=Items,proto3" json:"items"`
	//总记录数
	TotalNum int32 `protobuf:"varint,10,opt,name=TotalNum,proto3" json:"total_num"`
	//分页
	Page int32 `protobuf:"varint,11,opt,name=Page,proto3" json:"page"`
}

func (m *ListMessageResponse) Reset()         { *m = ListMessageResponse{} }
func (m *ListMessageResponse) String() string { return proto.CompactTextString(m) }
func (*ListMessageResponse) ProtoMessage()    {}
func (*ListMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_978ed835f4b29441, []int{122}
}
func (m *ListMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMessageResponse.Merge(m, src)
}
func (m *ListMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMessageResponse proto.InternalMessageInfo

func (m *ListMessageResponse) GetItems() []*shared_gogo.Message {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListMessageResponse) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *ListMessageResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "assite.api.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "assite.api.RegisterResponse")
	proto.RegisterType((*LoginRequest)(nil), "assite.api.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "assite.api.LoginResponse")
	proto.RegisterType((*LogoutRequest)(nil), "assite.api.LogoutRequest")
	proto.RegisterType((*LogoutResponse)(nil), "assite.api.LogoutResponse")
	proto.RegisterType((*ForgetPassRequest)(nil), "assite.api.ForgetPassRequest")
	proto.RegisterType((*ForgetPassResponse)(nil), "assite.api.ForgetPassResponse")
	proto.RegisterType((*UserActiveRequest)(nil), "assite.api.UserActiveRequest")
	proto.RegisterType((*ListCountryCodeRequest)(nil), "assite.api.ListCountryCodeRequest")
	proto.RegisterType((*ReSendActivationCodeRequest)(nil), "assite.api.ReSendActivationCodeRequest")
	proto.RegisterType((*ReSendActivationCodeResponse)(nil), "assite.api.ReSendActivationCodeResponse")
	proto.RegisterType((*ListCountryCodeResponse)(nil), "assite.api.ListCountryCodeResponse")
	proto.RegisterType((*UserActiveResponse)(nil), "assite.api.UserActiveResponse")
	proto.RegisterType((*UserInviteRequest)(nil), "assite.api.UserInviteRequest")
	proto.RegisterType((*UserInviteResponse)(nil), "assite.api.UserInviteResponse")
	proto.RegisterType((*ApplyResetOtherPassRequest)(nil), "assite.api.ApplyResetOtherPassRequest")
	proto.RegisterType((*ApplyResetOtherPassResponse)(nil), "assite.api.ApplyResetOtherPassResponse")
	proto.RegisterType((*ApplyResetOther2FARequest)(nil), "assite.api.ApplyResetOther2FARequest")
	proto.RegisterType((*ApplyResetOther2FAResponse)(nil), "assite.api.ApplyResetOther2FAResponse")
	proto.RegisterType((*ResetMePassRequest)(nil), "assite.api.ResetMePassRequest")
	proto.RegisterType((*ResetMePassResponse)(nil), "assite.api.ResetMePassResponse")
	proto.RegisterType((*ResetMe2FARequest)(nil), "assite.api.ResetMe2FARequest")
	proto.RegisterType((*ResetMe2FAResponse)(nil), "assite.api.ResetMe2FAResponse")
	proto.RegisterType((*GetMeRequest)(nil), "assite.api.GetMeRequest")
	proto.RegisterType((*GetMeResponse)(nil), "assite.api.GetMeResponse")
	proto.RegisterType((*UpdateMeRequest)(nil), "assite.api.UpdateMeRequest")
	proto.RegisterType((*UpdateMeResponse)(nil), "assite.api.UpdateMeResponse")
	proto.RegisterType((*VerifyMePassRequest)(nil), "assite.api.VerifyMePassRequest")
	proto.RegisterType((*VerifyMePassResponse)(nil), "assite.api.VerifyMePassResponse")
	proto.RegisterType((*ListUserRequest)(nil), "assite.api.ListUserRequest")
	proto.RegisterType((*ListUserResponse)(nil), "assite.api.ListUserResponse")
	proto.RegisterType((*ListRoleAndPermissionRequest)(nil), "assite.api.ListRoleAndPermissionRequest")
	proto.RegisterType((*ListRoleAndPermissionResponse)(nil), "assite.api.ListRoleAndPermissionResponse")
	proto.RegisterType((*UpdateOtherUserGenericInfoRequest)(nil), "assite.api.UpdateOtherUserGenericInfoRequest")
	proto.RegisterType((*UpdateOtherUserGenericInfoResponse)(nil), "assite.api.UpdateOtherUserGenericInfoResponse")
	proto.RegisterType((*UpdateOtherUserImportantInfoRequest)(nil), "assite.api.UpdateOtherUserImportantInfoRequest")
	proto.RegisterType((*UpdateOtherUserImportantInfoResponse)(nil), "assite.api.UpdateOtherUserImportantInfoResponse")
	proto.RegisterType((*AddApiKeyRequest)(nil), "assite.api.AddApiKeyRequest")
	proto.RegisterType((*AddApiKeyResponse)(nil), "assite.api.AddApiKeyResponse")
	proto.RegisterType((*ListApiKeyRequest)(nil), "assite.api.ListApiKeyRequest")
	proto.RegisterType((*ListApiKeyResponse)(nil), "assite.api.ListApiKeyResponse")
	proto.RegisterType((*UpdateApiKeyRequest)(nil), "assite.api.UpdateApiKeyRequest")
	proto.RegisterType((*UpdateApiKeyResponse)(nil), "assite.api.UpdateApiKeyResponse")
	proto.RegisterType((*DeleteApiKeyRequest)(nil), "assite.api.DeleteApiKeyRequest")
	proto.RegisterType((*DeleteApiKeyResponse)(nil), "assite.api.DeleteApiKeyResponse")
	proto.RegisterType((*AddWalletRequest)(nil), "assite.api.AddWalletRequest")
	proto.RegisterType((*AddWalletResponse)(nil), "assite.api.AddWalletResponse")
	proto.RegisterType((*UpdateWalletRequest)(nil), "assite.api.UpdateWalletRequest")
	proto.RegisterType((*UpdateWalletResponse)(nil), "assite.api.UpdateWalletResponse")
	proto.RegisterType((*RemoveWalletRequest)(nil), "assite.api.RemoveWalletRequest")
	proto.RegisterType((*RemoveWalletResponse)(nil), "assite.api.RemoveWalletResponse")
	proto.RegisterType((*ListWalletRequest)(nil), "assite.api.ListWalletRequest")
	proto.RegisterType((*ListWalletResponse)(nil), "assite.api.ListWalletResponse")
	proto.RegisterType((*ListCoinInfoRequest)(nil), "assite.api.ListCoinInfoRequest")
	proto.RegisterType((*ListCoinInfoResponse)(nil), "assite.api.ListCoinInfoResponse")
	proto.RegisterType((*AddWalletCoinRequest)(nil), "assite.api.AddWalletCoinRequest")
	proto.RegisterType((*AddWalletCoinResponse)(nil), "assite.api.AddWalletCoinResponse")
	proto.RegisterType((*RemoveWalletCoinRequest)(nil), "assite.api.RemoveWalletCoinRequest")
	proto.RegisterType((*RemoveWalletCoinResponse)(nil), "assite.api.RemoveWalletCoinResponse")
	proto.RegisterType((*ListWalletCoinRequest)(nil), "assite.api.ListWalletCoinRequest")
	proto.RegisterType((*ListWalletCoinResponse)(nil), "assite.api.ListWalletCoinResponse")
	proto.RegisterType((*ListAddressRequest)(nil), "assite.api.ListAddressRequest")
	proto.RegisterType((*SimpleAddressInfo)(nil), "assite.api.SimpleAddressInfo")
	proto.RegisterType((*ListAddressResponse)(nil), "assite.api.ListAddressResponse")
	proto.RegisterType((*GetNewAddressRequest)(nil), "assite.api.GetNewAddressRequest")
	proto.RegisterType((*GetNewAddressResponse)(nil), "assite.api.GetNewAddressResponse")
	proto.RegisterType((*HideAddressRequest)(nil), "assite.api.HideAddressRequest")
	proto.RegisterType((*HideAddressResponse)(nil), "assite.api.HideAddressResponse")
	proto.RegisterType((*HasAddressRequest)(nil), "assite.api.HasAddressRequest")
	proto.RegisterType((*HasAddressResponse)(nil), "assite.api.HasAddressResponse")
	proto.RegisterType((*CheckAddressRequest)(nil), "assite.api.CheckAddressRequest")
	proto.RegisterType((*CheckAddressResponse)(nil), "assite.api.CheckAddressResponse")
	proto.RegisterType((*GetCoinFeeRequest)(nil), "assite.api.GetCoinFeeRequest")
	proto.RegisterType((*GetCoinFeeResponse)(nil), "assite.api.GetCoinFeeResponse")
	proto.RegisterType((*ListCoinTxRequest)(nil), "assite.api.ListCoinTxRequest")
	proto.RegisterType((*ListCoinTxResponse)(nil), "assite.api.ListCoinTxResponse")
	proto.RegisterType((*QueryCoinTxRequest)(nil), "assite.api.QueryCoinTxRequest")
	proto.RegisterType((*QueryCoinTxResponse)(nil), "assite.api.QueryCoinTxResponse")
	proto.RegisterType((*ExportCoinTxRequest)(nil), "assite.api.ExportCoinTxRequest")
	proto.RegisterType((*ExportCoinTxResponse)(nil), "assite.api.ExportCoinTxResponse")
	proto.RegisterType((*NewWithdrawRequest)(nil), "assite.api.NewWithdrawRequest")
	proto.RegisterType((*NewWithdrawResponse)(nil), "assite.api.NewWithdrawResponse")
	proto.RegisterType((*GetWithdrawDetailRequest)(nil), "assite.api.GetWithdrawDetailRequest")
	proto.RegisterType((*GetWithdrawDetailResponse)(nil), "assite.api.GetWithdrawDetailResponse")
	proto.RegisterType((*GetWalletAssetRequest)(nil), "assite.api.GetWalletAssetRequest")
	proto.RegisterType((*GetWalletAssetResponse)(nil), "assite.api.GetWalletAssetResponse")
	proto.RegisterType((*ListWalletAssetRequest)(nil), "assite.api.ListWalletAssetRequest")
	proto.RegisterType((*ListWalletAssetResponse)(nil), "assite.api.ListWalletAssetResponse")
	proto.RegisterType((*ListWalletDetailRequest)(nil), "assite.api.ListWalletDetailRequest")
	proto.RegisterType((*ListWalletDetailResponse)(nil), "assite.api.ListWalletDetailResponse")
	proto.RegisterType((*ListWalletCoinDetailRequest)(nil), "assite.api.ListWalletCoinDetailRequest")
	proto.RegisterType((*ListWalletCoinDetailResponse)(nil), "assite.api.ListWalletCoinDetailResponse")
	proto.RegisterType((*AddWithdrawSettingRequest)(nil), "assite.api.AddWithdrawSettingRequest")
	proto.RegisterType((*AddWithdrawSettingResponse)(nil), "assite.api.AddWithdrawSettingResponse")
	proto.RegisterType((*UpdateWithdrawSettingRequest)(nil), "assite.api.UpdateWithdrawSettingRequest")
	proto.RegisterType((*UpdateWithdrawSettingResponse)(nil), "assite.api.UpdateWithdrawSettingResponse")
	proto.RegisterType((*RemoveWithdrawSettingRequest)(nil), "assite.api.RemoveWithdrawSettingRequest")
	proto.RegisterType((*RemoveWithdrawSettingResponse)(nil), "assite.api.RemoveWithdrawSettingResponse")
	proto.RegisterType((*GetWithdrawSettingRequest)(nil), "assite.api.GetWithdrawSettingRequest")
	proto.RegisterType((*GetWithdrawSettingResponse)(nil), "assite.api.GetWithdrawSettingResponse")
	proto.RegisterType((*AddWithdrawQuotaRequest)(nil), "assite.api.AddWithdrawQuotaRequest")
	proto.RegisterType((*AddWithdrawQuotaResponse)(nil), "assite.api.AddWithdrawQuotaResponse")
	proto.RegisterType((*RemoveWithdrawQuotaRequest)(nil), "assite.api.RemoveWithdrawQuotaRequest")
	proto.RegisterType((*RemoveWithdrawQuotaResponse)(nil), "assite.api.RemoveWithdrawQuotaResponse")
	proto.RegisterType((*ListWithdrawQuotaRequest)(nil), "assite.api.ListWithdrawQuotaRequest")
	proto.RegisterType((*ListWithdrawQuotaResponse)(nil), "assite.api.ListWithdrawQuotaResponse")
	proto.RegisterType((*AddWithdrawWhitelistRequest)(nil), "assite.api.AddWithdrawWhitelistRequest")
	proto.RegisterType((*AddWithdrawWhitelistResponse)(nil), "assite.api.AddWithdrawWhitelistResponse")
	proto.RegisterType((*RemoveWithdrawWhitelistRequest)(nil), "assite.api.RemoveWithdrawWhitelistRequest")
	proto.RegisterType((*RemoveWithdrawWhitelistResponse)(nil), "assite.api.RemoveWithdrawWhitelistResponse")
	proto.RegisterType((*ListWithdrawWhitelistRequest)(nil), "assite.api.ListWithdrawWhitelistRequest")
	proto.RegisterType((*ListWithdrawWhitelistResponse)(nil), "assite.api.ListWithdrawWhitelistResponse")
	proto.RegisterType((*UpdateWithdrawPolicyRequest)(nil), "assite.api.UpdateWithdrawPolicyRequest")
	proto.RegisterType((*UpdateWithdrawPolicyResponse)(nil), "assite.api.UpdateWithdrawPolicyResponse")
	proto.RegisterType((*ListWithdrawPolicyRequest)(nil), "assite.api.ListWithdrawPolicyRequest")
	proto.RegisterType((*ListWithdrawPolicyResponse)(nil), "assite.api.ListWithdrawPolicyResponse")
	proto.RegisterType((*AddMessageRequest)(nil), "assite.api.AddMessageRequest")
	proto.RegisterType((*AddMessageResponse)(nil), "assite.api.AddMessageResponse")
	proto.RegisterType((*UpdateMessageRequest)(nil), "assite.api.UpdateMessageRequest")
	proto.RegisterType((*UpdateMessageResponse)(nil), "assite.api.UpdateMessageResponse")
	proto.RegisterType((*ListMessageRequest)(nil), "assite.api.ListMessageRequest")
	proto.RegisterType((*ListMessageResponse)(nil), "assite.api.ListMessageResponse")
}

func init() { proto.RegisterFile("assite.proto", fileDescriptor_978ed835f4b29441) }

var fileDescriptor_978ed835f4b29441 = []byte{
	// 5705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7c, 0x5b, 0x6f, 0x1c, 0xc9,
	0x75, 0xf0, 0x36, 0x87, 0xa4, 0xc8, 0xc3, 0x9b, 0x54, 0xbc, 0x68, 0x38, 0xa4, 0x38, 0x54, 0xeb,
	0xb2, 0x94, 0xbd, 0xd2, 0xc8, 0x94, 0x2c, 0xdb, 0xab, 0xfd, 0xbe, 0x98, 0xa4, 0x44, 0x2d, 0xb3,
	0xba, 0x6d, 0x4b, 0xbb, 0x42, 0xec, 0xd8, 0x83, 0xe6, 0x74, 0x91, 0x6c, 0xab, 0xa7, 0x7b, 0xb6,
	0xbb, 0x47, 0x24, 0xd7, 0x40, 0x60, 0x18, 0x58, 0x23, 0x71, 0x60, 0xc0, 0x89, 0xe3, 0x00, 0x71,
	0x9c, 0x00, 0x49, 0x90, 0x3c, 0xe4, 0x82, 0x3c, 0x18, 0xf9, 0x03, 0xf1, 0x4b, 0x9e, 0x02, 0x03,
	0xce, 0x83, 0xf3, 0x32, 0x09, 0xec, 0x00, 0x0e, 0xf8, 0xa8, 0xa7, 0x24, 0x48, 0x80, 0xa0, 0x4e,
	0x55, 0x77, 0x57, 0xf5, 0x65, 0x86, 0x92, 0x28, 0x79, 0x91, 0xe4, 0x45, 0xd4, 0x54, 0x9d, 0x3a,
	0xf7, 0x73, 0xea, 0x7a, 0x1a, 0x46, 0xcd, 0x20, 0xb0, 0x43, 0x7a, 0xa9, 0xe5, 0x7b, 0xa1, 0x47,
	0x40, 0xfc, 0x32, 0x5b, 0x76, 0xe5, 0xe2, 0xb6, 0x1d, 0xee, 0xb4, 0x37, 0x2f, 0x35, 0xbc, 0x66,
	0x6d, 0xdb, 0xdb, 0xf6, 0x6a, 0x08, 0xb2, 0xd9, 0xde, 0xc2, 0x5f, 0xf8, 0x03, 0xff, 0xc7, 0x87,
	0x56, 0xe6, 0xb7, 0x3d, 0x6f, 0xdb, 0xa1, 0x35, 0xb3, 0x65, 0xd7, 0x4c, 0xd7, 0xf5, 0x42, 0x33,
	0xb4, 0x3d, 0x37, 0x10, 0xbd, 0x93, 0xc1, 0x8e, 0xe9, 0x53, 0xab, 0xc6, 0xff, 0x44, 0x8d, 0xbb,
	0xa6, 0xe3, 0xd0, 0xb0, 0xc6, 0xff, 0xf0, 0x46, 0xfd, 0x87, 0x25, 0x98, 0x30, 0xe8, 0xb6, 0x1d,
	0x84, 0xd4, 0x37, 0xe8, 0x07, 0x6d, 0x1a, 0x84, 0xe4, 0x97, 0x61, 0x64, 0xa5, 0xd1, 0xf0, 0xda,
	0x6e, 0x78, 0xd7, 0x6c, 0xd2, 0xb2, 0xb6, 0xa8, 0x2d, 0x0d, 0xaf, 0x2e, 0x1d, 0x74, 0xaa, 0xa3,
	0x26, 0x6f, 0xae, 0xbb, 0x66, 0x93, 0x3e, 0xed, 0x54, 0xa7, 0x16, 0x9f, 0x98, 0x8e, 0x6d, 0x99,
	0x21, 0x7d, 0x53, 0xf7, 0xe9, 0x07, 0x6d, 0xdb, 0xa7, 0x96, 0x6e, 0xc8, 0x83, 0xc9, 0x3b, 0x40,
	0xc4, 0xcf, 0x1b, 0x34, 0x68, 0xf8, 0x76, 0x8b, 0xb1, 0x59, 0xee, 0x43, 0x94, 0x73, 0x07, 0x9d,
	0xea, 0x64, 0x84, 0xd2, 0x4a, 0xba, 0x9f, 0x76, 0xaa, 0xaf, 0x19, 0x39, 0xc3, 0xc8, 0xe7, 0x61,
	0xe8, 0xbd, 0x80, 0xfa, 0x8c, 0x7a, 0xb9, 0x84, 0x28, 0xce, 0x1e, 0x74, 0xaa, 0xc3, 0xed, 0x80,
	0xfa, 0x11, 0x4b, 0x93, 0x79, 0x1c, 0xc5, 0xa3, 0xc8, 0x75, 0x18, 0xba, 0x6f, 0x06, 0xc1, 0xae,
	0xe7, 0x5b, 0xe5, 0x7e, 0xc4, 0x50, 0x3d, 0xe8, 0x54, 0xfb, 0x5b, 0x66, 0x10, 0x14, 0x0e, 0x8e,
	0x06, 0x90, 0xb7, 0x60, 0xe0, 0x66, 0xd3, 0xb4, 0x9d, 0xf2, 0x00, 0x8e, 0x3c, 0x7f, 0xd0, 0xa9,
	0x0e, 0x50, 0xd6, 0xf0, 0xb4, 0x53, 0x9d, 0x4d, 0x86, 0x62, 0xd3, 0x1b, 0x09, 0x02, 0x3e, 0x88,
	0x9c, 0x87, 0xc1, 0x3b, 0xde, 0xa6, 0xed, 0xd0, 0xf2, 0x20, 0x0e, 0x1f, 0x3f, 0xe8, 0x54, 0x07,
	0x9b, 0xd8, 0x82, 0x02, 0x8b, 0x5e, 0xb2, 0x0c, 0x23, 0x6b, 0x4c, 0x70, 0x7f, 0x7f, 0xcd, 0xb3,
	0x68, 0xf9, 0x18, 0x02, 0x1f, 0x67, 0xda, 0x6f, 0xf0, 0xe6, 0x7a, 0xc3, 0xb3, 0xa8, 0x21, 0x03,
	0xe9, 0x04, 0x8e, 0x27, 0x46, 0x0c, 0x5a, 0x9e, 0x1b, 0x50, 0xfd, 0x07, 0x1a, 0x8c, 0xde, 0xf6,
	0xb6, 0x6d, 0x37, 0x32, 0xeb, 0xe7, 0xa1, 0x5f, 0xb2, 0xe7, 0x1b, 0x32, 0xf7, 0xd5, 0x2d, 0xcf,
	0x6f, 0xbe, 0xa9, 0x33, 0x15, 0xe9, 0xb9, 0x36, 0xc5, 0x91, 0xe4, 0xac, 0xa4, 0x3d, 0x6e, 0xc2,
	0xa1, 0x48, 0x7b, 0x92, 0x9a, 0xae, 0x43, 0xe9, 0x5e, 0xd8, 0x12, 0x06, 0xba, 0x70, 0xd0, 0xa9,
	0x96, 0xbc, 0xb0, 0xf5, 0xb4, 0x53, 0x5d, 0xe0, 0x44, 0xbc, 0xb0, 0x25, 0xd3, 0x30, 0x9d, 0xd6,
	0x8e, 0xe9, 0xb6, 0x9b, 0xba, 0xc1, 0x46, 0xe9, 0x5f, 0x85, 0x31, 0xc1, 0x34, 0x17, 0x83, 0xbc,
	0x01, 0xc3, 0x0f, 0x68, 0x10, 0xd8, 0x9e, 0xbb, 0x61, 0x09, 0xd6, 0x99, 0xe6, 0x20, 0xe0, 0x8d,
	0x75, 0xdb, 0x32, 0x12, 0x00, 0xf2, 0x16, 0x8c, 0x1b, 0x4c, 0x28, 0xd7, 0xa0, 0xa1, 0xbf, 0x7f,
	0xb7, 0xdd, 0x44, 0x3e, 0x07, 0x56, 0xa7, 0x0e, 0x3a, 0xd5, 0xe3, 0x3e, 0xf6, 0xd4, 0x7d, 0xd6,
	0x55, 0x77, 0xdb, 0x4d, 0x23, 0x05, 0xab, 0x4f, 0x20, 0x71, 0xaf, 0x1d, 0x0a, 0x95, 0xe9, 0xc7,
	0x61, 0x3c, 0x6a, 0x10, 0x5a, 0x7d, 0x17, 0x4e, 0xac, 0x7b, 0xfe, 0x36, 0x0d, 0x99, 0xb8, 0x91,
	0x66, 0x63, 0xc7, 0xd0, 0x9e, 0xc3, 0x31, 0xf4, 0x29, 0x20, 0x32, 0x4a, 0x41, 0xe8, 0xcf, 0x34,
	0x38, 0xc1, 0xdc, 0x76, 0xa5, 0x11, 0xda, 0x4f, 0x68, 0x44, 0xe9, 0x3a, 0x8c, 0x63, 0x03, 0x46,
	0x3b, 0xfa, 0x07, 0x27, 0x39, 0x79, 0xd0, 0xa9, 0x4e, 0x98, 0x71, 0x0f, 0x77, 0x91, 0x14, 0x28,
	0xb9, 0x06, 0xa3, 0x0f, 0x77, 0xbd, 0xf5, 0x95, 0x35, 0xb3, 0x15, 0x36, 0x76, 0x4c, 0x61, 0x42,
	0x72, 0xd0, 0xa9, 0x8e, 0x87, 0xbb, 0x5e, 0x7d, 0xcb, 0xac, 0x37, 0x78, 0x8f, 0xa1, 0xc0, 0x91,
	0x79, 0xe8, 0x67, 0xac, 0x09, 0x8b, 0x26, 0x26, 0xc7, 0x56, 0xbd, 0x0c, 0x33, 0xb7, 0xed, 0x20,
	0x94, 0xdc, 0x31, 0xd2, 0xde, 0x17, 0x61, 0xce, 0xa0, 0x0f, 0xa8, 0x6b, 0xa9, 0x7c, 0x1c, 0x8d,
	0xd6, 0x16, 0x60, 0x3e, 0x1f, 0xb9, 0xd0, 0xdf, 0x03, 0x38, 0x99, 0x61, 0x4b, 0xb8, 0xd4, 0x67,
	0x61, 0x60, 0x23, 0xa4, 0xcd, 0xa0, 0xac, 0x2d, 0x96, 0x96, 0x46, 0x96, 0x4f, 0x5e, 0x12, 0x69,
	0xd2, 0x6c, 0xd9, 0x97, 0x24, 0xf8, 0xd5, 0x61, 0xc6, 0x91, 0xcd, 0x20, 0x0d, 0x3e, 0x40, 0xff,
	0x53, 0x0d, 0x88, 0x6c, 0x14, 0x81, 0xf0, 0x85, 0xac, 0x72, 0x11, 0x86, 0xb9, 0xb6, 0xd9, 0x38,
	0x6e, 0x92, 0x89, 0x83, 0x4e, 0x75, 0x24, 0x32, 0x09, 0x1b, 0x93, 0x40, 0x90, 0x33, 0x30, 0x78,
	0xaf, 0xf5, 0x70, 0xbf, 0xc5, 0x33, 0xe0, 0xc0, 0xea, 0xc8, 0x41, 0xa7, 0x7a, 0xcc, 0x6b, 0xd5,
	0xc3, 0xfd, 0x16, 0x35, 0x44, 0x97, 0xfe, 0x9f, 0xc2, 0x79, 0x36, 0xdc, 0x27, 0x76, 0x48, 0x93,
	0x04, 0x90, 0xa4, 0x4f, 0xed, 0xb9, 0xd2, 0xe7, 0xb5, 0xc8, 0x64, 0x9c, 0xcf, 0x45, 0xd9, 0x64,
	0xb9, 0x43, 0x45, 0xee, 0xfb, 0x5c, 0x9c, 0xfb, 0xb8, 0x0f, 0x9d, 0x56, 0x72, 0x5f, 0xee, 0xc8,
	0x82, 0x74, 0xd8, 0x7f, 0x98, 0x74, 0x38, 0xc5, 0xad, 0x14, 0x49, 0x2f, 0x3c, 0xe2, 0x2e, 0x54,
	0x56, 0x5a, 0x2d, 0x67, 0xdf, 0xa0, 0x01, 0x0d, 0xef, 0x85, 0x3b, 0xd4, 0x97, 0x63, 0xf8, 0x32,
	0x94, 0xde, 0xb3, 0x79, 0x86, 0x29, 0xad, 0x2e, 0xb0, 0xac, 0xd5, 0xb6, 0xad, 0x22, 0xe6, 0x18,
	0xa8, 0x7e, 0x0a, 0xe6, 0x72, 0xf1, 0x09, 0x72, 0x77, 0x60, 0x36, 0xd5, 0xbd, 0xbc, 0xbe, 0xf2,
	0xfc, 0xd4, 0xe6, 0x33, 0xdc, 0x23, 0x3a, 0x41, 0xcc, 0x02, 0x82, 0x1d, 0x77, 0xa8, 0x2c, 0xd3,
	0x79, 0x38, 0x76, 0xcf, 0xb1, 0x30, 0x76, 0xb9, 0xbd, 0x47, 0x0f, 0x3a, 0xd5, 0x21, 0xcf, 0xb1,
	0xea, 0x18, 0xbf, 0x51, 0x27, 0x83, 0xbb, 0x4b, 0x77, 0x11, 0xae, 0x2f, 0x81, 0x73, 0xe9, 0xae,
	0x80, 0x13, 0x9d, 0xfa, 0x34, 0x4c, 0x2a, 0x54, 0x04, 0xf1, 0xbf, 0xd5, 0xe0, 0x84, 0x68, 0x97,
	0x44, 0xfc, 0x3c, 0x4c, 0xdc, 0x73, 0x2c, 0x25, 0xe1, 0x70, 0x26, 0x66, 0x0e, 0x3a, 0x55, 0xc2,
	0x98, 0x48, 0x25, 0x9d, 0x34, 0x38, 0xc3, 0x70, 0x97, 0xee, 0xe6, 0xa4, 0x2c, 0xc4, 0xc0, 0xd8,
	0x4b, 0x63, 0x48, 0x81, 0x93, 0x0b, 0x30, 0xb4, 0xd2, 0x0e, 0x77, 0xd0, 0x73, 0xb8, 0xe7, 0x8d,
	0x31, 0x8f, 0x37, 0xdb, 0xe1, 0x0e, 0x77, 0x9b, 0xb8, 0x5b, 0x77, 0x63, 0x0d, 0x4a, 0x7a, 0x55,
	0x83, 0x53, 0xeb, 0x19, 0x9c, 0x32, 0xbd, 0xbe, 0xee, 0xf4, 0xc6, 0x61, 0xf4, 0x16, 0xa3, 0x16,
	0x25, 0xcb, 0x35, 0x18, 0x13, 0xbf, 0x05, 0xe9, 0x65, 0xe8, 0x67, 0xb9, 0x07, 0xa9, 0x8e, 0x2c,
	0x4f, 0xc9, 0x49, 0x8a, 0x39, 0xf7, 0x0d, 0x33, 0x34, 0x79, 0x2e, 0x66, 0x50, 0x06, 0xfe, 0xab,
	0xff, 0x85, 0x06, 0x13, 0xef, 0xb5, 0x98, 0xff, 0xc4, 0x88, 0x19, 0x4f, 0x0c, 0x5e, 0x9a, 0xfa,
	0xc7, 0x94, 0xa8, 0x37, 0xe2, 0x6e, 0x96, 0xe8, 0x6f, 0x9b, 0xee, 0xb6, 0x3c, 0xb7, 0x3b, 0xa6,
	0xbb, 0x6d, 0x60, 0x2b, 0x59, 0x82, 0xa1, 0xb5, 0xb6, 0xef, 0x53, 0xb7, 0xb1, 0x2f, 0x94, 0x89,
	0x6e, 0xd2, 0x10, 0x6d, 0x46, 0xdc, 0x4b, 0xce, 0xc1, 0xb1, 0x47, 0xd4, 0x69, 0x78, 0xcd, 0x28,
	0x5e, 0x31, 0x49, 0xed, 0xf2, 0x26, 0x23, 0xea, 0x63, 0xab, 0x96, 0x84, 0x59, 0xe1, 0x4b, 0x57,
	0x60, 0xf2, 0x7d, 0xea, 0xdb, 0x5b, 0xfb, 0xaa, 0x27, 0x47, 0x53, 0x90, 0x96, 0x3b, 0x05, 0xcd,
	0xc0, 0x94, 0x3a, 0x48, 0x20, 0xfb, 0x02, 0x4c, 0xb0, 0x39, 0x80, 0xc9, 0xa7, 0x20, 0xda, 0xa6,
	0x65, 0xc0, 0xe4, 0x29, 0x10, 0x6d, 0x53, 0x03, 0x5b, 0x99, 0xae, 0xd8, 0xdf, 0x07, 0xf6, 0x87,
	0xb4, 0x3c, 0x82, 0x10, 0xa8, 0x2b, 0x06, 0x51, 0x0f, 0xec, 0x0f, 0xa9, 0x11, 0x77, 0xeb, 0xbf,
	0xad, 0xc1, 0xf1, 0x04, 0xb9, 0xb0, 0xd9, 0xa7, 0x81, 0xcf, 0x17, 0x62, 0x66, 0xc9, 0x37, 0x9a,
	0x3c, 0xad, 0xe0, 0x1f, 0x46, 0xf6, 0xa1, 0x17, 0x9a, 0x0e, 0x5b, 0xaf, 0x40, 0x42, 0x36, 0x64,
	0x6d, 0xb8, 0x50, 0x89, 0xbb, 0x63, 0xfe, 0x47, 0xf2, 0xf8, 0x67, 0x93, 0x22, 0xe3, 0xc9, 0xf0,
	0x1c, 0xba, 0xe2, 0x5a, 0xf7, 0xa9, 0xdf, 0xb4, 0x71, 0x65, 0x14, 0x39, 0xd9, 0xb7, 0x34, 0x38,
	0x55, 0x00, 0x90, 0x48, 0xc0, 0x3a, 0x73, 0x25, 0x60, 0x1d, 0x6c, 0x1e, 0xe4, 0x12, 0xf8, 0x0c,
	0xcc, 0xe0, 0xd0, 0x6c, 0x18, 0x43, 0xc6, 0xf2, 0x47, 0x66, 0x18, 0x73, 0xf9, 0x64, 0x58, 0x8b,
	0x81, 0x19, 0x1c, 0x5a, 0xff, 0x77, 0x0d, 0x4e, 0x73, 0x17, 0xc0, 0x8c, 0xc6, 0x54, 0x74, 0x8b,
	0xba, 0xd4, 0xb7, 0x1b, 0x1b, 0xee, 0x96, 0xf7, 0xdc, 0xc9, 0x52, 0xf1, 0xf9, 0xbe, 0xee, 0x3e,
	0x5f, 0x85, 0x81, 0x9b, 0x77, 0xd8, 0x94, 0xc6, 0x5d, 0x7a, 0x38, 0x9e, 0xd2, 0x0c, 0xde, 0x4e,
	0xf4, 0x78, 0xee, 0xe2, 0xbe, 0x0c, 0xc9, 0xdc, 0x55, 0x34, 0x49, 0x0d, 0x1c, 0x66, 0x92, 0x3a,
	0x0b, 0x7a, 0x37, 0xd1, 0x85, 0x0b, 0xff, 0xbd, 0x06, 0x67, 0x52, 0x60, 0x1b, 0xcd, 0x96, 0xe7,
	0x87, 0xa6, 0x1b, 0xbe, 0xb0, 0x8e, 0x56, 0x2c, 0x8b, 0x1b, 0x9b, 0x59, 0x2d, 0xca, 0x55, 0x96,
	0x55, 0xe7, 0xa6, 0x8d, 0xbb, 0x19, 0xe8, 0x0d, 0xea, 0x70, 0xd0, 0x52, 0x02, 0x6a, 0x51, 0x27,
	0x02, 0x8d, 0xba, 0x99, 0x3a, 0x1f, 0x84, 0x66, 0xc8, 0x95, 0x35, 0xc0, 0xd5, 0x19, 0xb0, 0x06,
	0x83, 0xb7, 0xeb, 0xe7, 0xe1, 0x6c, 0x77, 0x79, 0x84, 0xe0, 0x7f, 0xd5, 0x07, 0xc7, 0x57, 0x2c,
	0x6b, 0xa5, 0x65, 0xbf, 0x43, 0xf7, 0xa5, 0x15, 0xcc, 0x23, 0xdc, 0xbd, 0x6e, 0x44, 0xa2, 0xe2,
	0x0a, 0x86, 0xef, 0x68, 0xeb, 0xc5, 0x02, 0xc7, 0xa3, 0xc8, 0x3a, 0xc0, 0x4a, 0xa3, 0x41, 0x83,
	0x00, 0x97, 0x50, 0x7c, 0x73, 0xc0, 0x56, 0x9e, 0x23, 0x26, 0xb6, 0xe2, 0x32, 0xaa, 0x08, 0x8b,
	0x34, 0x92, 0xac, 0xc1, 0xf0, 0xfd, 0xf6, 0xa6, 0x63, 0x37, 0xde, 0xa1, 0x51, 0x36, 0x3c, 0xc7,
	0xb6, 0x25, 0x2d, 0x6c, 0xac, 0x3f, 0xa6, 0xfb, 0x45, 0x58, 0x92, 0x71, 0xcc, 0xb5, 0xd8, 0x0e,
	0xc4, 0x7f, 0x2c, 0xbb, 0x96, 0x8f, 0x2d, 0x86, 0xe8, 0x61, 0x73, 0xf3, 0x46, 0xeb, 0xb6, 0xdd,
	0xb4, 0x43, 0xe1, 0x56, 0x98, 0x74, 0xed, 0x56, 0xdd, 0x61, 0x6d, 0x46, 0xd4, 0xa9, 0xdf, 0x84,
	0x13, 0x92, 0xba, 0x44, 0x34, 0x5f, 0x86, 0xfe, 0x8d, 0x64, 0x0e, 0x21, 0x4a, 0x54, 0x22, 0xa4,
	0x3c, 0x83, 0x30, 0x48, 0x9d, 0xc2, 0x09, 0x96, 0x20, 0x54, 0xb5, 0xdf, 0xcf, 0xa8, 0xfd, 0x6a,
	0x5a, 0xed, 0x67, 0xf8, 0xe6, 0x6e, 0x57, 0x80, 0xe5, 0xef, 0x22, 0x63, 0x2c, 0xfa, 0x06, 0x10,
	0x99, 0x8c, 0x60, 0xf7, 0x8a, 0xba, 0x30, 0xcf, 0xe3, 0x37, 0xbb, 0x26, 0xff, 0x89, 0x06, 0x93,
	0xdc, 0xa3, 0x54, 0xa6, 0x2f, 0x42, 0x5f, 0xcc, 0xee, 0xa9, 0x83, 0x4e, 0xb5, 0xaf, 0xd8, 0x3d,
	0xfa, 0x8e, 0xd0, 0x31, 0x12, 0x9b, 0x96, 0x0e, 0x63, 0xd3, 0xfe, 0x6e, 0x36, 0x9d, 0x81, 0x29,
	0x55, 0x32, 0x11, 0x1b, 0x37, 0x60, 0xf2, 0x06, 0x75, 0xe8, 0x8b, 0x49, 0xcc, 0xb0, 0xab, 0x58,
	0x04, 0xf6, 0xef, 0x69, 0x18, 0x79, 0xdc, 0x56, 0x11, 0xee, 0x2b, 0xe2, 0xf0, 0xa0, 0x2f, 0x39,
	0x34, 0xe9, 0xb6, 0x65, 0xe0, 0xe7, 0x05, 0xef, 0xc2, 0xc0, 0xa3, 0x78, 0xab, 0x32, 0xbe, 0x3c,
	0x23, 0xdb, 0x93, 0xa3, 0x67, 0xbd, 0xab, 0x67, 0x98, 0x4d, 0x77, 0x85, 0x82, 0x67, 0x12, 0x74,
	0x9e, 0x4b, 0xbd, 0xad, 0xff, 0x77, 0x79, 0xf1, 0x53, 0x8b, 0xcb, 0xba, 0xc1, 0x31, 0xe9, 0x97,
	0xd0, 0xcd, 0x23, 0xde, 0x84, 0xdf, 0xcc, 0x42, 0xe9, 0x51, 0x9c, 0xfc, 0x8e, 0xb1, 0xe4, 0xb7,
	0x6b, 0x5b, 0x06, 0x6b, 0xd3, 0xff, 0x20, 0xf6, 0x0e, 0x55, 0x9e, 0xcb, 0xf2, 0x90, 0x05, 0x31,
	0xa4, 0x30, 0x5f, 0x3e, 0xb2, 0x2d, 0x36, 0xf3, 0x4a, 0x1a, 0x18, 0x8a, 0x34, 0x20, 0x44, 0xbd,
	0x16, 0xe5, 0x3d, 0x2e, 0xea, 0xb4, 0x2c, 0x2a, 0x76, 0xa0, 0xa4, 0xd9, 0x74, 0x18, 0x9b, 0x58,
	0x15, 0x49, 0xbf, 0xc5, 0x96, 0xda, 0x4d, 0xef, 0x49, 0x3e, 0xdb, 0x7d, 0x87, 0x66, 0x9b, 0x11,
	0x50, 0x11, 0x09, 0x02, 0xbb, 0x3c, 0xd0, 0x55, 0xf4, 0xc5, 0x8a, 0x3c, 0xba, 0x85, 0xd3, 0xef,
	0x6a, 0x3c, 0xf6, 0x53, 0x36, 0xfc, 0x8c, 0x1a, 0xfb, 0x39, 0xbe, 0xc2, 0xa6, 0x87, 0x6c, 0xfc,
	0x1f, 0xdd, 0xe2, 0xe9, 0xcb, 0x30, 0xc9, 0x4f, 0x0c, 0x6c, 0x57, 0x9e, 0x59, 0x8f, 0x52, 0xf0,
	0x29, 0x95, 0x40, 0xb2, 0xe6, 0xda, 0x28, 0x5a, 0x35, 0x46, 0xc0, 0x2f, 0x53, 0xf0, 0x7f, 0xd2,
	0x60, 0x2a, 0x0e, 0x2a, 0x46, 0xf0, 0xf9, 0x83, 0xe4, 0x32, 0x94, 0xd6, 0x54, 0xff, 0x6c, 0x74,
	0x19, 0xb1, 0x66, 0x5b, 0xa4, 0x06, 0xb0, 0x66, 0xba, 0x37, 0x68, 0xcb, 0x0b, 0xec, 0x10, 0xa3,
	0x67, 0x88, 0x6f, 0xb1, 0x1a, 0xa6, 0x5b, 0xb7, 0x78, 0xb3, 0x21, 0x81, 0xe0, 0x5a, 0xcb, 0x74,
	0x1f, 0xd9, 0xe1, 0x8e, 0xe5, 0x9b, 0xbb, 0x98, 0x40, 0x87, 0xc4, 0x5a, 0xcb, 0x74, 0xeb, 0xbb,
	0xa2, 0xdd, 0x90, 0x81, 0xf4, 0x1a, 0x4c, 0xa7, 0x04, 0x14, 0xaa, 0x9f, 0x91, 0x52, 0xe6, 0x20,
	0x4f, 0x99, 0x98, 0x1b, 0xdf, 0x86, 0x93, 0x72, 0xd4, 0xc8, 0x4a, 0x79, 0xc6, 0x2c, 0x5b, 0x81,
	0x72, 0x16, 0x53, 0xb4, 0xc6, 0xd1, 0x60, 0x3a, 0x09, 0x85, 0x1c, 0xcd, 0x1f, 0x3e, 0xce, 0x59,
	0xe8, 0x32, 0xcd, 0x97, 0x92, 0xd0, 0x6d, 0xb0, 0xd0, 0x5d, 0x3b, 0xca, 0xd0, 0xfd, 0x9e, 0xc6,
	0xcf, 0xfa, 0x72, 0x14, 0x19, 0x87, 0x6f, 0xa9, 0x28, 0x7c, 0x19, 0xf8, 0xcb, 0xf4, 0xe2, 0x7f,
	0x15, 0x79, 0x65, 0xc5, 0xb2, 0x7c, 0xaa, 0x9c, 0xeb, 0x3c, 0xa3, 0x26, 0x2f, 0xcb, 0x9a, 0x3c,
	0x94, 0x0f, 0x9f, 0x83, 0x63, 0x82, 0xaa, 0xbc, 0xdf, 0x35, 0x05, 0x23, 0x51, 0xdf, 0xd1, 0xd9,
	0xe1, 0xa3, 0x12, 0x9c, 0x78, 0x60, 0x37, 0x5b, 0x0e, 0x15, 0xa8, 0x59, 0x86, 0x90, 0xb9, 0x18,
	0xeb, 0xce, 0xc5, 0x1d, 0xda, 0xf4, 0xca, 0xe3, 0xc9, 0x3c, 0xd6, 0xa4, 0x4d, 0xcf, 0xc0, 0x56,
	0x86, 0x64, 0xcd, 0xa7, 0x66, 0xe8, 0xf9, 0xe5, 0x89, 0x04, 0x49, 0x83, 0x37, 0x19, 0x51, 0x1f,
	0xf9, 0x9a, 0x06, 0x43, 0xf8, 0x7f, 0xba, 0x12, 0x96, 0xa7, 0x50, 0x53, 0x16, 0xe3, 0x16, 0x01,
	0x69, 0xdd, 0x0c, 0x9f, 0x76, 0xaa, 0xd3, 0xdb, 0xb8, 0x24, 0x64, 0xf3, 0xfa, 0x9b, 0x4c, 0x6d,
	0xa1, 0xdd, 0xa4, 0xd7, 0xf5, 0xff, 0xe8, 0x54, 0xdf, 0xdc, 0xb4, 0xc3, 0xcd, 0x76, 0xe3, 0x31,
	0x0d, 0x2f, 0x79, 0xfe, 0x76, 0x6d, 0xd3, 0xb6, 0xed, 0x6d, 0x87, 0x46, 0x7f, 0xeb, 0xbb, 0xe6,
	0xe5, 0xcb, 0x9f, 0xaa, 0x5b, 0x66, 0x33, 0xa8, 0x05, 0x7e, 0xa3, 0xe6, 0xd8, 0x9b, 0x35, 0x36,
	0xf4, 0xd2, 0x43, 0x9b, 0x6d, 0xdc, 0x22, 0xaa, 0xc8, 0x82, 0x58, 0x1d, 0x85, 0xe5, 0xe9, 0x84,
	0x85, 0x36, 0xb6, 0xbd, 0x4c, 0x16, 0x22, 0xaa, 0xfa, 0x1f, 0x6a, 0x7c, 0xca, 0x88, 0x5d, 0x4e,
	0x04, 0xc3, 0xff, 0x57, 0x13, 0xfa, 0xa9, 0x4b, 0xc9, 0x3d, 0xdf, 0xa5, 0x8c, 0xdd, 0x5e, 0x66,
	0x4c, 0xfc, 0xbe, 0x06, 0x53, 0xb7, 0x68, 0x78, 0x97, 0xee, 0xfe, 0x02, 0xa2, 0xa2, 0x0a, 0x03,
	0xb7, 0xcd, 0x4d, 0xea, 0x88, 0x98, 0x40, 0x31, 0x1d, 0xd6, 0x60, 0xf0, 0x76, 0xfd, 0x2e, 0x4c,
	0xa7, 0x98, 0x8b, 0x27, 0x44, 0x79, 0xdb, 0xa2, 0x9c, 0xcf, 0xcb, 0x8a, 0x4b, 0xef, 0x5d, 0xfe,
	0x41, 0x03, 0xf2, 0xb6, 0x6d, 0xd1, 0x5f, 0x80, 0xac, 0x6f, 0xa5, 0x33, 0x80, 0x2e, 0xc5, 0x5e,
	0xd1, 0xc8, 0x4c, 0x48, 0x0e, 0xe4, 0x85, 0xa4, 0x3e, 0x0d, 0x93, 0x8a, 0x54, 0x62, 0xf2, 0xf8,
	0xb1, 0x06, 0x27, 0xde, 0x36, 0x83, 0xff, 0x61, 0xc2, 0x7e, 0x1a, 0x88, 0x2c, 0x94, 0x70, 0x88,
	0x2a, 0x0c, 0xdc, 0xdc, 0xb3, 0x83, 0x10, 0x3d, 0x62, 0x48, 0x1c, 0xd2, 0xb0, 0x06, 0x83, 0xb7,
	0xeb, 0x7f, 0xa2, 0xc1, 0xe4, 0xda, 0x0e, 0x6d, 0x3c, 0xce, 0xaa, 0x63, 0x4d, 0x5d, 0xc1, 0x3c,
	0x83, 0x70, 0x7d, 0xcf, 0x2f, 0x5c, 0x29, 0x57, 0xb8, 0xcf, 0xc0, 0x94, 0xca, 0x64, 0x22, 0xde,
	0xfb, 0x0c, 0xab, 0x2c, 0x1e, 0x92, 0x31, 0x78, 0x3b, 0x5b, 0xac, 0xdf, 0xe2, 0x33, 0xe8, 0x3a,
	0xa5, 0xaf, 0x70, 0x75, 0xa6, 0x7f, 0xad, 0x1f, 0x88, 0x4c, 0x59, 0x30, 0x7c, 0x1e, 0x8e, 0xad,
	0x53, 0xfa, 0xc0, 0xf1, 0x76, 0x91, 0xbc, 0xc6, 0x37, 0xb0, 0x5b, 0x94, 0xd6, 0x03, 0xc7, 0xdb,
	0x35, 0xa2, 0x4e, 0xf2, 0x06, 0x0c, 0xaf, 0x53, 0x7a, 0xc7, 0xb6, 0x2c, 0x87, 0x6f, 0x9c, 0x34,
	0x7e, 0x79, 0xcb, 0x20, 0x9b, 0xd8, 0x6a, 0x24, 0x00, 0x02, 0xeb, 0xba, 0x19, 0xf0, 0x75, 0xa0,
	0x84, 0x75, 0xcb, 0x0c, 0x42, 0x23, 0xea, 0x64, 0xe9, 0x11, 0xf7, 0xc7, 0xeb, 0x94, 0x1f, 0x33,
	0x69, 0x3c, 0x3d, 0xe2, 0xe6, 0xb9, 0xbe, 0x45, 0xa9, 0x11, 0x77, 0xb3, 0xc5, 0xe2, 0x7d, 0xc7,
	0x0c, 0xb7, 0x3c, 0xbf, 0xc9, 0xa0, 0x07, 0x10, 0x1a, 0x17, 0x8b, 0x2d, 0xd1, 0x8c, 0x03, 0x64,
	0x20, 0x72, 0x19, 0x40, 0xf0, 0xff, 0x20, 0xf4, 0x31, 0xb1, 0x8a, 0xb3, 0xbc, 0x48, 0xbe, 0x7a,
	0x10, 0xfa, 0x86, 0x04, 0x43, 0xae, 0xc1, 0x68, 0x2c, 0x05, 0x1b, 0xd3, 0x4a, 0x2e, 0x56, 0x13,
	0x49, 0x71, 0x94, 0x02, 0x27, 0x28, 0x31, 0x99, 0xd8, 0xa8, 0x31, 0x95, 0x12, 0x93, 0x39, 0xa6,
	0x24, 0x60, 0xc8, 0x15, 0x18, 0x89, 0x64, 0x63, 0x43, 0xf8, 0x1c, 0x7e, 0xe2, 0xa0, 0x53, 0x1d,
	0x8b, 0xa5, 0xc7, 0x31, 0x32, 0x14, 0x79, 0x0b, 0xc6, 0x25, 0xf9, 0xd8, 0x38, 0x3e, 0xb5, 0xe3,
	0xa5, 0xb8, 0xac, 0x07, 0x1c, 0x9a, 0x82, 0xd5, 0xff, 0x66, 0x90, 0xef, 0x14, 0x99, 0x0f, 0x3c,
	0xdc, 0x4b, 0xed, 0x14, 0xfb, 0x72, 0x76, 0x8a, 0xdd, 0x57, 0xa2, 0x0f, 0xf7, 0xec, 0xe8, 0xe9,
	0x05, 0x86, 0x47, 0xb8, 0x67, 0x5b, 0x06, 0xb6, 0x32, 0x63, 0xad, 0xfb, 0x5e, 0x33, 0x0a, 0x3f,
	0xe9, 0x14, 0x75, 0xcb, 0xf7, 0x9a, 0xf5, 0x68, 0x25, 0x23, 0x03, 0x31, 0x0f, 0x7b, 0xe8, 0x45,
	0x23, 0x92, 0x87, 0x15, 0x10, 0x7a, 0x31, 0x7c, 0x02, 0x10, 0x87, 0xe7, 0xb1, 0xdc, 0xb5, 0xcf,
	0x1b, 0x30, 0x2c, 0xc4, 0xdb, 0xb0, 0xca, 0x43, 0x09, 0x2e, 0x9f, 0x37, 0xe2, 0x53, 0x83, 0x18,
	0x00, 0x65, 0xd9, 0x6f, 0xd1, 0xf2, 0x30, 0xca, 0xc9, 0x65, 0xd9, 0x6f, 0x51, 0x03, 0x5b, 0xc9,
	0x2f, 0xc1, 0xc4, 0x1d, 0xdb, 0x5d, 0xf3, 0xdc, 0x2d, 0xdb, 0x6f, 0x52, 0x2b, 0x9a, 0xc9, 0x4b,
	0xab, 0xd3, 0x07, 0x9d, 0xea, 0x89, 0xa6, 0xed, 0xd6, 0x1b, 0x51, 0x1f, 0xce, 0xe8, 0x69, 0x68,
	0xb2, 0x08, 0x03, 0x77, 0x6c, 0x77, 0xc3, 0x42, 0x07, 0x2c, 0x89, 0x53, 0x67, 0x1b, 0xdf, 0x3b,
	0xf0, 0x0e, 0x84, 0x30, 0xf7, 0x36, 0xac, 0xf2, 0xa8, 0x04, 0x61, 0xee, 0x71, 0x08, 0xd6, 0x81,
	0x33, 0x30, 0x9e, 0x32, 0x8d, 0x25, 0x87, 0xb1, 0xfc, 0x88, 0x89, 0xb7, 0x93, 0xef, 0x68, 0x30,
	0xbe, 0x4a, 0xb7, 0x6d, 0x77, 0xd5, 0xf1, 0x1a, 0x8f, 0xd9, 0xea, 0x06, 0x5d, 0xaa, 0xb4, 0xfa,
	0x98, 0xb9, 0xc6, 0x26, 0xeb, 0xa9, 0x6f, 0xb2, 0xae, 0x3a, 0x5b, 0xfe, 0xbc, 0xac, 0x05, 0x55,
	0x8a, 0x05, 0xf2, 0x2d, 0x0d, 0x46, 0x6f, 0xba, 0x56, 0xc2, 0xd3, 0x04, 0xf2, 0x64, 0xb3, 0x78,
	0xa2, 0xae, 0xf5, 0x0a, 0x38, 0x52, 0xc8, 0x93, 0xab, 0xd0, 0xff, 0xc0, 0xb6, 0x68, 0xf9, 0x78,
	0xf6, 0x14, 0xeb, 0xe1, 0x1e, 0xeb, 0xc1, 0xb3, 0x1d, 0xf4, 0x80, 0xc0, 0xb6, 0xa8, 0x81, 0xd0,
	0xd1, 0x11, 0x67, 0x14, 0x36, 0x87, 0x38, 0xe2, 0xe4, 0xa0, 0x39, 0x47, 0x9c, 0xdf, 0x1e, 0x06,
	0xf2, 0x6e, 0x9b, 0xfa, 0xfb, 0x99, 0x18, 0x0c, 0xf7, 0x42, 0x31, 0x4d, 0x61, 0xa0, 0x85, 0x7b,
	0xa1, 0xc1, 0xfe, 0x61, 0xce, 0xf9, 0xc8, 0xb6, 0xf8, 0x6e, 0x4c, 0x38, 0xe7, 0xae, 0x6d, 0x05,
	0x06, 0xb6, 0xb2, 0xde, 0x35, 0xd6, 0xdb, 0x9f, 0xf4, 0x36, 0xb0, 0x97, 0xb5, 0x92, 0xeb, 0x30,
	0x88, 0x67, 0x53, 0x2c, 0x02, 0x4b, 0x4b, 0xe3, 0xea, 0xfa, 0xeb, 0xe1, 0x5e, 0x72, 0x9a, 0x85,
	0x1e, 0x87, 0xa7, 0x59, 0x81, 0x21, 0x86, 0xb0, 0x7d, 0x20, 0x93, 0x9e, 0xc5, 0x62, 0xa9, 0x8b,
	0xb2, 0xf8, 0x41, 0x18, 0x03, 0x34, 0x38, 0x7c, 0x9e, 0x2b, 0x1e, 0xfb, 0x18, 0xba, 0xe2, 0xd0,
	0x2f, 0xd6, 0x15, 0xbf, 0xad, 0xc1, 0x18, 0xb2, 0x18, 0x6f, 0xbe, 0x78, 0xfa, 0xf9, 0xca, 0x41,
	0xa7, 0x3a, 0xc1, 0x95, 0xf4, 0xd2, 0xb7, 0x60, 0x2a, 0x03, 0xe4, 0x9b, 0x1a, 0x8c, 0xdc, 0x74,
	0xad, 0x98, 0x21, 0x9e, 0xe6, 0x76, 0xd8, 0x9c, 0xc4, 0x34, 0xf4, 0xd2, 0xd9, 0x91, 0x89, 0x27,
	0xfa, 0x89, 0x77, 0x86, 0x23, 0x69, 0xfd, 0xbc, 0xf4, 0xfd, 0xa1, 0xca, 0x40, 0xa4, 0x9f, 0x98,
	0xa1, 0x51, 0x55, 0x3f, 0x2f, 0x9d, 0x1d, 0x99, 0x78, 0xbc, 0x5d, 0x5c, 0xee, 0x79, 0x04, 0x71,
	0xa5, 0xfb, 0x11, 0xc4, 0x77, 0x34, 0x98, 0x54, 0x52, 0xd2, 0x0b, 0xe4, 0x37, 0x65, 0xbf, 0xdb,
	0x77, 0xb8, 0xfd, 0x6e, 0x29, 0x77, 0xbf, 0xfb, 0x83, 0x7e, 0x98, 0xbc, 0xb9, 0xd7, 0xf2, 0xfc,
	0xd4, 0x6a, 0xe5, 0x02, 0x0c, 0xad, 0xdb, 0x0e, 0x4d, 0xbf, 0x81, 0xd8, 0xb2, 0x1d, 0x2a, 0xee,
	0x83, 0xa3, 0xee, 0xff, 0x4b, 0xaa, 0xff, 0xeb, 0x92, 0xaa, 0x7e, 0x15, 0xa6, 0x54, 0xa7, 0x11,
	0xbe, 0x3c, 0x0f, 0xfd, 0x96, 0x19, 0xf2, 0x67, 0x4b, 0xa3, 0xdc, 0xa2, 0xec, 0xb7, 0x81, 0xff,
	0xea, 0xff, 0xd5, 0x07, 0xe4, 0x2e, 0xdd, 0x8d, 0xce, 0x98, 0x5f, 0xe5, 0x99, 0xb9, 0xb2, 0x50,
	0x2d, 0xf5, 0x5a, 0xa8, 0xbe, 0xd8, 0x76, 0xfd, 0x73, 0x30, 0xb8, 0xd2, 0xf4, 0xda, 0x6e, 0x28,
	0x36, 0x4f, 0xf8, 0x74, 0xcf, 0xc4, 0x96, 0xc2, 0xa7, 0x7b, 0x7c, 0x40, 0xbc, 0xda, 0x1e, 0xcc,
	0x5d, 0x6d, 0x9f, 0x81, 0xc1, 0x75, 0x4a, 0x99, 0xe4, 0xdc, 0x25, 0xf1, 0xa0, 0x91, 0x6d, 0x42,
	0xd8, 0x6e, 0x41, 0x74, 0xb1, 0x68, 0x64, 0xfb, 0xb6, 0x21, 0x24, 0x8d, 0xd1, 0xc8, 0xb6, 0x6b,
	0xac, 0x4d, 0x5f, 0x83, 0x49, 0x45, 0xfd, 0xc9, 0x7b, 0xe1, 0x0d, 0xd7, 0xa5, 0x3e, 0xee, 0x33,
	0xa4, 0xf7, 0xc2, 0x36, 0x6b, 0xac, 0xe3, 0x6e, 0x23, 0x01, 0xd0, 0x7f, 0xa8, 0x41, 0xf9, 0x16,
	0x0d, 0x23, 0x2c, 0x37, 0x68, 0x68, 0xda, 0xce, 0xab, 0x3c, 0x4b, 0x59, 0x93, 0x4d, 0xd9, 0x9f,
	0xbc, 0x23, 0x48, 0x4c, 0x59, 0xf8, 0x8e, 0x20, 0x1e, 0xa7, 0xdf, 0x81, 0xd9, 0x1c, 0x21, 0x7a,
	0xbf, 0x01, 0x10, 0x09, 0x39, 0x7d, 0x8e, 0xf6, 0x55, 0x3c, 0x97, 0xe3, 0xa7, 0xf6, 0x2b, 0x41,
	0xf0, 0x02, 0xb7, 0x8f, 0xcf, 0xae, 0x10, 0xfd, 0x1e, 0xcc, 0xa4, 0x89, 0xf7, 0x3e, 0x15, 0x94,
	0xc0, 0x33, 0xd2, 0x5c, 0x91, 0xef, 0x2c, 0x14, 0x71, 0x8a, 0xf7, 0xb0, 0xd1, 0xeb, 0xe1, 0x3c,
	0x36, 0xba, 0xbd, 0x1e, 0x96, 0xf9, 0xc8, 0x2e, 0xe3, 0xef, 0xc9, 0x48, 0x55, 0x57, 0xeb, 0x72,
	0xf1, 0x3a, 0x2b, 0xa7, 0x07, 0x65, 0x3b, 0xad, 0x7f, 0x09, 0xca, 0x59, 0x84, 0x82, 0xcd, 0x15,
	0x95, 0xcd, 0x72, 0x96, 0x4d, 0x3e, 0x80, 0x9f, 0x1e, 0x88, 0xa7, 0x1c, 0x16, 0xc7, 0x21, 0xf8,
	0xfd, 0xbe, 0x06, 0x73, 0xea, 0x75, 0xcf, 0x11, 0x30, 0x7d, 0x74, 0xb7, 0x20, 0x7f, 0xa9, 0xf1,
	0xd7, 0x6e, 0x59, 0xf6, 0x84, 0x0a, 0xd6, 0x54, 0x15, 0xcc, 0xe7, 0xdf, 0x49, 0x09, 0x35, 0xf0,
	0x3b, 0x47, 0xcf, 0x76, 0x55, 0x25, 0x1c, 0xdd, 0xda, 0xe4, 0xe7, 0x7d, 0x30, 0xbb, 0x62, 0x59,
	0x51, 0x94, 0x3e, 0xa0, 0x61, 0x68, 0xbb, 0xdb, 0x2f, 0x32, 0x6d, 0xc0, 0x4a, 0xab, 0xe5, 0x7b,
	0x4f, 0xe8, 0x8a, 0xc3, 0x1f, 0x64, 0x8b, 0x6b, 0x50, 0x93, 0xb7, 0x5a, 0x75, 0xd3, 0x71, 0x0c,
	0x09, 0x86, 0xbc, 0x03, 0x93, 0x11, 0xf5, 0x35, 0xd3, 0x71, 0x36, 0xcd, 0xc6, 0xe3, 0xf7, 0xfc,
	0xe8, 0xe1, 0xdb, 0xec, 0x41, 0xa7, 0x3a, 0x1d, 0xdd, 0x9e, 0xd6, 0x1b, 0xa2, 0xbf, 0xde, 0xf6,
	0x1d, 0x23, 0x6f, 0x14, 0x43, 0xf6, 0xd0, 0x37, 0xdd, 0x60, 0x8b, 0xfa, 0x32, 0xb2, 0xfe, 0x04,
	0x59, 0x28, 0xba, 0x53, 0xc8, 0x72, 0x46, 0x91, 0xdb, 0x30, 0xb9, 0x11, 0xac, 0x79, 0x6e, 0x68,
	0xc6, 0xa7, 0x20, 0x4c, 0xdf, 0x03, 0x28, 0x54, 0xe5, 0xa0, 0x53, 0x9d, 0xb1, 0x83, 0x7a, 0x83,
	0xf7, 0x47, 0x07, 0x27, 0xa8, 0xfc, 0xbc, 0x61, 0xfa, 0x55, 0xa8, 0xe4, 0x29, 0xba, 0xc7, 0x95,
	0xef, 0xcf, 0xfb, 0x60, 0x5e, 0x3c, 0xc5, 0xc8, 0x37, 0xd1, 0x33, 0x3e, 0x28, 0x52, 0xed, 0x53,
	0x7a, 0x7e, 0xfb, 0xf4, 0x1f, 0xa5, 0x7d, 0x06, 0x8e, 0xd2, 0x3e, 0x83, 0xcf, 0x67, 0x9f, 0x2a,
	0x9c, 0x2a, 0x50, 0x74, 0xfc, 0x74, 0x7e, 0x5e, 0xdc, 0x99, 0x1f, 0x85, 0x25, 0x18, 0xbd, 0x02,
	0x74, 0xc9, 0x53, 0x7d, 0x69, 0xfe, 0xcc, 0x8f, 0xcc, 0x67, 0x78, 0x72, 0xf3, 0x08, 0x2a, 0x79,
	0xe8, 0x84, 0xff, 0x7d, 0x4e, 0x99, 0xc6, 0xe6, 0x94, 0xa4, 0xa4, 0x0e, 0xc9, 0x4c, 0x65, 0xff,
	0xd8, 0x07, 0x27, 0x25, 0xcf, 0x7e, 0xb7, 0xed, 0x85, 0xe6, 0xab, 0x5c, 0x77, 0x5e, 0x06, 0x40,
	0x9a, 0xf7, 0xd9, 0xea, 0x49, 0x9c, 0xd1, 0xa3, 0x4b, 0x7f, 0xc0, 0x5a, 0xeb, 0x2d, 0x5c, 0x60,
	0x19, 0x12, 0x0c, 0xb9, 0x06, 0xa3, 0xd1, 0xaf, 0xb7, 0xbd, 0xb6, 0x2f, 0x8e, 0xeb, 0xf1, 0x64,
	0x3c, 0x19, 0xb3, 0xe3, 0xb5, 0x7d, 0x43, 0x81, 0x23, 0x57, 0x60, 0x24, 0xfa, 0x7d, 0xc3, 0xdc,
	0x17, 0x4b, 0x4f, 0x9c, 0xa9, 0x92, 0x61, 0x96, 0xb9, 0x6f, 0xc8, 0x50, 0x58, 0x86, 0x23, 0x62,
	0xeb, 0x3e, 0xf5, 0x03, 0xcf, 0x45, 0x07, 0x1d, 0x10, 0x65, 0x38, 0x51, 0xd4, 0xb5, 0xb0, 0xcb,
	0x48, 0x81, 0xea, 0xcb, 0x50, 0xce, 0xaa, 0xb6, 0x47, 0xca, 0xf8, 0x6b, 0x0d, 0x2a, 0xaa, 0x67,
	0x29, 0x26, 0x79, 0xe6, 0x84, 0x81, 0x16, 0x2c, 0x3d, 0xb3, 0x05, 0xfb, 0x0f, 0xbf, 0xba, 0x3a,
	0x05, 0x73, 0xb9, 0x0c, 0x8b, 0x40, 0xf8, 0x35, 0xb1, 0xa0, 0xe8, 0xe2, 0x60, 0x2f, 0x75, 0xf1,
	0xf7, 0x45, 0x98, 0xcd, 0xa1, 0x5f, 0x74, 0xab, 0x9e, 0x5a, 0xc9, 0x2a, 0xa3, 0x72, 0x96, 0x5f,
	0xdf, 0xed, 0x83, 0x39, 0xc9, 0xc4, 0x8f, 0x76, 0xec, 0x90, 0x3a, 0x76, 0x10, 0xbe, 0xca, 0x08,
	0x92, 0xf6, 0x62, 0xa5, 0xe7, 0xbf, 0x5d, 0xec, 0xcf, 0xdd, 0x50, 0xc5, 0x4f, 0x10, 0x07, 0x9e,
	0xed, 0x09, 0xe2, 0x35, 0x98, 0xcf, 0x57, 0x4b, 0x0f, 0xef, 0xff, 0x81, 0x06, 0x0b, 0xaa, 0x33,
	0x65, 0x54, 0xfa, 0x31, 0x8c, 0x80, 0xd3, 0x50, 0x2d, 0x64, 0x5a, 0x44, 0xc1, 0x63, 0xb1, 0xae,
	0xec, 0xe1, 0x28, 0x47, 0xf2, 0x38, 0x4b, 0x6f, 0xf0, 0x8a, 0x8c, 0x62, 0xf5, 0xaf, 0xaa, 0x6e,
	0x7f, 0xba, 0xc8, 0xed, 0xe3, 0x91, 0x39, 0xae, 0xff, 0x54, 0x83, 0x39, 0x75, 0xca, 0xbd, 0xef,
	0x39, 0x76, 0x23, 0x7e, 0x39, 0xbc, 0x8a, 0x6e, 0x29, 0x4d, 0x4b, 0x95, 0xbc, 0x69, 0x89, 0x8f,
	0xe1, 0xb7, 0xb2, 0xa6, 0x65, 0xd5, 0x71, 0x66, 0x8a, 0x06, 0x32, 0x1c, 0x37, 0xa8, 0x83, 0x38,
	0xfa, 0x0e, 0x87, 0xc3, 0xa2, 0x8e, 0xc0, 0x21, 0x06, 0x92, 0x77, 0x00, 0x38, 0x9b, 0x88, 0xa6,
	0xd4, 0x13, 0x0d, 0x2e, 0xda, 0xc5, 0x09, 0x2a, 0x62, 0x92, 0x86, 0xeb, 0x0b, 0xe9, 0xf5, 0x5c,
	0x24, 0xb3, 0x30, 0xf3, 0x8e, 0x9a, 0x6c, 0x54, 0x8d, 0x1c, 0xa9, 0x8d, 0xdf, 0x87, 0x4a, 0x1e,
	0xa5, 0x78, 0x43, 0xd9, 0x7f, 0x48, 0xcd, 0xa7, 0xd7, 0x03, 0xeb, 0xf8, 0x18, 0xfa, 0x0e, 0x0d,
	0x02, 0xb6, 0xcd, 0x10, 0x9c, 0x7f, 0x4a, 0x41, 0x37, 0x29, 0xa3, 0x13, 0x90, 0x19, 0x3c, 0x6f,
	0x00, 0x91, 0xf1, 0xf4, 0x88, 0xfb, 0x8d, 0xe8, 0xc9, 0xf2, 0x8b, 0x13, 0x3e, 0x09, 0xd3, 0x29,
	0x54, 0xc2, 0x36, 0x7f, 0x2e, 0x1e, 0xf3, 0xa5, 0x48, 0x7c, 0x3c, 0x9f, 0x45, 0xfe, 0x8e, 0x78,
	0x06, 0x96, 0x56, 0xe0, 0x55, 0x35, 0x72, 0x73, 0x35, 0xf2, 0xf2, 0x1e, 0x7f, 0x2d, 0xff, 0xdb,
	0x67, 0x61, 0x70, 0x25, 0x78, 0x60, 0x87, 0x94, 0xbc, 0x0f, 0x43, 0xd1, 0xf7, 0x01, 0xc8, 0x9c,
	0xfc, 0x1a, 0x2d, 0xf5, 0xe9, 0x87, 0xca, 0x7c, 0x7e, 0xa7, 0xb0, 0xca, 0xc4, 0xd7, 0x7f, 0xfc,
	0x2f, 0xdf, 0xe9, 0x1b, 0xd6, 0x8f, 0xd5, 0x7c, 0xec, 0x22, 0x0d, 0x80, 0xa4, 0x1c, 0x9a, 0x28,
	0xef, 0xdc, 0x32, 0xb5, 0xeb, 0x95, 0x85, 0xa2, 0x6e, 0x81, 0x7d, 0x06, 0xb1, 0x1f, 0xd7, 0xc7,
	0x05, 0xf6, 0x9a, 0xc9, 0xd1, 0xfe, 0xba, 0x06, 0x53, 0x79, 0xa5, 0xde, 0xe4, 0x75, 0x95, 0xd9,
	0xc2, 0x4a, 0xf3, 0xca, 0x52, 0x6f, 0x40, 0xc1, 0xc3, 0x29, 0xe4, 0xe1, 0xa4, 0x3e, 0xad, 0xf2,
	0x50, 0xf3, 0x69, 0x40, 0x5d, 0x8b, 0xb8, 0xbc, 0xa0, 0x50, 0x2a, 0xe3, 0x22, 0xba, 0x8c, 0x3b,
	0xbf, 0x10, 0xbe, 0x72, 0xa6, 0x2b, 0x8c, 0x20, 0x4d, 0x90, 0xf4, 0xa8, 0x0e, 0xb5, 0x86, 0x67,
	0xd1, 0x1a, 0xcb, 0xe4, 0xe4, 0x36, 0x0c, 0xe0, 0xd7, 0x10, 0x48, 0x59, 0xc1, 0x20, 0x7d, 0xd5,
	0xa1, 0x32, 0x9b, 0xd3, 0x23, 0x30, 0x8e, 0x23, 0xc6, 0x21, 0x7d, 0xb0, 0xe6, 0x20, 0x92, 0xfb,
	0x30, 0xc8, 0xbf, 0x66, 0x40, 0xd2, 0x83, 0x92, 0x4f, 0x1e, 0x54, 0x2a, 0x79, 0x5d, 0x19, 0xfb,
	0x3b, 0x1c, 0x8f, 0x09, 0x90, 0x7c, 0xba, 0x40, 0xb5, 0x7f, 0xe6, 0x2b, 0x09, 0xaa, 0xfd, 0x73,
	0xbe, 0x78, 0x30, 0x85, 0xd8, 0xc7, 0xf5, 0xd1, 0xda, 0x16, 0x76, 0xd6, 0x5a, 0x0c, 0xa9, 0xc9,
	0x5d, 0x8c, 0xd7, 0x72, 0x67, 0x5d, 0x4c, 0xa9, 0x70, 0xcf, 0xba, 0x58, 0xaa, 0x04, 0x3c, 0x21,
	0xd1, 0x0e, 0xa8, 0x5f, 0xb3, 0x39, 0xd2, 0x6f, 0x68, 0x30, 0x99, 0x53, 0xc9, 0x4d, 0xce, 0xcb,
	0xd8, 0x8a, 0x4b, 0xc7, 0x2b, 0xaf, 0xf7, 0x84, 0x13, 0xe4, 0x17, 0x90, 0x7c, 0x59, 0x9f, 0xe1,
	0xe4, 0x3d, 0x06, 0x80, 0x52, 0xa2, 0x7f, 0x85, 0xe4, 0xeb, 0x1a, 0x90, 0x6c, 0x91, 0x37, 0x39,
	0xd7, 0x05, 0x7f, 0x52, 0x70, 0x5d, 0x39, 0xdf, 0x0b, 0x2c, 0xe3, 0xe3, 0x12, 0x17, 0xcb, 0x5b,
	0xa6, 0x60, 0xe2, 0xfb, 0x1a, 0x54, 0x8a, 0x0b, 0x13, 0xc9, 0x45, 0x45, 0xc5, 0xbd, 0x6a, 0x37,
	0x2b, 0x97, 0x0e, 0x0b, 0x2e, 0x98, 0xab, 0x22, 0x73, 0xb3, 0xfa, 0x49, 0x99, 0x39, 0xdb, 0xdd,
	0xf2, 0x6a, 0x7c, 0x9a, 0x27, 0x7f, 0xac, 0x45, 0xd3, 0x7a, 0x7e, 0x01, 0x21, 0xa9, 0x75, 0xa1,
	0x98, 0x57, 0x3a, 0x59, 0xb9, 0x7c, 0xf8, 0x01, 0xdd, 0x98, 0xf4, 0x3d, 0x87, 0x46, 0x4c, 0x3e,
	0x86, 0x11, 0xa9, 0x50, 0x9e, 0x2c, 0xa8, 0xf9, 0x27, 0x5d, 0xa7, 0x5f, 0xa9, 0x16, 0xf6, 0x0b,
	0x82, 0x73, 0x48, 0x70, 0x5a, 0x9f, 0xe4, 0x04, 0x9b, 0x54, 0xf6, 0x9a, 0x6d, 0x80, 0xa4, 0x72,
	0x5d, 0x8d, 0x90, 0x4c, 0x55, 0x7e, 0x65, 0xa1, 0xa8, 0x5b, 0x50, 0xaa, 0x20, 0xa5, 0x29, 0x9d,
	0xc4, 0x94, 0x12, 0xcf, 0xb8, 0x0b, 0x03, 0x58, 0xa2, 0xae, 0x66, 0x23, 0xb9, 0x8a, 0x5d, 0xcd,
	0x46, 0x4a, 0x3d, 0xbb, 0x7e, 0x1c, 0x31, 0x03, 0x19, 0x8a, 0x30, 0x93, 0x2f, 0x47, 0x0f, 0xb8,
	0xef, 0x50, 0x75, 0x56, 0x4a, 0x95, 0xb0, 0xab, 0xb3, 0x52, 0xa6, 0x64, 0xfc, 0x24, 0x22, 0x3e,
	0xa1, 0x4f, 0xc4, 0x2c, 0x0b, 0x2b, 0x78, 0x30, 0x2a, 0x97, 0x85, 0x13, 0x45, 0xcd, 0x39, 0x55,
	0xe6, 0x95, 0xc5, 0x62, 0x00, 0x41, 0x6b, 0x1e, 0x69, 0xcd, 0xe8, 0x53, 0xaa, 0x21, 0x9e, 0x20,
	0x2c, 0xf9, 0x15, 0x18, 0x8a, 0x4a, 0xc2, 0x55, 0x81, 0x52, 0x55, 0xe8, 0xaa, 0x40, 0xe9, 0x2a,
	0xf2, 0x68, 0x26, 0x20, 0xc0, 0x89, 0xe0, 0x4c, 0xf0, 0x4d, 0x51, 0x2a, 0x92, 0xa9, 0xdc, 0x26,
	0x4b, 0x69, 0x5c, 0x45, 0xd5, 0xdf, 0x95, 0x0b, 0x87, 0x80, 0x54, 0xe5, 0x24, 0x42, 0x4e, 0xf4,
	0xed, 0x16, 0xf5, 0x9b, 0x9c, 0x99, 0x2f, 0xc1, 0x70, 0x5c, 0x4e, 0x43, 0x14, 0x59, 0xd2, 0x75,
	0x83, 0x95, 0x53, 0x05, 0xbd, 0x82, 0xce, 0x24, 0xd2, 0x19, 0xd3, 0x47, 0xc4, 0x57, 0xa9, 0x6a,
	0xa6, 0x65, 0x11, 0x1b, 0x46, 0xe5, 0x9a, 0x38, 0xd5, 0x6e, 0x39, 0xc5, 0x7c, 0xaa, 0xdd, 0x72,
	0xcb, 0xe9, 0x92, 0xb5, 0x85, 0xa0, 0x23, 0x5c, 0xc4, 0x86, 0x51, 0xb9, 0x3a, 0x87, 0xa4, 0x22,
	0x31, 0x53, 0x80, 0xa7, 0x92, 0xca, 0x2d, 0xac, 0xcb, 0x90, 0xb2, 0xb0, 0xc8, 0x92, 0x4d, 0x64,
	0xc9, 0x6d, 0x85, 0x1a, 0xa6, 0x99, 0x42, 0x3c, 0x35, 0x4c, 0xb3, 0xd5, 0x72, 0xd2, 0x44, 0x26,
	0x88, 0xa0, 0x5d, 0x6c, 0x4e, 0x82, 0xd7, 0x73, 0x66, 0x49, 0x28, 0xd5, 0xa2, 0x59, 0x12, 0xa9,
	0x32, 0xd0, 0xc4, 0x05, 0x22, 0xd3, 0xb4, 0xec, 0xda, 0x63, 0xba, 0xcf, 0x49, 0x51, 0x74, 0x01,
	0x41, 0x29, 0xed, 0x02, 0x2a, 0xa1, 0x53, 0x05, 0xbd, 0x99, 0xdc, 0x96, 0xa2, 0xc3, 0x5c, 0xe1,
	0x03, 0x18, 0x95, 0x6b, 0x54, 0x55, 0xfb, 0xe4, 0xd4, 0xc0, 0xaa, 0xf6, 0xc9, 0x2d, 0x6f, 0x4d,
	0x26, 0xe1, 0x14, 0x3d, 0x61, 0xa7, 0x0f, 0x22, 0xef, 0xcb, 0x23, 0x99, 0x53, 0x68, 0x9c, 0xe7,
	0x7d, 0x87, 0x25, 0x29, 0xbc, 0x90, 0xc2, 0xa8, 0x5c, 0x18, 0xa8, 0x92, 0xcc, 0xa9, 0x49, 0x54,
	0x49, 0xe6, 0xd5, 0x14, 0x2a, 0xab, 0x49, 0xdb, 0xe5, 0x36, 0x73, 0x61, 0x4c, 0xa9, 0x82, 0x23,
	0x8b, 0xb9, 0xc1, 0x29, 0xd5, 0xa1, 0x55, 0x4e, 0x77, 0x81, 0x10, 0x94, 0xca, 0x48, 0x89, 0xe8,
	0xc7, 0x23, 0xe1, 0x90, 0x20, 0x33, 0xde, 0x87, 0x70, 0x3c, 0x5d, 0xfa, 0x46, 0xce, 0x14, 0xc5,
	0x8f, 0x4c, 0xf5, 0x6c, 0x77, 0xa0, 0x22, 0xc7, 0x41, 0xc2, 0xc2, 0x8a, 0x3e, 0x8c, 0xab, 0x77,
	0x83, 0xe4, 0x74, 0x7e, 0x48, 0xc9, 0x74, 0xf5, 0x6e, 0x20, 0x82, 0xea, 0x2c, 0x52, 0x9d, 0xd4,
	0x4f, 0x28, 0x54, 0x51, 0xbf, 0x4f, 0xf0, 0x13, 0x2e, 0x49, 0x3d, 0x8b, 0xaa, 0xdf, 0xbc, 0x3a,
	0x1c, 0x55, 0xbf, 0xb9, 0xc5, 0x30, 0xfa, 0x22, 0x12, 0xac, 0xe8, 0xe5, 0xb4, 0x7e, 0x19, 0x94,
	0x08, 0x92, 0x11, 0xa9, 0x40, 0x44, 0x5d, 0x6d, 0x64, 0xeb, 0x61, 0xd4, 0xd5, 0x46, 0x5e, 0x65,
	0xc9, 0x69, 0xa4, 0x38, 0xa7, 0xcf, 0xe6, 0x52, 0xdc, 0xb1, 0x2d, 0x16, 0x24, 0x23, 0x52, 0xe1,
	0x13, 0xc9, 0xe6, 0x92, 0x2e, 0x24, 0x73, 0x2a, 0xa6, 0x7a, 0x90, 0x44, 0xed, 0x7a, 0x00, 0x49,
	0x65, 0x88, 0x9a, 0xdc, 0x32, 0x65, 0x30, 0x6a, 0x72, 0xcb, 0x16, 0x94, 0xe8, 0x3a, 0xd2, 0x9b,
	0xd7, 0x2b, 0xb9, 0xf4, 0xb0, 0xb4, 0x84, 0xb4, 0x61, 0x54, 0xae, 0xd6, 0x50, 0xa3, 0x32, 0xa7,
	0xd8, 0x44, 0x8d, 0xca, 0xbc, 0x42, 0x8f, 0x1e, 0x64, 0x1b, 0x6c, 0x08, 0xa1, 0x00, 0x49, 0xc5,
	0x85, 0x2a, 0x67, 0xa6, 0x06, 0x44, 0x95, 0x33, 0x5b, 0xa8, 0x51, 0x10, 0x9c, 0x5b, 0x94, 0x92,
	0xaf, 0xf0, 0xb9, 0x82, 0x3f, 0x01, 0xc9, 0xce, 0x15, 0xca, 0xfb, 0xb9, 0xec, 0x5c, 0xa1, 0xbe,
	0x94, 0x92, 0xb6, 0x14, 0x32, 0x99, 0x70, 0x0f, 0x2d, 0xb7, 0x4c, 0x1c, 0x18, 0x91, 0xde, 0x0a,
	0xaa, 0xde, 0x92, 0x7d, 0xd7, 0xac, 0x7a, 0x4b, 0xce, 0x23, 0x43, 0x69, 0x15, 0x96, 0x43, 0x8e,
	0x25, 0x70, 0xf9, 0x39, 0x97, 0x6a, 0xb7, 0x9c, 0xd7, 0x81, 0xaa, 0xdd, 0xf2, 0x5e, 0x82, 0x65,
	0x13, 0x78, 0x44, 0x90, 0x22, 0x34, 0x0b, 0x07, 0xe9, 0x2d, 0x92, 0x2a, 0x60, 0xf6, 0x8d, 0x98,
	0x2a, 0x60, 0xce, 0x23, 0xa6, 0x82, 0x70, 0x88, 0x6e, 0x7f, 0x31, 0xe8, 0xbf, 0xa1, 0x61, 0x4d,
	0x90, 0xfa, 0xe8, 0x87, 0x9c, 0x4d, 0xf9, 0x43, 0xee, 0xc3, 0xa6, 0xca, 0xb9, 0x1e, 0x50, 0x82,
	0x8b, 0xb3, 0xc8, 0xc5, 0x82, 0x3e, 0x9f, 0xcf, 0x45, 0xb8, 0x57, 0xdb, 0xa6, 0x21, 0xcb, 0xb4,
	0xea, 0x83, 0x1d, 0x92, 0x4e, 0x6a, 0xd9, 0xa7, 0x37, 0x6a, 0xa6, 0xcd, 0x7f, 0xef, 0x93, 0xcd,
	0xb4, 0x26, 0xeb, 0x46, 0x9a, 0x4f, 0xf8, 0x39, 0x8c, 0x4c, 0xb4, 0x20, 0x77, 0x2b, 0x54, 0xcf,
	0x74, 0x85, 0xc9, 0xec, 0x80, 0x14, 0xb2, 0xe8, 0x5a, 0x1f, 0xf2, 0x6f, 0x3e, 0xc9, 0xef, 0x67,
	0x48, 0x01, 0x52, 0x55, 0xe3, 0x67, 0xbb, 0x03, 0x15, 0xcd, 0x68, 0xfc, 0x29, 0x0a, 0xa7, 0xfd,
	0x9b, 0xe2, 0xf3, 0x01, 0xe9, 0x97, 0x2b, 0xea, 0x31, 0x58, 0x97, 0xf7, 0x3a, 0x95, 0xa5, 0xde,
	0x80, 0x5d, 0xe7, 0x1c, 0x99, 0x9b, 0x8f, 0x34, 0x3c, 0x33, 0x4e, 0xdd, 0x58, 0xa7, 0x8e, 0x2a,
	0x8a, 0x5e, 0xbb, 0xa4, 0x8e, 0x2a, 0x0a, 0xdf, 0x6a, 0x14, 0xf0, 0x11, 0x70, 0x28, 0x0c, 0x83,
	0xdf, 0xd2, 0xa2, 0x23, 0xe4, 0x34, 0x2b, 0x4b, 0x39, 0x9b, 0x82, 0x7c, 0x6e, 0x2e, 0x1c, 0x02,
	0x52, 0x30, 0x74, 0x06, 0x19, 0x3a, 0xa5, 0xcf, 0xe5, 0x32, 0x24, 0x96, 0x73, 0x8c, 0xa7, 0xdc,
	0x07, 0x07, 0x64, 0x29, 0x67, 0x61, 0x73, 0x08, 0x9e, 0xba, 0xbf, 0x5e, 0xe8, 0xce, 0x93, 0x58,
	0x0f, 0x31, 0x7b, 0x65, 0x1f, 0x25, 0x90, 0xa2, 0x4c, 0xd0, 0xcd, 0x5e, 0xc5, 0x6f, 0x1b, 0x7a,
	0xd8, 0x8b, 0x45, 0xee, 0x47, 0xe2, 0xe3, 0x32, 0xf2, 0x5d, 0xad, 0x1a, 0x42, 0x05, 0x0f, 0x1c,
	0xd4, 0x10, 0x2a, 0xba, 0xaa, 0xd7, 0xcf, 0x23, 0x07, 0x8b, 0xfa, 0x42, 0x2e, 0x07, 0xf8, 0x78,
	0x20, 0xf2, 0x9b, 0xc9, 0x9c, 0x9b, 0x70, 0xf5, 0xcc, 0xaf, 0xf8, 0x6e, 0xbf, 0xf2, 0x7a, 0x4f,
	0x38, 0xc1, 0xd0, 0x05, 0x64, 0xe8, 0x8c, 0x7e, 0xba, 0x0b, 0x43, 0xc2, 0x46, 0xbf, 0xa1, 0x89,
	0x6f, 0xb2, 0x28, 0x1c, 0x65, 0x53, 0x47, 0x1e, 0x3f, 0xe7, 0x7a, 0x40, 0x09, 0x6e, 0x5e, 0x47,
	0x6e, 0x4e, 0xeb, 0xd5, 0x2e, 0xdc, 0x60, 0x7c, 0x7f, 0x57, 0x7c, 0x13, 0x24, 0x7d, 0xb9, 0xa8,
	0x66, 0x9b, 0x2e, 0xd7, 0xe9, 0x6a, 0xb6, 0xe9, 0x76, 0xc1, 0xac, 0x7f, 0x02, 0x99, 0x3a, 0xab,
	0xeb, 0xb9, 0x4c, 0xed, 0x46, 0xf0, 0x68, 0xb7, 0x3f, 0xd2, 0xe2, 0x2f, 0x73, 0x64, 0x58, 0xfb,
	0x44, 0xb1, 0x4d, 0x32, 0xdc, 0x7d, 0xf2, 0x50, 0xb0, 0x82, 0xc1, 0x8b, 0xc8, 0xe0, 0xeb, 0xfa,
	0xb9, 0x1e, 0x0c, 0x0a, 0x3b, 0xfe, 0x5e, 0xf4, 0x59, 0x8f, 0x0c, 0x87, 0x4b, 0x45, 0x56, 0xca,
	0xf0, 0x77, 0xe1, 0x10, 0x90, 0x82, 0xbb, 0x4f, 0x22, 0x77, 0xe7, 0xf4, 0x33, 0x3d, 0xb8, 0x43,
	0x0e, 0xbe, 0xa5, 0xc5, 0x1f, 0x1c, 0x52, 0xee, 0x16, 0x55, 0xbb, 0x76, 0xb9, 0x2b, 0xae, 0x2c,
	0xf5, 0x06, 0xec, 0xba, 0xda, 0x6d, 0x21, 0x50, 0x94, 0x2b, 0x3f, 0x8a, 0xbe, 0x06, 0xa4, 0x72,
	0x53, 0xe8, 0xce, 0x2a, 0x2f, 0xe7, 0x7b, 0x81, 0x75, 0xcd, 0x4b, 0x82, 0x13, 0xd4, 0xcb, 0x0e,
	0x40, 0x72, 0x05, 0x4a, 0xd2, 0x47, 0x16, 0xea, 0x35, 0xa4, 0xba, 0x1c, 0xce, 0xde, 0x9c, 0x66,
	0xe7, 0xf1, 0x26, 0x07, 0x40, 0x0f, 0x0e, 0x61, 0x4c, 0xb9, 0xf3, 0x24, 0x8b, 0x79, 0xa7, 0x9b,
	0x0a, 0xbd, 0xd3, 0x5d, 0x20, 0x8a, 0x56, 0xa8, 0x11, 0x49, 0xa1, 0x67, 0x87, 0x6f, 0xd8, 0x22,
	0x9a, 0x99, 0x05, 0x7d, 0x8a, 0x62, 0xb5, 0xb0, 0xbf, 0x68, 0x09, 0x1e, 0xd1, 0xc3, 0x17, 0x08,
	0xbf, 0xfa, 0x77, 0x3f, 0x5d, 0xd0, 0x7e, 0xf4, 0xd3, 0x05, 0xed, 0x9f, 0x7f, 0xba, 0xa0, 0x7d,
	0xfb, 0x67, 0x0b, 0xaf, 0xfd, 0xe8, 0x67, 0x0b, 0xaf, 0xfd, 0xe4, 0x67, 0x0b, 0xaf, 0x7d, 0x61,
	0xb5, 0x77, 0xd5, 0xc6, 0xd5, 0x3a, 0x7e, 0x9a, 0x1e, 0x6f, 0xc1, 0x38, 0x17, 0x17, 0xb7, 0xbd,
	0x6d, 0xef, 0x7a, 0x6b, 0x93, 0xff, 0xda, 0x1c, 0xc4, 0xfe, 0x2b, 0xff, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0xd0, 0xa1, 0x98, 0xb1, 0x4d, 0x5f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AsSiteClient is the client API for AsSite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AsSiteClient interface {
	//注册 新增一用户、一账户
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	//激活 激活码内有操作符：1 激活、2 改密码、3 改2FA；改FA流程第一次调用返回FACode，第二次调用验证FA通过后才能激活
	UserActive(ctx context.Context, in *UserActiveRequest, opts ...grpc.CallOption) (*UserActiveResponse, error)
	//重新发送一次激活码
	ReSendActivationCode(ctx context.Context, in *ReSendActivationCodeRequest, opts ...grpc.CallOption) (*ReSendActivationCodeResponse, error)
	//获取地区代码
	ListCountryCode(ctx context.Context, in *ListCountryCodeRequest, opts ...grpc.CallOption) (*ListCountryCodeResponse, error)
	//登录
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	//登出
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	//忘记密码
	ForgetPass(ctx context.Context, in *ForgetPassRequest, opts ...grpc.CallOption) (*ForgetPassResponse, error)
	//邀请用户 新增用户，但用户暂时是冻结的，必须激活
	UserInvite(ctx context.Context, in *UserInviteRequest, opts ...grpc.CallOption) (*UserInviteResponse, error)
	//申请重置其它用户的密码，系统将向该用户发邮件`激活码`
	ApplyResetOtherPass(ctx context.Context, in *ApplyResetOtherPassRequest, opts ...grpc.CallOption) (*ApplyResetOtherPassResponse, error)
	//申请重置其它用户的2FA，系统将向该用户发邮件`激活码`
	ApplyResetOther2FA(ctx context.Context, in *ApplyResetOther2FARequest, opts ...grpc.CallOption) (*ApplyResetOther2FAResponse, error)
	// 更新用户一般信息
	UpdateOtherUserGenericInfo(ctx context.Context, in *UpdateOtherUserGenericInfoRequest, opts ...grpc.CallOption) (*UpdateOtherUserGenericInfoResponse, error)
	//给用户分配权限/冻结/解冻
	UpdateOtherUserImportantInfo(ctx context.Context, in *UpdateOtherUserImportantInfoRequest, opts ...grpc.CallOption) (*UpdateOtherUserImportantInfoResponse, error)
	//立即重置自己的密码
	ResetMePass(ctx context.Context, in *ResetMePassRequest, opts ...grpc.CallOption) (*ResetMePassResponse, error)
	//立即重置自己的2FA, 第一次调用返回FACode,第二次调用验证通过才能重置
	ResetMe2FA(ctx context.Context, in *ResetMe2FARequest, opts ...grpc.CallOption) (*ResetMe2FAResponse, error)
	//获取登录用户自己的信息
	GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error)
	//更新登录用户自己的信息
	UpdateMe(ctx context.Context, in *UpdateMeRequest, opts ...grpc.CallOption) (*UpdateMeResponse, error)
	//验证自己的密码
	VerifyMePass(ctx context.Context, in *VerifyMePassRequest, opts ...grpc.CallOption) (*VerifyMePassResponse, error)
	//用户列表
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	//获取角色/权限列表
	ListRoleAndPermission(ctx context.Context, in *ListRoleAndPermissionRequest, opts ...grpc.CallOption) (*ListRoleAndPermissionResponse, error)
	//新增钱包
	AddWallet(ctx context.Context, in *AddWalletRequest, opts ...grpc.CallOption) (*AddWalletResponse, error)
	//更新钱包
	UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*UpdateWalletResponse, error)
	//移除钱包
	RemoveWallet(ctx context.Context, in *RemoveWalletRequest, opts ...grpc.CallOption) (*RemoveWalletResponse, error)
	//获取钱包列表
	ListWallet(ctx context.Context, in *ListWalletRequest, opts ...grpc.CallOption) (*ListWalletResponse, error)
	// 获取API_KEY列表
	ListApiKey(ctx context.Context, in *ListApiKeyRequest, opts ...grpc.CallOption) (*ListApiKeyResponse, error)
	//添加API_KEY
	AddApiKey(ctx context.Context, in *AddApiKeyRequest, opts ...grpc.CallOption) (*AddApiKeyResponse, error)
	//删除API_KEY
	DeleteApiKey(ctx context.Context, in *DeleteApiKeyRequest, opts ...grpc.CallOption) (*DeleteApiKeyResponse, error)
	//更新API_KEY
	UpdateApiKey(ctx context.Context, in *UpdateApiKeyRequest, opts ...grpc.CallOption) (*UpdateApiKeyResponse, error)
	//获取系统已经支持支持的Coin列表
	ListCoinInfo(ctx context.Context, in *ListCoinInfoRequest, opts ...grpc.CallOption) (*ListCoinInfoResponse, error)
	//钱包添加coin
	AddWalletCoin(ctx context.Context, in *AddWalletCoinRequest, opts ...grpc.CallOption) (*AddWalletCoinResponse, error)
	//钱包删除Coin
	RemoveWalletCoin(ctx context.Context, in *RemoveWalletCoinRequest, opts ...grpc.CallOption) (*RemoveWalletCoinResponse, error)
	//获取钱包已添加的Coin列表
	ListWalletCoin(ctx context.Context, in *ListWalletCoinRequest, opts ...grpc.CallOption) (*ListWalletCoinResponse, error)
	//钱包申请新地址
	GetNewAddress(ctx context.Context, in *GetNewAddressRequest, opts ...grpc.CallOption) (*GetNewAddressResponse, error)
	//钱包隐藏地址
	HideAddress(ctx context.Context, in *HideAddressRequest, opts ...grpc.CallOption) (*HideAddressResponse, error)
	//获取钱包指定coin的所有地址
	ListAddress(ctx context.Context, in *ListAddressRequest, opts ...grpc.CallOption) (*ListAddressResponse, error)
	//验证钱包指定coin的地址是否存在
	HasAddress(ctx context.Context, in *HasAddressRequest, opts ...grpc.CallOption) (*HasAddressResponse, error)
	//验证指定coin的地址是否合法有效
	CheckAddress(ctx context.Context, in *CheckAddressRequest, opts ...grpc.CallOption) (*CheckAddressResponse, error)
	//获取coin当前的最佳手续费率
	GetCoinFee(ctx context.Context, in *GetCoinFeeRequest, opts ...grpc.CallOption) (*GetCoinFeeResponse, error)
	//获取交易列表
	ListCoinTx(ctx context.Context, in *ListCoinTxRequest, opts ...grpc.CallOption) (*ListCoinTxResponse, error)
	//查询交易
	QueryCoinTx(ctx context.Context, in *QueryCoinTxRequest, opts ...grpc.CallOption) (*QueryCoinTxResponse, error)
	//导出交易列表
	ExportCoinTx(ctx context.Context, in *ExportCoinTxRequest, opts ...grpc.CallOption) (*ExportCoinTxResponse, error)
	//申请提现
	NewWithdraw(ctx context.Context, in *NewWithdrawRequest, opts ...grpc.CallOption) (*NewWithdrawResponse, error)
	//获取交易详细信息
	GetWithdrawDetail(ctx context.Context, in *GetWithdrawDetailRequest, opts ...grpc.CallOption) (*GetWithdrawDetailResponse, error)
	//获取钱包coin信息及资产余额
	GetWalletAsset(ctx context.Context, in *GetWalletAssetRequest, opts ...grpc.CallOption) (*GetWalletAssetResponse, error)
	//获取钱包资产余额列表
	ListWalletAsset(ctx context.Context, in *ListWalletAssetRequest, opts ...grpc.CallOption) (*ListWalletAssetResponse, error)
	//获取钱包详情列表
	ListWalletDetail(ctx context.Context, in *ListWalletDetailRequest, opts ...grpc.CallOption) (*ListWalletDetailResponse, error)
	//获取钱包详情列表
	ListWalletCoinDetail(ctx context.Context, in *ListWalletCoinDetailRequest, opts ...grpc.CallOption) (*ListWalletCoinDetailResponse, error)
	//添加钱包Coin参数设置
	AddWithdrawSetting(ctx context.Context, in *AddWithdrawSettingRequest, opts ...grpc.CallOption) (*AddWithdrawSettingResponse, error)
	//更新钱包Coin参数设置
	UpdateWithdrawSetting(ctx context.Context, in *UpdateWithdrawSettingRequest, opts ...grpc.CallOption) (*UpdateWithdrawSettingResponse, error)
	//移除钱包Coin参数设置
	RemoveWithdrawSetting(ctx context.Context, in *RemoveWithdrawSettingRequest, opts ...grpc.CallOption) (*RemoveWithdrawSettingResponse, error)
	//获取钱包Coin参数设置
	GetWithdrawSetting(ctx context.Context, in *GetWithdrawSettingRequest, opts ...grpc.CallOption) (*GetWithdrawSettingResponse, error)
	//增加钱包Coin提现限额设置
	AddWithdrawQuota(ctx context.Context, in *AddWithdrawQuotaRequest, opts ...grpc.CallOption) (*AddWithdrawQuotaResponse, error)
	//移除钱包Coin提现限额设置
	RemoveWithdrawQuota(ctx context.Context, in *RemoveWithdrawQuotaRequest, opts ...grpc.CallOption) (*RemoveWithdrawQuotaResponse, error)
	//获取钱包Coin提现限额设置列表
	ListWithdrawQuota(ctx context.Context, in *ListWithdrawQuotaRequest, opts ...grpc.CallOption) (*ListWithdrawQuotaResponse, error)
	//增加钱包Coin提现白名单设置
	AddWithdrawWhitelist(ctx context.Context, in *AddWithdrawWhitelistRequest, opts ...grpc.CallOption) (*AddWithdrawWhitelistResponse, error)
	//移除钱包Coin提现白名单设置
	RemoveWithdrawWhitelist(ctx context.Context, in *RemoveWithdrawWhitelistRequest, opts ...grpc.CallOption) (*RemoveWithdrawWhitelistResponse, error)
	//获取钱包Coin提现白名单设置列表
	ListWithdrawWhitelist(ctx context.Context, in *ListWithdrawWhitelistRequest, opts ...grpc.CallOption) (*ListWithdrawWhitelistResponse, error)
	//更新钱包Coin策略参数
	UpdateWithdrawPolicy(ctx context.Context, in *UpdateWithdrawPolicyRequest, opts ...grpc.CallOption) (*UpdateWithdrawPolicyResponse, error)
	//获取钱包Coin策略参数设置列表
	ListWithdrawPolicy(ctx context.Context, in *ListWithdrawPolicyRequest, opts ...grpc.CallOption) (*ListWithdrawPolicyResponse, error)
	//增加推送消息
	AddMessage(ctx context.Context, in *AddMessageRequest, opts ...grpc.CallOption) (*AddMessageResponse, error)
	//更新推送消息
	UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error)
	//获取推送消息列表
	ListMessage(ctx context.Context, in *ListMessageRequest, opts ...grpc.CallOption) (*ListMessageResponse, error)
}

type asSiteClient struct {
	cc *grpc.ClientConn
}

func NewAsSiteClient(cc *grpc.ClientConn) AsSiteClient {
	return &asSiteClient{cc}
}

func (c *asSiteClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) UserActive(ctx context.Context, in *UserActiveRequest, opts ...grpc.CallOption) (*UserActiveResponse, error) {
	out := new(UserActiveResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/UserActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ReSendActivationCode(ctx context.Context, in *ReSendActivationCodeRequest, opts ...grpc.CallOption) (*ReSendActivationCodeResponse, error) {
	out := new(ReSendActivationCodeResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ReSendActivationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListCountryCode(ctx context.Context, in *ListCountryCodeRequest, opts ...grpc.CallOption) (*ListCountryCodeResponse, error) {
	out := new(ListCountryCodeResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListCountryCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ForgetPass(ctx context.Context, in *ForgetPassRequest, opts ...grpc.CallOption) (*ForgetPassResponse, error) {
	out := new(ForgetPassResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ForgetPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) UserInvite(ctx context.Context, in *UserInviteRequest, opts ...grpc.CallOption) (*UserInviteResponse, error) {
	out := new(UserInviteResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/UserInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ApplyResetOtherPass(ctx context.Context, in *ApplyResetOtherPassRequest, opts ...grpc.CallOption) (*ApplyResetOtherPassResponse, error) {
	out := new(ApplyResetOtherPassResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ApplyResetOtherPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ApplyResetOther2FA(ctx context.Context, in *ApplyResetOther2FARequest, opts ...grpc.CallOption) (*ApplyResetOther2FAResponse, error) {
	out := new(ApplyResetOther2FAResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ApplyResetOther2FA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) UpdateOtherUserGenericInfo(ctx context.Context, in *UpdateOtherUserGenericInfoRequest, opts ...grpc.CallOption) (*UpdateOtherUserGenericInfoResponse, error) {
	out := new(UpdateOtherUserGenericInfoResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/UpdateOtherUserGenericInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) UpdateOtherUserImportantInfo(ctx context.Context, in *UpdateOtherUserImportantInfoRequest, opts ...grpc.CallOption) (*UpdateOtherUserImportantInfoResponse, error) {
	out := new(UpdateOtherUserImportantInfoResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/UpdateOtherUserImportantInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ResetMePass(ctx context.Context, in *ResetMePassRequest, opts ...grpc.CallOption) (*ResetMePassResponse, error) {
	out := new(ResetMePassResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ResetMePass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ResetMe2FA(ctx context.Context, in *ResetMe2FARequest, opts ...grpc.CallOption) (*ResetMe2FAResponse, error) {
	out := new(ResetMe2FAResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ResetMe2FA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error) {
	out := new(GetMeResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/GetMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) UpdateMe(ctx context.Context, in *UpdateMeRequest, opts ...grpc.CallOption) (*UpdateMeResponse, error) {
	out := new(UpdateMeResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/UpdateMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) VerifyMePass(ctx context.Context, in *VerifyMePassRequest, opts ...grpc.CallOption) (*VerifyMePassResponse, error) {
	out := new(VerifyMePassResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/VerifyMePass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListRoleAndPermission(ctx context.Context, in *ListRoleAndPermissionRequest, opts ...grpc.CallOption) (*ListRoleAndPermissionResponse, error) {
	out := new(ListRoleAndPermissionResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListRoleAndPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) AddWallet(ctx context.Context, in *AddWalletRequest, opts ...grpc.CallOption) (*AddWalletResponse, error) {
	out := new(AddWalletResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/AddWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*UpdateWalletResponse, error) {
	out := new(UpdateWalletResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/UpdateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) RemoveWallet(ctx context.Context, in *RemoveWalletRequest, opts ...grpc.CallOption) (*RemoveWalletResponse, error) {
	out := new(RemoveWalletResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/RemoveWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListWallet(ctx context.Context, in *ListWalletRequest, opts ...grpc.CallOption) (*ListWalletResponse, error) {
	out := new(ListWalletResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListApiKey(ctx context.Context, in *ListApiKeyRequest, opts ...grpc.CallOption) (*ListApiKeyResponse, error) {
	out := new(ListApiKeyResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) AddApiKey(ctx context.Context, in *AddApiKeyRequest, opts ...grpc.CallOption) (*AddApiKeyResponse, error) {
	out := new(AddApiKeyResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/AddApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) DeleteApiKey(ctx context.Context, in *DeleteApiKeyRequest, opts ...grpc.CallOption) (*DeleteApiKeyResponse, error) {
	out := new(DeleteApiKeyResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/DeleteApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) UpdateApiKey(ctx context.Context, in *UpdateApiKeyRequest, opts ...grpc.CallOption) (*UpdateApiKeyResponse, error) {
	out := new(UpdateApiKeyResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/UpdateApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListCoinInfo(ctx context.Context, in *ListCoinInfoRequest, opts ...grpc.CallOption) (*ListCoinInfoResponse, error) {
	out := new(ListCoinInfoResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListCoinInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) AddWalletCoin(ctx context.Context, in *AddWalletCoinRequest, opts ...grpc.CallOption) (*AddWalletCoinResponse, error) {
	out := new(AddWalletCoinResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/AddWalletCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) RemoveWalletCoin(ctx context.Context, in *RemoveWalletCoinRequest, opts ...grpc.CallOption) (*RemoveWalletCoinResponse, error) {
	out := new(RemoveWalletCoinResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/RemoveWalletCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListWalletCoin(ctx context.Context, in *ListWalletCoinRequest, opts ...grpc.CallOption) (*ListWalletCoinResponse, error) {
	out := new(ListWalletCoinResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListWalletCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) GetNewAddress(ctx context.Context, in *GetNewAddressRequest, opts ...grpc.CallOption) (*GetNewAddressResponse, error) {
	out := new(GetNewAddressResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/GetNewAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) HideAddress(ctx context.Context, in *HideAddressRequest, opts ...grpc.CallOption) (*HideAddressResponse, error) {
	out := new(HideAddressResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/HideAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListAddress(ctx context.Context, in *ListAddressRequest, opts ...grpc.CallOption) (*ListAddressResponse, error) {
	out := new(ListAddressResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) HasAddress(ctx context.Context, in *HasAddressRequest, opts ...grpc.CallOption) (*HasAddressResponse, error) {
	out := new(HasAddressResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/HasAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) CheckAddress(ctx context.Context, in *CheckAddressRequest, opts ...grpc.CallOption) (*CheckAddressResponse, error) {
	out := new(CheckAddressResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/CheckAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) GetCoinFee(ctx context.Context, in *GetCoinFeeRequest, opts ...grpc.CallOption) (*GetCoinFeeResponse, error) {
	out := new(GetCoinFeeResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/GetCoinFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListCoinTx(ctx context.Context, in *ListCoinTxRequest, opts ...grpc.CallOption) (*ListCoinTxResponse, error) {
	out := new(ListCoinTxResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListCoinTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) QueryCoinTx(ctx context.Context, in *QueryCoinTxRequest, opts ...grpc.CallOption) (*QueryCoinTxResponse, error) {
	out := new(QueryCoinTxResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/QueryCoinTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ExportCoinTx(ctx context.Context, in *ExportCoinTxRequest, opts ...grpc.CallOption) (*ExportCoinTxResponse, error) {
	out := new(ExportCoinTxResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ExportCoinTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) NewWithdraw(ctx context.Context, in *NewWithdrawRequest, opts ...grpc.CallOption) (*NewWithdrawResponse, error) {
	out := new(NewWithdrawResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/NewWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) GetWithdrawDetail(ctx context.Context, in *GetWithdrawDetailRequest, opts ...grpc.CallOption) (*GetWithdrawDetailResponse, error) {
	out := new(GetWithdrawDetailResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/GetWithdrawDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) GetWalletAsset(ctx context.Context, in *GetWalletAssetRequest, opts ...grpc.CallOption) (*GetWalletAssetResponse, error) {
	out := new(GetWalletAssetResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/GetWalletAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListWalletAsset(ctx context.Context, in *ListWalletAssetRequest, opts ...grpc.CallOption) (*ListWalletAssetResponse, error) {
	out := new(ListWalletAssetResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListWalletAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListWalletDetail(ctx context.Context, in *ListWalletDetailRequest, opts ...grpc.CallOption) (*ListWalletDetailResponse, error) {
	out := new(ListWalletDetailResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListWalletDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListWalletCoinDetail(ctx context.Context, in *ListWalletCoinDetailRequest, opts ...grpc.CallOption) (*ListWalletCoinDetailResponse, error) {
	out := new(ListWalletCoinDetailResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListWalletCoinDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) AddWithdrawSetting(ctx context.Context, in *AddWithdrawSettingRequest, opts ...grpc.CallOption) (*AddWithdrawSettingResponse, error) {
	out := new(AddWithdrawSettingResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/AddWithdrawSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) UpdateWithdrawSetting(ctx context.Context, in *UpdateWithdrawSettingRequest, opts ...grpc.CallOption) (*UpdateWithdrawSettingResponse, error) {
	out := new(UpdateWithdrawSettingResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/UpdateWithdrawSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) RemoveWithdrawSetting(ctx context.Context, in *RemoveWithdrawSettingRequest, opts ...grpc.CallOption) (*RemoveWithdrawSettingResponse, error) {
	out := new(RemoveWithdrawSettingResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/RemoveWithdrawSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) GetWithdrawSetting(ctx context.Context, in *GetWithdrawSettingRequest, opts ...grpc.CallOption) (*GetWithdrawSettingResponse, error) {
	out := new(GetWithdrawSettingResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/GetWithdrawSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) AddWithdrawQuota(ctx context.Context, in *AddWithdrawQuotaRequest, opts ...grpc.CallOption) (*AddWithdrawQuotaResponse, error) {
	out := new(AddWithdrawQuotaResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/AddWithdrawQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) RemoveWithdrawQuota(ctx context.Context, in *RemoveWithdrawQuotaRequest, opts ...grpc.CallOption) (*RemoveWithdrawQuotaResponse, error) {
	out := new(RemoveWithdrawQuotaResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/RemoveWithdrawQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListWithdrawQuota(ctx context.Context, in *ListWithdrawQuotaRequest, opts ...grpc.CallOption) (*ListWithdrawQuotaResponse, error) {
	out := new(ListWithdrawQuotaResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListWithdrawQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) AddWithdrawWhitelist(ctx context.Context, in *AddWithdrawWhitelistRequest, opts ...grpc.CallOption) (*AddWithdrawWhitelistResponse, error) {
	out := new(AddWithdrawWhitelistResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/AddWithdrawWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) RemoveWithdrawWhitelist(ctx context.Context, in *RemoveWithdrawWhitelistRequest, opts ...grpc.CallOption) (*RemoveWithdrawWhitelistResponse, error) {
	out := new(RemoveWithdrawWhitelistResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/RemoveWithdrawWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListWithdrawWhitelist(ctx context.Context, in *ListWithdrawWhitelistRequest, opts ...grpc.CallOption) (*ListWithdrawWhitelistResponse, error) {
	out := new(ListWithdrawWhitelistResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListWithdrawWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) UpdateWithdrawPolicy(ctx context.Context, in *UpdateWithdrawPolicyRequest, opts ...grpc.CallOption) (*UpdateWithdrawPolicyResponse, error) {
	out := new(UpdateWithdrawPolicyResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/UpdateWithdrawPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListWithdrawPolicy(ctx context.Context, in *ListWithdrawPolicyRequest, opts ...grpc.CallOption) (*ListWithdrawPolicyResponse, error) {
	out := new(ListWithdrawPolicyResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListWithdrawPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) AddMessage(ctx context.Context, in *AddMessageRequest, opts ...grpc.CallOption) (*AddMessageResponse, error) {
	out := new(AddMessageResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/AddMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error) {
	out := new(UpdateMessageResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/UpdateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asSiteClient) ListMessage(ctx context.Context, in *ListMessageRequest, opts ...grpc.CallOption) (*ListMessageResponse, error) {
	out := new(ListMessageResponse)
	err := c.cc.Invoke(ctx, "/assite.api.AsSite/ListMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsSiteServer is the server API for AsSite service.
type AsSiteServer interface {
	//注册 新增一用户、一账户
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	//激活 激活码内有操作符：1 激活、2 改密码、3 改2FA；改FA流程第一次调用返回FACode，第二次调用验证FA通过后才能激活
	UserActive(context.Context, *UserActiveRequest) (*UserActiveResponse, error)
	//重新发送一次激活码
	ReSendActivationCode(context.Context, *ReSendActivationCodeRequest) (*ReSendActivationCodeResponse, error)
	//获取地区代码
	ListCountryCode(context.Context, *ListCountryCodeRequest) (*ListCountryCodeResponse, error)
	//登录
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	//登出
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	//忘记密码
	ForgetPass(context.Context, *ForgetPassRequest) (*ForgetPassResponse, error)
	//邀请用户 新增用户，但用户暂时是冻结的，必须激活
	UserInvite(context.Context, *UserInviteRequest) (*UserInviteResponse, error)
	//申请重置其它用户的密码，系统将向该用户发邮件`激活码`
	ApplyResetOtherPass(context.Context, *ApplyResetOtherPassRequest) (*ApplyResetOtherPassResponse, error)
	//申请重置其它用户的2FA，系统将向该用户发邮件`激活码`
	ApplyResetOther2FA(context.Context, *ApplyResetOther2FARequest) (*ApplyResetOther2FAResponse, error)
	// 更新用户一般信息
	UpdateOtherUserGenericInfo(context.Context, *UpdateOtherUserGenericInfoRequest) (*UpdateOtherUserGenericInfoResponse, error)
	//给用户分配权限/冻结/解冻
	UpdateOtherUserImportantInfo(context.Context, *UpdateOtherUserImportantInfoRequest) (*UpdateOtherUserImportantInfoResponse, error)
	//立即重置自己的密码
	ResetMePass(context.Context, *ResetMePassRequest) (*ResetMePassResponse, error)
	//立即重置自己的2FA, 第一次调用返回FACode,第二次调用验证通过才能重置
	ResetMe2FA(context.Context, *ResetMe2FARequest) (*ResetMe2FAResponse, error)
	//获取登录用户自己的信息
	GetMe(context.Context, *GetMeRequest) (*GetMeResponse, error)
	//更新登录用户自己的信息
	UpdateMe(context.Context, *UpdateMeRequest) (*UpdateMeResponse, error)
	//验证自己的密码
	VerifyMePass(context.Context, *VerifyMePassRequest) (*VerifyMePassResponse, error)
	//用户列表
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	//获取角色/权限列表
	ListRoleAndPermission(context.Context, *ListRoleAndPermissionRequest) (*ListRoleAndPermissionResponse, error)
	//新增钱包
	AddWallet(context.Context, *AddWalletRequest) (*AddWalletResponse, error)
	//更新钱包
	UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletResponse, error)
	//移除钱包
	RemoveWallet(context.Context, *RemoveWalletRequest) (*RemoveWalletResponse, error)
	//获取钱包列表
	ListWallet(context.Context, *ListWalletRequest) (*ListWalletResponse, error)
	// 获取API_KEY列表
	ListApiKey(context.Context, *ListApiKeyRequest) (*ListApiKeyResponse, error)
	//添加API_KEY
	AddApiKey(context.Context, *AddApiKeyRequest) (*AddApiKeyResponse, error)
	//删除API_KEY
	DeleteApiKey(context.Context, *DeleteApiKeyRequest) (*DeleteApiKeyResponse, error)
	//更新API_KEY
	UpdateApiKey(context.Context, *UpdateApiKeyRequest) (*UpdateApiKeyResponse, error)
	//获取系统已经支持支持的Coin列表
	ListCoinInfo(context.Context, *ListCoinInfoRequest) (*ListCoinInfoResponse, error)
	//钱包添加coin
	AddWalletCoin(context.Context, *AddWalletCoinRequest) (*AddWalletCoinResponse, error)
	//钱包删除Coin
	RemoveWalletCoin(context.Context, *RemoveWalletCoinRequest) (*RemoveWalletCoinResponse, error)
	//获取钱包已添加的Coin列表
	ListWalletCoin(context.Context, *ListWalletCoinRequest) (*ListWalletCoinResponse, error)
	//钱包申请新地址
	GetNewAddress(context.Context, *GetNewAddressRequest) (*GetNewAddressResponse, error)
	//钱包隐藏地址
	HideAddress(context.Context, *HideAddressRequest) (*HideAddressResponse, error)
	//获取钱包指定coin的所有地址
	ListAddress(context.Context, *ListAddressRequest) (*ListAddressResponse, error)
	//验证钱包指定coin的地址是否存在
	HasAddress(context.Context, *HasAddressRequest) (*HasAddressResponse, error)
	//验证指定coin的地址是否合法有效
	CheckAddress(context.Context, *CheckAddressRequest) (*CheckAddressResponse, error)
	//获取coin当前的最佳手续费率
	GetCoinFee(context.Context, *GetCoinFeeRequest) (*GetCoinFeeResponse, error)
	//获取交易列表
	ListCoinTx(context.Context, *ListCoinTxRequest) (*ListCoinTxResponse, error)
	//查询交易
	QueryCoinTx(context.Context, *QueryCoinTxRequest) (*QueryCoinTxResponse, error)
	//导出交易列表
	ExportCoinTx(context.Context, *ExportCoinTxRequest) (*ExportCoinTxResponse, error)
	//申请提现
	NewWithdraw(context.Context, *NewWithdrawRequest) (*NewWithdrawResponse, error)
	//获取交易详细信息
	GetWithdrawDetail(context.Context, *GetWithdrawDetailRequest) (*GetWithdrawDetailResponse, error)
	//获取钱包coin信息及资产余额
	GetWalletAsset(context.Context, *GetWalletAssetRequest) (*GetWalletAssetResponse, error)
	//获取钱包资产余额列表
	ListWalletAsset(context.Context, *ListWalletAssetRequest) (*ListWalletAssetResponse, error)
	//获取钱包详情列表
	ListWalletDetail(context.Context, *ListWalletDetailRequest) (*ListWalletDetailResponse, error)
	//获取钱包详情列表
	ListWalletCoinDetail(context.Context, *ListWalletCoinDetailRequest) (*ListWalletCoinDetailResponse, error)
	//添加钱包Coin参数设置
	AddWithdrawSetting(context.Context, *AddWithdrawSettingRequest) (*AddWithdrawSettingResponse, error)
	//更新钱包Coin参数设置
	UpdateWithdrawSetting(context.Context, *UpdateWithdrawSettingRequest) (*UpdateWithdrawSettingResponse, error)
	//移除钱包Coin参数设置
	RemoveWithdrawSetting(context.Context, *RemoveWithdrawSettingRequest) (*RemoveWithdrawSettingResponse, error)
	//获取钱包Coin参数设置
	GetWithdrawSetting(context.Context, *GetWithdrawSettingRequest) (*GetWithdrawSettingResponse, error)
	//增加钱包Coin提现限额设置
	AddWithdrawQuota(context.Context, *AddWithdrawQuotaRequest) (*AddWithdrawQuotaResponse, error)
	//移除钱包Coin提现限额设置
	RemoveWithdrawQuota(context.Context, *RemoveWithdrawQuotaRequest) (*RemoveWithdrawQuotaResponse, error)
	//获取钱包Coin提现限额设置列表
	ListWithdrawQuota(context.Context, *ListWithdrawQuotaRequest) (*ListWithdrawQuotaResponse, error)
	//增加钱包Coin提现白名单设置
	AddWithdrawWhitelist(context.Context, *AddWithdrawWhitelistRequest) (*AddWithdrawWhitelistResponse, error)
	//移除钱包Coin提现白名单设置
	RemoveWithdrawWhitelist(context.Context, *RemoveWithdrawWhitelistRequest) (*RemoveWithdrawWhitelistResponse, error)
	//获取钱包Coin提现白名单设置列表
	ListWithdrawWhitelist(context.Context, *ListWithdrawWhitelistRequest) (*ListWithdrawWhitelistResponse, error)
	//更新钱包Coin策略参数
	UpdateWithdrawPolicy(context.Context, *UpdateWithdrawPolicyRequest) (*UpdateWithdrawPolicyResponse, error)
	//获取钱包Coin策略参数设置列表
	ListWithdrawPolicy(context.Context, *ListWithdrawPolicyRequest) (*ListWithdrawPolicyResponse, error)
	//增加推送消息
	AddMessage(context.Context, *AddMessageRequest) (*AddMessageResponse, error)
	//更新推送消息
	UpdateMessage(context.Context, *UpdateMessageRequest) (*UpdateMessageResponse, error)
	//获取推送消息列表
	ListMessage(context.Context, *ListMessageRequest) (*ListMessageResponse, error)
}

// UnimplementedAsSiteServer can be embedded to have forward compatible implementations.
type UnimplementedAsSiteServer struct {
}

func (*UnimplementedAsSiteServer) Register(ctx context.Context, req *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedAsSiteServer) UserActive(ctx context.Context, req *UserActiveRequest) (*UserActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserActive not implemented")
}
func (*UnimplementedAsSiteServer) ReSendActivationCode(ctx context.Context, req *ReSendActivationCodeRequest) (*ReSendActivationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReSendActivationCode not implemented")
}
func (*UnimplementedAsSiteServer) ListCountryCode(ctx context.Context, req *ListCountryCodeRequest) (*ListCountryCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCountryCode not implemented")
}
func (*UnimplementedAsSiteServer) Login(ctx context.Context, req *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedAsSiteServer) Logout(ctx context.Context, req *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedAsSiteServer) ForgetPass(ctx context.Context, req *ForgetPassRequest) (*ForgetPassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetPass not implemented")
}
func (*UnimplementedAsSiteServer) UserInvite(ctx context.Context, req *UserInviteRequest) (*UserInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInvite not implemented")
}
func (*UnimplementedAsSiteServer) ApplyResetOtherPass(ctx context.Context, req *ApplyResetOtherPassRequest) (*ApplyResetOtherPassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyResetOtherPass not implemented")
}
func (*UnimplementedAsSiteServer) ApplyResetOther2FA(ctx context.Context, req *ApplyResetOther2FARequest) (*ApplyResetOther2FAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyResetOther2FA not implemented")
}
func (*UnimplementedAsSiteServer) UpdateOtherUserGenericInfo(ctx context.Context, req *UpdateOtherUserGenericInfoRequest) (*UpdateOtherUserGenericInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOtherUserGenericInfo not implemented")
}
func (*UnimplementedAsSiteServer) UpdateOtherUserImportantInfo(ctx context.Context, req *UpdateOtherUserImportantInfoRequest) (*UpdateOtherUserImportantInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOtherUserImportantInfo not implemented")
}
func (*UnimplementedAsSiteServer) ResetMePass(ctx context.Context, req *ResetMePassRequest) (*ResetMePassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMePass not implemented")
}
func (*UnimplementedAsSiteServer) ResetMe2FA(ctx context.Context, req *ResetMe2FARequest) (*ResetMe2FAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetMe2FA not implemented")
}
func (*UnimplementedAsSiteServer) GetMe(ctx context.Context, req *GetMeRequest) (*GetMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (*UnimplementedAsSiteServer) UpdateMe(ctx context.Context, req *UpdateMeRequest) (*UpdateMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMe not implemented")
}
func (*UnimplementedAsSiteServer) VerifyMePass(ctx context.Context, req *VerifyMePassRequest) (*VerifyMePassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMePass not implemented")
}
func (*UnimplementedAsSiteServer) ListUser(ctx context.Context, req *ListUserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (*UnimplementedAsSiteServer) ListRoleAndPermission(ctx context.Context, req *ListRoleAndPermissionRequest) (*ListRoleAndPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleAndPermission not implemented")
}
func (*UnimplementedAsSiteServer) AddWallet(ctx context.Context, req *AddWalletRequest) (*AddWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWallet not implemented")
}
func (*UnimplementedAsSiteServer) UpdateWallet(ctx context.Context, req *UpdateWalletRequest) (*UpdateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWallet not implemented")
}
func (*UnimplementedAsSiteServer) RemoveWallet(ctx context.Context, req *RemoveWalletRequest) (*RemoveWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWallet not implemented")
}
func (*UnimplementedAsSiteServer) ListWallet(ctx context.Context, req *ListWalletRequest) (*ListWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWallet not implemented")
}
func (*UnimplementedAsSiteServer) ListApiKey(ctx context.Context, req *ListApiKeyRequest) (*ListApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApiKey not implemented")
}
func (*UnimplementedAsSiteServer) AddApiKey(ctx context.Context, req *AddApiKeyRequest) (*AddApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApiKey not implemented")
}
func (*UnimplementedAsSiteServer) DeleteApiKey(ctx context.Context, req *DeleteApiKeyRequest) (*DeleteApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiKey not implemented")
}
func (*UnimplementedAsSiteServer) UpdateApiKey(ctx context.Context, req *UpdateApiKeyRequest) (*UpdateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApiKey not implemented")
}
func (*UnimplementedAsSiteServer) ListCoinInfo(ctx context.Context, req *ListCoinInfoRequest) (*ListCoinInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoinInfo not implemented")
}
func (*UnimplementedAsSiteServer) AddWalletCoin(ctx context.Context, req *AddWalletCoinRequest) (*AddWalletCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWalletCoin not implemented")
}
func (*UnimplementedAsSiteServer) RemoveWalletCoin(ctx context.Context, req *RemoveWalletCoinRequest) (*RemoveWalletCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWalletCoin not implemented")
}
func (*UnimplementedAsSiteServer) ListWalletCoin(ctx context.Context, req *ListWalletCoinRequest) (*ListWalletCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletCoin not implemented")
}
func (*UnimplementedAsSiteServer) GetNewAddress(ctx context.Context, req *GetNewAddressRequest) (*GetNewAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewAddress not implemented")
}
func (*UnimplementedAsSiteServer) HideAddress(ctx context.Context, req *HideAddressRequest) (*HideAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HideAddress not implemented")
}
func (*UnimplementedAsSiteServer) ListAddress(ctx context.Context, req *ListAddressRequest) (*ListAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddress not implemented")
}
func (*UnimplementedAsSiteServer) HasAddress(ctx context.Context, req *HasAddressRequest) (*HasAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasAddress not implemented")
}
func (*UnimplementedAsSiteServer) CheckAddress(ctx context.Context, req *CheckAddressRequest) (*CheckAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAddress not implemented")
}
func (*UnimplementedAsSiteServer) GetCoinFee(ctx context.Context, req *GetCoinFeeRequest) (*GetCoinFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinFee not implemented")
}
func (*UnimplementedAsSiteServer) ListCoinTx(ctx context.Context, req *ListCoinTxRequest) (*ListCoinTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoinTx not implemented")
}
func (*UnimplementedAsSiteServer) QueryCoinTx(ctx context.Context, req *QueryCoinTxRequest) (*QueryCoinTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCoinTx not implemented")
}
func (*UnimplementedAsSiteServer) ExportCoinTx(ctx context.Context, req *ExportCoinTxRequest) (*ExportCoinTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportCoinTx not implemented")
}
func (*UnimplementedAsSiteServer) NewWithdraw(ctx context.Context, req *NewWithdrawRequest) (*NewWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewWithdraw not implemented")
}
func (*UnimplementedAsSiteServer) GetWithdrawDetail(ctx context.Context, req *GetWithdrawDetailRequest) (*GetWithdrawDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawDetail not implemented")
}
func (*UnimplementedAsSiteServer) GetWalletAsset(ctx context.Context, req *GetWalletAssetRequest) (*GetWalletAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletAsset not implemented")
}
func (*UnimplementedAsSiteServer) ListWalletAsset(ctx context.Context, req *ListWalletAssetRequest) (*ListWalletAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletAsset not implemented")
}
func (*UnimplementedAsSiteServer) ListWalletDetail(ctx context.Context, req *ListWalletDetailRequest) (*ListWalletDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletDetail not implemented")
}
func (*UnimplementedAsSiteServer) ListWalletCoinDetail(ctx context.Context, req *ListWalletCoinDetailRequest) (*ListWalletCoinDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletCoinDetail not implemented")
}
func (*UnimplementedAsSiteServer) AddWithdrawSetting(ctx context.Context, req *AddWithdrawSettingRequest) (*AddWithdrawSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWithdrawSetting not implemented")
}
func (*UnimplementedAsSiteServer) UpdateWithdrawSetting(ctx context.Context, req *UpdateWithdrawSettingRequest) (*UpdateWithdrawSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWithdrawSetting not implemented")
}
func (*UnimplementedAsSiteServer) RemoveWithdrawSetting(ctx context.Context, req *RemoveWithdrawSettingRequest) (*RemoveWithdrawSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWithdrawSetting not implemented")
}
func (*UnimplementedAsSiteServer) GetWithdrawSetting(ctx context.Context, req *GetWithdrawSettingRequest) (*GetWithdrawSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawSetting not implemented")
}
func (*UnimplementedAsSiteServer) AddWithdrawQuota(ctx context.Context, req *AddWithdrawQuotaRequest) (*AddWithdrawQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWithdrawQuota not implemented")
}
func (*UnimplementedAsSiteServer) RemoveWithdrawQuota(ctx context.Context, req *RemoveWithdrawQuotaRequest) (*RemoveWithdrawQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWithdrawQuota not implemented")
}
func (*UnimplementedAsSiteServer) ListWithdrawQuota(ctx context.Context, req *ListWithdrawQuotaRequest) (*ListWithdrawQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawQuota not implemented")
}
func (*UnimplementedAsSiteServer) AddWithdrawWhitelist(ctx context.Context, req *AddWithdrawWhitelistRequest) (*AddWithdrawWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWithdrawWhitelist not implemented")
}
func (*UnimplementedAsSiteServer) RemoveWithdrawWhitelist(ctx context.Context, req *RemoveWithdrawWhitelistRequest) (*RemoveWithdrawWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWithdrawWhitelist not implemented")
}
func (*UnimplementedAsSiteServer) ListWithdrawWhitelist(ctx context.Context, req *ListWithdrawWhitelistRequest) (*ListWithdrawWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawWhitelist not implemented")
}
func (*UnimplementedAsSiteServer) UpdateWithdrawPolicy(ctx context.Context, req *UpdateWithdrawPolicyRequest) (*UpdateWithdrawPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWithdrawPolicy not implemented")
}
func (*UnimplementedAsSiteServer) ListWithdrawPolicy(ctx context.Context, req *ListWithdrawPolicyRequest) (*ListWithdrawPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawPolicy not implemented")
}
func (*UnimplementedAsSiteServer) AddMessage(ctx context.Context, req *AddMessageRequest) (*AddMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMessage not implemented")
}
func (*UnimplementedAsSiteServer) UpdateMessage(ctx context.Context, req *UpdateMessageRequest) (*UpdateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (*UnimplementedAsSiteServer) ListMessage(ctx context.Context, req *ListMessageRequest) (*ListMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessage not implemented")
}

func RegisterAsSiteServer(s *grpc.Server, srv AsSiteServer) {
	s.RegisterService(&_AsSite_serviceDesc, srv)
}

func _AsSite_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_UserActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).UserActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/UserActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).UserActive(ctx, req.(*UserActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ReSendActivationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReSendActivationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ReSendActivationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ReSendActivationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ReSendActivationCode(ctx, req.(*ReSendActivationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListCountryCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCountryCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListCountryCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListCountryCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListCountryCode(ctx, req.(*ListCountryCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ForgetPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ForgetPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ForgetPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ForgetPass(ctx, req.(*ForgetPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_UserInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).UserInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/UserInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).UserInvite(ctx, req.(*UserInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ApplyResetOtherPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyResetOtherPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ApplyResetOtherPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ApplyResetOtherPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ApplyResetOtherPass(ctx, req.(*ApplyResetOtherPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ApplyResetOther2FA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyResetOther2FARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ApplyResetOther2FA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ApplyResetOther2FA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ApplyResetOther2FA(ctx, req.(*ApplyResetOther2FARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_UpdateOtherUserGenericInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOtherUserGenericInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).UpdateOtherUserGenericInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/UpdateOtherUserGenericInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).UpdateOtherUserGenericInfo(ctx, req.(*UpdateOtherUserGenericInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_UpdateOtherUserImportantInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOtherUserImportantInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).UpdateOtherUserImportantInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/UpdateOtherUserImportantInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).UpdateOtherUserImportantInfo(ctx, req.(*UpdateOtherUserImportantInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ResetMePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetMePassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ResetMePass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ResetMePass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ResetMePass(ctx, req.(*ResetMePassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ResetMe2FA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetMe2FARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ResetMe2FA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ResetMe2FA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ResetMe2FA(ctx, req.(*ResetMe2FARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/GetMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).GetMe(ctx, req.(*GetMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_UpdateMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).UpdateMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/UpdateMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).UpdateMe(ctx, req.(*UpdateMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_VerifyMePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMePassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).VerifyMePass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/VerifyMePass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).VerifyMePass(ctx, req.(*VerifyMePassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListRoleAndPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleAndPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListRoleAndPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListRoleAndPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListRoleAndPermission(ctx, req.(*ListRoleAndPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_AddWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).AddWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/AddWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).AddWallet(ctx, req.(*AddWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_UpdateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).UpdateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/UpdateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).UpdateWallet(ctx, req.(*UpdateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_RemoveWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).RemoveWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/RemoveWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).RemoveWallet(ctx, req.(*RemoveWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListWallet(ctx, req.(*ListWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListApiKey(ctx, req.(*ListApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_AddApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).AddApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/AddApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).AddApiKey(ctx, req.(*AddApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_DeleteApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).DeleteApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/DeleteApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).DeleteApiKey(ctx, req.(*DeleteApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_UpdateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).UpdateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/UpdateApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).UpdateApiKey(ctx, req.(*UpdateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListCoinInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoinInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListCoinInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListCoinInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListCoinInfo(ctx, req.(*ListCoinInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_AddWalletCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWalletCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).AddWalletCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/AddWalletCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).AddWalletCoin(ctx, req.(*AddWalletCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_RemoveWalletCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWalletCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).RemoveWalletCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/RemoveWalletCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).RemoveWalletCoin(ctx, req.(*RemoveWalletCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListWalletCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListWalletCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListWalletCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListWalletCoin(ctx, req.(*ListWalletCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_GetNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).GetNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/GetNewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).GetNewAddress(ctx, req.(*GetNewAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_HideAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HideAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).HideAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/HideAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).HideAddress(ctx, req.(*HideAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListAddress(ctx, req.(*ListAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_HasAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).HasAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/HasAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).HasAddress(ctx, req.(*HasAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_CheckAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).CheckAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/CheckAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).CheckAddress(ctx, req.(*CheckAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_GetCoinFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).GetCoinFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/GetCoinFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).GetCoinFee(ctx, req.(*GetCoinFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListCoinTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoinTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListCoinTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListCoinTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListCoinTx(ctx, req.(*ListCoinTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_QueryCoinTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCoinTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).QueryCoinTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/QueryCoinTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).QueryCoinTx(ctx, req.(*QueryCoinTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ExportCoinTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportCoinTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ExportCoinTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ExportCoinTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ExportCoinTx(ctx, req.(*ExportCoinTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_NewWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).NewWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/NewWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).NewWithdraw(ctx, req.(*NewWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_GetWithdrawDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).GetWithdrawDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/GetWithdrawDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).GetWithdrawDetail(ctx, req.(*GetWithdrawDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_GetWalletAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).GetWalletAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/GetWalletAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).GetWalletAsset(ctx, req.(*GetWalletAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListWalletAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListWalletAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListWalletAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListWalletAsset(ctx, req.(*ListWalletAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListWalletDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListWalletDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListWalletDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListWalletDetail(ctx, req.(*ListWalletDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListWalletCoinDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletCoinDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListWalletCoinDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListWalletCoinDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListWalletCoinDetail(ctx, req.(*ListWalletCoinDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_AddWithdrawSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWithdrawSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).AddWithdrawSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/AddWithdrawSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).AddWithdrawSetting(ctx, req.(*AddWithdrawSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_UpdateWithdrawSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWithdrawSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).UpdateWithdrawSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/UpdateWithdrawSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).UpdateWithdrawSetting(ctx, req.(*UpdateWithdrawSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_RemoveWithdrawSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWithdrawSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).RemoveWithdrawSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/RemoveWithdrawSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).RemoveWithdrawSetting(ctx, req.(*RemoveWithdrawSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_GetWithdrawSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).GetWithdrawSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/GetWithdrawSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).GetWithdrawSetting(ctx, req.(*GetWithdrawSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_AddWithdrawQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWithdrawQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).AddWithdrawQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/AddWithdrawQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).AddWithdrawQuota(ctx, req.(*AddWithdrawQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_RemoveWithdrawQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWithdrawQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).RemoveWithdrawQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/RemoveWithdrawQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).RemoveWithdrawQuota(ctx, req.(*RemoveWithdrawQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListWithdrawQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListWithdrawQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListWithdrawQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListWithdrawQuota(ctx, req.(*ListWithdrawQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_AddWithdrawWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWithdrawWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).AddWithdrawWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/AddWithdrawWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).AddWithdrawWhitelist(ctx, req.(*AddWithdrawWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_RemoveWithdrawWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWithdrawWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).RemoveWithdrawWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/RemoveWithdrawWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).RemoveWithdrawWhitelist(ctx, req.(*RemoveWithdrawWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListWithdrawWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListWithdrawWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListWithdrawWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListWithdrawWhitelist(ctx, req.(*ListWithdrawWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_UpdateWithdrawPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWithdrawPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).UpdateWithdrawPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/UpdateWithdrawPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).UpdateWithdrawPolicy(ctx, req.(*UpdateWithdrawPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListWithdrawPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListWithdrawPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListWithdrawPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListWithdrawPolicy(ctx, req.(*ListWithdrawPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_AddMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).AddMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/AddMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).AddMessage(ctx, req.(*AddMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).UpdateMessage(ctx, req.(*UpdateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsSite_ListMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsSiteServer).ListMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assite.api.AsSite/ListMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsSiteServer).ListMessage(ctx, req.(*ListMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AsSite_serviceDesc = grpc.ServiceDesc{
	ServiceName: "assite.api.AsSite",
	HandlerType: (*AsSiteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AsSite_Register_Handler,
		},
		{
			MethodName: "UserActive",
			Handler:    _AsSite_UserActive_Handler,
		},
		{
			MethodName: "ReSendActivationCode",
			Handler:    _AsSite_ReSendActivationCode_Handler,
		},
		{
			MethodName: "ListCountryCode",
			Handler:    _AsSite_ListCountryCode_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AsSite_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AsSite_Logout_Handler,
		},
		{
			MethodName: "ForgetPass",
			Handler:    _AsSite_ForgetPass_Handler,
		},
		{
			MethodName: "UserInvite",
			Handler:    _AsSite_UserInvite_Handler,
		},
		{
			MethodName: "ApplyResetOtherPass",
			Handler:    _AsSite_ApplyResetOtherPass_Handler,
		},
		{
			MethodName: "ApplyResetOther2FA",
			Handler:    _AsSite_ApplyResetOther2FA_Handler,
		},
		{
			MethodName: "UpdateOtherUserGenericInfo",
			Handler:    _AsSite_UpdateOtherUserGenericInfo_Handler,
		},
		{
			MethodName: "UpdateOtherUserImportantInfo",
			Handler:    _AsSite_UpdateOtherUserImportantInfo_Handler,
		},
		{
			MethodName: "ResetMePass",
			Handler:    _AsSite_ResetMePass_Handler,
		},
		{
			MethodName: "ResetMe2FA",
			Handler:    _AsSite_ResetMe2FA_Handler,
		},
		{
			MethodName: "GetMe",
			Handler:    _AsSite_GetMe_Handler,
		},
		{
			MethodName: "UpdateMe",
			Handler:    _AsSite_UpdateMe_Handler,
		},
		{
			MethodName: "VerifyMePass",
			Handler:    _AsSite_VerifyMePass_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _AsSite_ListUser_Handler,
		},
		{
			MethodName: "ListRoleAndPermission",
			Handler:    _AsSite_ListRoleAndPermission_Handler,
		},
		{
			MethodName: "AddWallet",
			Handler:    _AsSite_AddWallet_Handler,
		},
		{
			MethodName: "UpdateWallet",
			Handler:    _AsSite_UpdateWallet_Handler,
		},
		{
			MethodName: "RemoveWallet",
			Handler:    _AsSite_RemoveWallet_Handler,
		},
		{
			MethodName: "ListWallet",
			Handler:    _AsSite_ListWallet_Handler,
		},
		{
			MethodName: "ListApiKey",
			Handler:    _AsSite_ListApiKey_Handler,
		},
		{
			MethodName: "AddApiKey",
			Handler:    _AsSite_AddApiKey_Handler,
		},
		{
			MethodName: "DeleteApiKey",
			Handler:    _AsSite_DeleteApiKey_Handler,
		},
		{
			MethodName: "UpdateApiKey",
			Handler:    _AsSite_UpdateApiKey_Handler,
		},
		{
			MethodName: "ListCoinInfo",
			Handler:    _AsSite_ListCoinInfo_Handler,
		},
		{
			MethodName: "AddWalletCoin",
			Handler:    _AsSite_AddWalletCoin_Handler,
		},
		{
			MethodName: "RemoveWalletCoin",
			Handler:    _AsSite_RemoveWalletCoin_Handler,
		},
		{
			MethodName: "ListWalletCoin",
			Handler:    _AsSite_ListWalletCoin_Handler,
		},
		{
			MethodName: "GetNewAddress",
			Handler:    _AsSite_GetNewAddress_Handler,
		},
		{
			MethodName: "HideAddress",
			Handler:    _AsSite_HideAddress_Handler,
		},
		{
			MethodName: "ListAddress",
			Handler:    _AsSite_ListAddress_Handler,
		},
		{
			MethodName: "HasAddress",
			Handler:    _AsSite_HasAddress_Handler,
		},
		{
			MethodName: "CheckAddress",
			Handler:    _AsSite_CheckAddress_Handler,
		},
		{
			MethodName: "GetCoinFee",
			Handler:    _AsSite_GetCoinFee_Handler,
		},
		{
			MethodName: "ListCoinTx",
			Handler:    _AsSite_ListCoinTx_Handler,
		},
		{
			MethodName: "QueryCoinTx",
			Handler:    _AsSite_QueryCoinTx_Handler,
		},
		{
			MethodName: "ExportCoinTx",
			Handler:    _AsSite_ExportCoinTx_Handler,
		},
		{
			MethodName: "NewWithdraw",
			Handler:    _AsSite_NewWithdraw_Handler,
		},
		{
			MethodName: "GetWithdrawDetail",
			Handler:    _AsSite_GetWithdrawDetail_Handler,
		},
		{
			MethodName: "GetWalletAsset",
			Handler:    _AsSite_GetWalletAsset_Handler,
		},
		{
			MethodName: "ListWalletAsset",
			Handler:    _AsSite_ListWalletAsset_Handler,
		},
		{
			MethodName: "ListWalletDetail",
			Handler:    _AsSite_ListWalletDetail_Handler,
		},
		{
			MethodName: "ListWalletCoinDetail",
			Handler:    _AsSite_ListWalletCoinDetail_Handler,
		},
		{
			MethodName: "AddWithdrawSetting",
			Handler:    _AsSite_AddWithdrawSetting_Handler,
		},
		{
			MethodName: "UpdateWithdrawSetting",
			Handler:    _AsSite_UpdateWithdrawSetting_Handler,
		},
		{
			MethodName: "RemoveWithdrawSetting",
			Handler:    _AsSite_RemoveWithdrawSetting_Handler,
		},
		{
			MethodName: "GetWithdrawSetting",
			Handler:    _AsSite_GetWithdrawSetting_Handler,
		},
		{
			MethodName: "AddWithdrawQuota",
			Handler:    _AsSite_AddWithdrawQuota_Handler,
		},
		{
			MethodName: "RemoveWithdrawQuota",
			Handler:    _AsSite_RemoveWithdrawQuota_Handler,
		},
		{
			MethodName: "ListWithdrawQuota",
			Handler:    _AsSite_ListWithdrawQuota_Handler,
		},
		{
			MethodName: "AddWithdrawWhitelist",
			Handler:    _AsSite_AddWithdrawWhitelist_Handler,
		},
		{
			MethodName: "RemoveWithdrawWhitelist",
			Handler:    _AsSite_RemoveWithdrawWhitelist_Handler,
		},
		{
			MethodName: "ListWithdrawWhitelist",
			Handler:    _AsSite_ListWithdrawWhitelist_Handler,
		},
		{
			MethodName: "UpdateWithdrawPolicy",
			Handler:    _AsSite_UpdateWithdrawPolicy_Handler,
		},
		{
			MethodName: "ListWithdrawPolicy",
			Handler:    _AsSite_ListWithdrawPolicy_Handler,
		},
		{
			MethodName: "AddMessage",
			Handler:    _AsSite_AddMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _AsSite_UpdateMessage_Handler,
		},
		{
			MethodName: "ListMessage",
			Handler:    _AsSite_ListMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assite.proto",
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountDescription) > 0 {
		i -= len(m.AccountDescription)
		copy(dAtA[i:], m.AccountDescription)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.AccountDescription)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountName) > 0 {
		i -= len(m.AccountName)
		copy(dAtA[i:], m.AccountName)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.AccountName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Otp) > 0 {
		i -= len(m.Otp)
		copy(dAtA[i:], m.Otp)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Otp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RemainRetryNum != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.RemainRetryNum))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogoutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogoutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LogoutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogoutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ForgetPassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForgetPassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForgetPassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ForgetPassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForgetPassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForgetPassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UserActiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserActiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserActiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pass) > 0 {
		i -= len(m.Pass)
		copy(dAtA[i:], m.Pass)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Pass)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TwoFACaptcha) > 0 {
		i -= len(m.TwoFACaptcha)
		copy(dAtA[i:], m.TwoFACaptcha)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.TwoFACaptcha)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActivationCode) > 0 {
		i -= len(m.ActivationCode)
		copy(dAtA[i:], m.ActivationCode)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.ActivationCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCountryCodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCountryCodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCountryCodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ReSendActivationCodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReSendActivationCodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReSendActivationCodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReSendActivationCodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReSendActivationCodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReSendActivationCodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListCountryCodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCountryCodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCountryCodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserActiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserActiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserActiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OpType != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.OpType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TwoFACode) > 0 {
		i -= len(m.TwoFACode)
		copy(dAtA[i:], m.TwoFACode)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.TwoFACode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ActivationCode) > 0 {
		i -= len(m.ActivationCode)
		copy(dAtA[i:], m.ActivationCode)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.ActivationCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserInviteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInviteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInviteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserInviteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInviteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInviteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ApplyResetOtherPassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyResetOtherPassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyResetOtherPassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ApplyResetOtherPassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyResetOtherPassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyResetOtherPassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ApplyResetOther2FARequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyResetOther2FARequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyResetOther2FARequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ApplyResetOther2FAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyResetOther2FAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyResetOther2FAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResetMePassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetMePassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetMePassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewPass) > 0 {
		i -= len(m.NewPass)
		copy(dAtA[i:], m.NewPass)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.NewPass)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OldPass) > 0 {
		i -= len(m.OldPass)
		copy(dAtA[i:], m.OldPass)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.OldPass)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResetMePassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetMePassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetMePassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResetMe2FARequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetMe2FARequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetMe2FARequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthCode) > 0 {
		i -= len(m.AuthCode)
		copy(dAtA[i:], m.AuthCode)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.AuthCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewTwoFACaptcha) > 0 {
		i -= len(m.NewTwoFACaptcha)
		copy(dAtA[i:], m.NewTwoFACaptcha)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.NewTwoFACaptcha)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OldTwoFACaptcha) > 0 {
		i -= len(m.OldTwoFACaptcha)
		copy(dAtA[i:], m.OldTwoFACaptcha)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.OldTwoFACaptcha)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResetMe2FAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetMe2FAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetMe2FAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthCode) > 0 {
		i -= len(m.AuthCode)
		copy(dAtA[i:], m.AuthCode)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.AuthCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TwoFACode) > 0 {
		i -= len(m.TwoFACode)
		copy(dAtA[i:], m.TwoFACode)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.TwoFACode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Welcome) > 0 {
		i -= len(m.Welcome)
		copy(dAtA[i:], m.Welcome)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Welcome)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Lang) > 0 {
		i -= len(m.Lang)
		copy(dAtA[i:], m.Lang)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Lang)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VerifyMePassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyMePassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyMePassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pass) > 0 {
		i -= len(m.Pass)
		copy(dAtA[i:], m.Pass)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Pass)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyMePassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyMePassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyMePassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x58
	}
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x50
	}
	return len(dAtA) - i, nil
}

func (m *ListUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalNum != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListRoleAndPermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoleAndPermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoleAndPermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListRoleAndPermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoleAndPermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoleAndPermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Perms) > 0 {
		for iNdEx := len(m.Perms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Perms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateOtherUserGenericInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOtherUserGenericInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOtherUserGenericInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EMail) > 0 {
		i -= len(m.EMail)
		copy(dAtA[i:], m.EMail)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.EMail)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateOtherUserGenericInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOtherUserGenericInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOtherUserGenericInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateOtherUserImportantInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOtherUserImportantInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOtherUserImportantInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DelRoles) > 0 {
		for iNdEx := len(m.DelRoles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DelRoles[iNdEx])
			copy(dAtA[i:], m.DelRoles[iNdEx])
			i = encodeVarintAssite(dAtA, i, uint64(len(m.DelRoles[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AddRoles) > 0 {
		for iNdEx := len(m.AddRoles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AddRoles[iNdEx])
			copy(dAtA[i:], m.AddRoles[iNdEx])
			i = encodeVarintAssite(dAtA, i, uint64(len(m.AddRoles[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Uid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateOtherUserImportantInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOtherUserImportantInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOtherUserImportantInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AddApiKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddApiKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddApiKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IpLimit) > 0 {
		i -= len(m.IpLimit)
		copy(dAtA[i:], m.IpLimit)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.IpLimit)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AccessType != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.AccessType))
		i--
		dAtA[i] = 0x10
	}
	if m.WalletId != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.WalletId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddApiKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddApiKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddApiKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListApiKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApiKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListApiKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WalletId != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.WalletId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListApiKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApiKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListApiKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateApiKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateApiKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateApiKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IpLimit) > 0 {
		i -= len(m.IpLimit)
		copy(dAtA[i:], m.IpLimit)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.IpLimit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AccessType != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.AccessType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateApiKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateApiKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateApiKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteApiKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteApiKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteApiKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteApiKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteApiKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteApiKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AddWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WType != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.WType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *AddWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemoveWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x58
	}
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x50
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalNum != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCoinInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCoinInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCoinInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x58
	}
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x50
	}
	return len(dAtA) - i, nil
}

func (m *ListCoinInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCoinInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCoinInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalNum != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddWalletCoinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWalletCoinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWalletCoinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanWithdraw {
		i--
		if m.CanWithdraw {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.CanDeposit {
		i--
		if m.CanDeposit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddWalletCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWalletCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWalletCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWalletCoinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWalletCoinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWalletCoinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWalletCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWalletCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWalletCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListWalletCoinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletCoinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletCoinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x58
	}
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x50
	}
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalNum != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x58
	}
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *SimpleAddressInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleAddressInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleAddressInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateAt != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.CreateAt != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}

func (m *ListAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalNum != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetNewAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNewAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNewAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *GetNewAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNewAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNewAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HideAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HideAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HideAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *HideAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HideAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HideAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *HasAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HasAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HasAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *HasAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HasAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HasAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exist {
		i--
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCoinFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoinFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCoinFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCoinFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoinFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCoinFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeMiddleStr) > 0 {
		i -= len(m.FeeMiddleStr)
		copy(dAtA[i:], m.FeeMiddleStr)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.FeeMiddleStr)))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x82
	}
	if len(m.PlatformFeeStr) > 0 {
		i -= len(m.PlatformFeeStr)
		copy(dAtA[i:], m.PlatformFeeStr)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.PlatformFeeStr)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.LimitFeeStr) > 0 {
		i -= len(m.LimitFeeStr)
		copy(dAtA[i:], m.LimitFeeStr)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.LimitFeeStr)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.FeeFastStr) > 0 {
		i -= len(m.FeeFastStr)
		copy(dAtA[i:], m.FeeFastStr)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.FeeFastStr)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.FeeSlowStr) > 0 {
		i -= len(m.FeeSlowStr)
		copy(dAtA[i:], m.FeeSlowStr)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.FeeSlowStr)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PlatformFee != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PlatformFee))))
		i--
		dAtA[i] = 0x29
	}
	if m.LimitFee != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LimitFee))))
		i--
		dAtA[i] = 0x21
	}
	if m.FeeFast != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FeeFast))))
		i--
		dAtA[i] = 0x19
	}
	if m.FeeMiddle != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FeeMiddle))))
		i--
		dAtA[i] = 0x11
	}
	if m.FeeSlow != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FeeSlow))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *ListCoinTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCoinTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCoinTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Side != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.EndBlockTime != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.EndBlockTime))
		i--
		dAtA[i] = 0x78
	}
	if m.BeginBlockTime != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.BeginBlockTime))
		i--
		dAtA[i] = 0x70
	}
	if m.Limit != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x68
	}
	if m.MaxId != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x60
	}
	if m.MinId != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.MinId))
		i--
		dAtA[i] = 0x58
	}
	if m.MinConfirmedNum != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.MinConfirmedNum))
		i--
		dAtA[i] = 0x50
	}
	if m.Type != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ListCoinTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCoinTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCoinTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCoinTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCoinTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCoinTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	if m.EndUpdateAt != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.EndUpdateAt))
		i--
		dAtA[i] = 0x60
	}
	if m.BeginUpdateAt != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.BeginUpdateAt))
		i--
		dAtA[i] = 0x58
	}
	if m.EndCreateAt != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.EndCreateAt))
		i--
		dAtA[i] = 0x50
	}
	if m.BeginCreateAt != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.BeginCreateAt))
		i--
		dAtA[i] = 0x48
	}
	if m.EndBlockTime != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.EndBlockTime))
		i--
		dAtA[i] = 0x40
	}
	if m.BeginBlockTime != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.BeginBlockTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Sides) > 0 {
		dAtA5 := make([]byte, len(m.Sides)*10)
		var j4 int
		for _, num := range m.Sides {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintAssite(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x32
	}
	if len(m.States) > 0 {
		dAtA7 := make([]byte, len(m.States)*10)
		var j6 int
		for _, num := range m.States {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintAssite(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cids) > 0 {
		dAtA9 := make([]byte, len(m.Cids)*10)
		var j8 int
		for _, num1 := range m.Cids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintAssite(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Wids) > 0 {
		dAtA11 := make([]byte, len(m.Wids)*10)
		var j10 int
		for _, num1 := range m.Wids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintAssite(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Txt) > 0 {
		i -= len(m.Txt)
		copy(dAtA[i:], m.Txt)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Txt)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryCoinTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCoinTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCoinTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalNum != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExportCoinTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportCoinTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportCoinTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndBlockTime != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.EndBlockTime))
		i--
		dAtA[i] = 0x40
	}
	if m.BeginBlockTime != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.BeginBlockTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Sides) > 0 {
		dAtA13 := make([]byte, len(m.Sides)*10)
		var j12 int
		for _, num := range m.Sides {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintAssite(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x32
	}
	if len(m.States) > 0 {
		dAtA15 := make([]byte, len(m.States)*10)
		var j14 int
		for _, num := range m.States {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintAssite(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cids) > 0 {
		dAtA17 := make([]byte, len(m.Cids)*10)
		var j16 int
		for _, num1 := range m.Cids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintAssite(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Wids) > 0 {
		dAtA19 := make([]byte, len(m.Wids)*10)
		var j18 int
		for _, num1 := range m.Wids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintAssite(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Txt) > 0 {
		i -= len(m.Txt)
		copy(dAtA[i:], m.Txt)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Txt)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExportCoinTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportCoinTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportCoinTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Fee))))
		i--
		dAtA[i] = 0x41
	}
	if m.FeeCid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.FeeCid))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x32
	}
	if m.Amount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amount))))
		i--
		dAtA[i] = 0x29
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InnerTxid) > 0 {
		i -= len(m.InnerTxid)
		copy(dAtA[i:], m.InnerTxid)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.InnerTxid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWithdrawDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWithdrawDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWithdrawDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *GetWithdrawDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWithdrawDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWithdrawDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWalletAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWalletAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWalletAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *GetWalletAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWalletAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWalletAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletCoinDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletCoinDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletCoinDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x58
	}
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x50
	}
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletCoinDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletCoinDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletCoinDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalNum != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddWithdrawSettingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWithdrawSettingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWithdrawSettingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsContainConfirmNum {
		i--
		if m.IsContainConfirmNum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.TransferCallbackUrl) > 0 {
		i -= len(m.TransferCallbackUrl)
		copy(dAtA[i:], m.TransferCallbackUrl)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.TransferCallbackUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WithdrawCallbackUrl) > 0 {
		i -= len(m.WithdrawCallbackUrl)
		copy(dAtA[i:], m.WithdrawCallbackUrl)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.WithdrawCallbackUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ApproveAll {
		i--
		if m.ApproveAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddWithdrawSettingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWithdrawSettingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWithdrawSettingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWithdrawSettingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWithdrawSettingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWithdrawSettingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsContainConfirmNum {
		i--
		if m.IsContainConfirmNum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.TransferCallbackUrl) > 0 {
		i -= len(m.TransferCallbackUrl)
		copy(dAtA[i:], m.TransferCallbackUrl)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.TransferCallbackUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WithdrawCallbackUrl) > 0 {
		i -= len(m.WithdrawCallbackUrl)
		copy(dAtA[i:], m.WithdrawCallbackUrl)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.WithdrawCallbackUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.ApproveAll {
		i--
		if m.ApproveAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWithdrawSettingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWithdrawSettingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWithdrawSettingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemoveWithdrawSettingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWithdrawSettingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWithdrawSettingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWithdrawSettingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWithdrawSettingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWithdrawSettingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetWithdrawSettingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWithdrawSettingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWithdrawSettingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *GetWithdrawSettingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWithdrawSettingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWithdrawSettingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddWithdrawQuotaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWithdrawQuotaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWithdrawQuotaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApprovedPerson != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.ApprovedPerson))
		i--
		dAtA[i] = 0x30
	}
	if m.QuotaPerDay != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.QuotaPerDay))))
		i--
		dAtA[i] = 0x29
	}
	if m.QuotaPerHour != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.QuotaPerHour))))
		i--
		dAtA[i] = 0x21
	}
	if m.QuotaPerTx != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.QuotaPerTx))))
		i--
		dAtA[i] = 0x19
	}
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddWithdrawQuotaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWithdrawQuotaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWithdrawQuotaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWithdrawQuotaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWithdrawQuotaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWithdrawQuotaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x20
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWithdrawQuotaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWithdrawQuotaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWithdrawQuotaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListWithdrawQuotaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWithdrawQuotaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWithdrawQuotaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ListWithdrawQuotaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWithdrawQuotaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWithdrawQuotaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddWithdrawWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWithdrawWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWithdrawWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAssite(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddWithdrawWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWithdrawWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWithdrawWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWithdrawWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWithdrawWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWithdrawWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x20
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWithdrawWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWithdrawWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWithdrawWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListWithdrawWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWithdrawWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWithdrawWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ListWithdrawWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWithdrawWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWithdrawWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWithdrawPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWithdrawPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWithdrawPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateItem != nil {
		{
			size, err := m.UpdateItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DelItem != nil {
		{
			size, err := m.DelItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AddItem != nil {
		{
			size, err := m.AddItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWithdrawPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWithdrawPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWithdrawPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListWithdrawPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWithdrawPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWithdrawPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ListWithdrawPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWithdrawPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWithdrawPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssite(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x58
	}
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x50
	}
	if m.Cid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ListMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalNum != 0 {
		i = encodeVarintAssite(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAssite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAssite(dAtA []byte, offset int, v uint64) int {
	offset -= sovAssite(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountName)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.AccountDescription)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *RegisterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LoginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Otp)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *LoginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	if m.RemainRetryNum != 0 {
		n += 1 + sovAssite(uint64(m.RemainRetryNum))
	}
	return n
}

func (m *LogoutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LogoutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ForgetPassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *ForgetPassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserActiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivationCode)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.TwoFACaptcha)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Pass)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *ListCountryCodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReSendActivationCodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *ReSendActivationCodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListCountryCodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	return n
}

func (m *UserActiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivationCode)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.TwoFACode)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	if m.OpType != 0 {
		n += 1 + sovAssite(uint64(m.OpType))
	}
	return n
}

func (m *UserInviteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *UserInviteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ApplyResetOtherPassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovAssite(uint64(m.Uid))
	}
	return n
}

func (m *ApplyResetOtherPassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ApplyResetOther2FARequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovAssite(uint64(m.Uid))
	}
	return n
}

func (m *ApplyResetOther2FAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResetMePassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OldPass)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.NewPass)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *ResetMePassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResetMe2FARequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OldTwoFACaptcha)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.NewTwoFACaptcha)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.AuthCode)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *ResetMe2FAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TwoFACode)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.AuthCode)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *GetMeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *UpdateMeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Lang)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Welcome)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *UpdateMeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VerifyMePassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pass)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *VerifyMePassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovAssite(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovAssite(uint64(m.PageSize))
	}
	return n
}

func (m *ListUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovAssite(uint64(m.TotalNum))
	}
	if m.Page != 0 {
		n += 1 + sovAssite(uint64(m.Page))
	}
	return n
}

func (m *ListRoleAndPermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListRoleAndPermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	if len(m.Perms) > 0 {
		for _, e := range m.Perms {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	return n
}

func (m *UpdateOtherUserGenericInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovAssite(uint64(m.Uid))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.EMail)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *UpdateOtherUserGenericInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateOtherUserImportantInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovAssite(uint64(m.Uid))
	}
	if len(m.AddRoles) > 0 {
		for _, s := range m.AddRoles {
			l = len(s)
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	if len(m.DelRoles) > 0 {
		for _, s := range m.DelRoles {
			l = len(s)
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovAssite(uint64(m.State))
	}
	return n
}

func (m *UpdateOtherUserImportantInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AddApiKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WalletId != 0 {
		n += 1 + sovAssite(uint64(m.WalletId))
	}
	if m.AccessType != 0 {
		n += 1 + sovAssite(uint64(m.AccessType))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.IpLimit)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *AddApiKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *ListApiKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WalletId != 0 {
		n += 1 + sovAssite(uint64(m.WalletId))
	}
	return n
}

func (m *ListApiKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	return n
}

func (m *UpdateApiKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAssite(uint64(m.Id))
	}
	if m.AccessType != 0 {
		n += 1 + sovAssite(uint64(m.AccessType))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.IpLimit)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *UpdateApiKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteApiKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAssite(uint64(m.Id))
	}
	return n
}

func (m *DeleteApiKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AddWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	if m.WType != 0 {
		n += 1 + sovAssite(uint64(m.WType))
	}
	return n
}

func (m *AddWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	return n
}

func (m *UpdateWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovAssite(uint64(m.State))
	}
	return n
}

func (m *UpdateWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	return n
}

func (m *RemoveWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Page != 0 {
		n += 1 + sovAssite(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovAssite(uint64(m.PageSize))
	}
	return n
}

func (m *ListWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovAssite(uint64(m.TotalNum))
	}
	if m.Page != 0 {
		n += 1 + sovAssite(uint64(m.Page))
	}
	return n
}

func (m *ListCoinInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovAssite(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovAssite(uint64(m.PageSize))
	}
	return n
}

func (m *ListCoinInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovAssite(uint64(m.TotalNum))
	}
	if m.Page != 0 {
		n += 1 + sovAssite(uint64(m.Page))
	}
	return n
}

func (m *AddWalletCoinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	if m.CanDeposit {
		n += 2
	}
	if m.CanWithdraw {
		n += 2
	}
	return n
}

func (m *AddWalletCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAssite(uint64(m.Id))
	}
	return n
}

func (m *RemoveWalletCoinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAssite(uint64(m.Id))
	}
	return n
}

func (m *RemoveWalletCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListWalletCoinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	if m.Page != 0 {
		n += 1 + sovAssite(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovAssite(uint64(m.PageSize))
	}
	return n
}

func (m *ListWalletCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovAssite(uint64(m.TotalNum))
	}
	if m.Page != 0 {
		n += 1 + sovAssite(uint64(m.Page))
	}
	return n
}

func (m *ListAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovAssite(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovAssite(uint64(m.PageSize))
	}
	return n
}

func (m *SimpleAddressInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 2 + sovAssite(uint64(m.CreateAt))
	}
	if m.UpdateAt != 0 {
		n += 2 + sovAssite(uint64(m.UpdateAt))
	}
	return n
}

func (m *ListAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovAssite(uint64(m.TotalNum))
	}
	if m.Page != 0 {
		n += 1 + sovAssite(uint64(m.Page))
	}
	return n
}

func (m *GetNewAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *GetNewAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *HideAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *HideAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HasAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *HasAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	return n
}

func (m *CheckAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *CheckAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	return n
}

func (m *GetCoinFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	return n
}

func (m *GetCoinFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeSlow != 0 {
		n += 9
	}
	if m.FeeMiddle != 0 {
		n += 9
	}
	if m.FeeFast != 0 {
		n += 9
	}
	if m.LimitFee != 0 {
		n += 9
	}
	if m.PlatformFee != 0 {
		n += 9
	}
	l = len(m.FeeSlowStr)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.FeeFastStr)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.LimitFeeStr)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.PlatformFeeStr)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.FeeMiddleStr)
	if l > 0 {
		n += 2 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *ListCoinTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAssite(uint64(m.Type))
	}
	if m.MinConfirmedNum != 0 {
		n += 1 + sovAssite(uint64(m.MinConfirmedNum))
	}
	if m.MinId != 0 {
		n += 1 + sovAssite(uint64(m.MinId))
	}
	if m.MaxId != 0 {
		n += 1 + sovAssite(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovAssite(uint64(m.Limit))
	}
	if m.BeginBlockTime != 0 {
		n += 1 + sovAssite(uint64(m.BeginBlockTime))
	}
	if m.EndBlockTime != 0 {
		n += 1 + sovAssite(uint64(m.EndBlockTime))
	}
	if m.Side != 0 {
		n += 2 + sovAssite(uint64(m.Side))
	}
	return n
}

func (m *ListCoinTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	return n
}

func (m *QueryCoinTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Txt)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	if len(m.Wids) > 0 {
		l = 0
		for _, e := range m.Wids {
			l += sovAssite(uint64(e))
		}
		n += 1 + sovAssite(uint64(l)) + l
	}
	if len(m.Cids) > 0 {
		l = 0
		for _, e := range m.Cids {
			l += sovAssite(uint64(e))
		}
		n += 1 + sovAssite(uint64(l)) + l
	}
	if len(m.States) > 0 {
		l = 0
		for _, e := range m.States {
			l += sovAssite(uint64(e))
		}
		n += 1 + sovAssite(uint64(l)) + l
	}
	if len(m.Sides) > 0 {
		l = 0
		for _, e := range m.Sides {
			l += sovAssite(uint64(e))
		}
		n += 1 + sovAssite(uint64(l)) + l
	}
	if m.BeginBlockTime != 0 {
		n += 1 + sovAssite(uint64(m.BeginBlockTime))
	}
	if m.EndBlockTime != 0 {
		n += 1 + sovAssite(uint64(m.EndBlockTime))
	}
	if m.BeginCreateAt != 0 {
		n += 1 + sovAssite(uint64(m.BeginCreateAt))
	}
	if m.EndCreateAt != 0 {
		n += 1 + sovAssite(uint64(m.EndCreateAt))
	}
	if m.BeginUpdateAt != 0 {
		n += 1 + sovAssite(uint64(m.BeginUpdateAt))
	}
	if m.EndUpdateAt != 0 {
		n += 1 + sovAssite(uint64(m.EndUpdateAt))
	}
	if m.Page != 0 {
		n += 2 + sovAssite(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 2 + sovAssite(uint64(m.PageSize))
	}
	return n
}

func (m *QueryCoinTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovAssite(uint64(m.TotalNum))
	}
	if m.Page != 0 {
		n += 1 + sovAssite(uint64(m.Page))
	}
	return n
}

func (m *ExportCoinTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Txt)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	if len(m.Wids) > 0 {
		l = 0
		for _, e := range m.Wids {
			l += sovAssite(uint64(e))
		}
		n += 1 + sovAssite(uint64(l)) + l
	}
	if len(m.Cids) > 0 {
		l = 0
		for _, e := range m.Cids {
			l += sovAssite(uint64(e))
		}
		n += 1 + sovAssite(uint64(l)) + l
	}
	if len(m.States) > 0 {
		l = 0
		for _, e := range m.States {
			l += sovAssite(uint64(e))
		}
		n += 1 + sovAssite(uint64(l)) + l
	}
	if len(m.Sides) > 0 {
		l = 0
		for _, e := range m.Sides {
			l += sovAssite(uint64(e))
		}
		n += 1 + sovAssite(uint64(l)) + l
	}
	if m.BeginBlockTime != 0 {
		n += 1 + sovAssite(uint64(m.BeginBlockTime))
	}
	if m.EndBlockTime != 0 {
		n += 1 + sovAssite(uint64(m.EndBlockTime))
	}
	return n
}

func (m *ExportCoinTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *NewWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	if m.Amount != 0 {
		n += 9
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	if m.FeeCid != 0 {
		n += 1 + sovAssite(uint64(m.FeeCid))
	}
	if m.Fee != 0 {
		n += 9
	}
	return n
}

func (m *NewWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InnerTxid)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *GetWithdrawDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *GetWithdrawDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *GetWalletAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	return n
}

func (m *GetWalletAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *ListWalletAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	return n
}

func (m *ListWalletAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	return n
}

func (m *ListWalletDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	return n
}

func (m *ListWalletDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	return n
}

func (m *ListWalletCoinDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	if m.Page != 0 {
		n += 1 + sovAssite(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovAssite(uint64(m.PageSize))
	}
	return n
}

func (m *ListWalletCoinDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovAssite(uint64(m.TotalNum))
	}
	if m.Page != 0 {
		n += 1 + sovAssite(uint64(m.Page))
	}
	return n
}

func (m *AddWithdrawSettingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.ApproveAll {
		n += 2
	}
	l = len(m.WithdrawCallbackUrl)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.TransferCallbackUrl)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	if m.IsContainConfirmNum {
		n += 2
	}
	return n
}

func (m *AddWithdrawSettingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAssite(uint64(m.Id))
	}
	return n
}

func (m *UpdateWithdrawSettingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAssite(uint64(m.Id))
	}
	if m.ApproveAll {
		n += 2
	}
	l = len(m.WithdrawCallbackUrl)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.TransferCallbackUrl)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	if m.IsContainConfirmNum {
		n += 2
	}
	return n
}

func (m *UpdateWithdrawSettingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveWithdrawSettingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAssite(uint64(m.Id))
	}
	return n
}

func (m *RemoveWithdrawSettingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetWithdrawSettingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	return n
}

func (m *GetWithdrawSettingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *AddWithdrawQuotaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	if m.QuotaPerTx != 0 {
		n += 9
	}
	if m.QuotaPerHour != 0 {
		n += 9
	}
	if m.QuotaPerDay != 0 {
		n += 9
	}
	if m.ApprovedPerson != 0 {
		n += 1 + sovAssite(uint64(m.ApprovedPerson))
	}
	return n
}

func (m *AddWithdrawQuotaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAssite(uint64(m.Id))
	}
	return n
}

func (m *RemoveWithdrawQuotaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAssite(uint64(m.Id))
	}
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	return n
}

func (m *RemoveWithdrawQuotaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListWithdrawQuotaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	return n
}

func (m *ListWithdrawQuotaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	return n
}

func (m *AddWithdrawWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovAssite(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovAssite(uint64(m.State))
	}
	return n
}

func (m *AddWithdrawWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAssite(uint64(m.Id))
	}
	return n
}

func (m *RemoveWithdrawWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAssite(uint64(m.Id))
	}
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	return n
}

func (m *RemoveWithdrawWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListWithdrawWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	return n
}

func (m *ListWithdrawWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	return n
}

func (m *UpdateWithdrawPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddItem != nil {
		l = m.AddItem.Size()
		n += 1 + l + sovAssite(uint64(l))
	}
	if m.DelItem != nil {
		l = m.DelItem.Size()
		n += 1 + l + sovAssite(uint64(l))
	}
	if m.UpdateItem != nil {
		l = m.UpdateItem.Size()
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *UpdateWithdrawPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListWithdrawPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	return n
}

func (m *ListWithdrawPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *AddMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *AddMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAssite(uint64(m.Id))
	}
	return n
}

func (m *UpdateMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovAssite(uint64(l))
	}
	return n
}

func (m *UpdateMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovAssite(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovAssite(uint64(m.Cid))
	}
	if m.Page != 0 {
		n += 1 + sovAssite(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovAssite(uint64(m.PageSize))
	}
	return n
}

func (m *ListMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAssite(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovAssite(uint64(m.TotalNum))
	}
	if m.Page != 0 {
		n += 1 + sovAssite(uint64(m.Page))
	}
	return n
}

func sovAssite(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAssite(x uint64) (n int) {
	return sovAssite(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Otp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Otp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainRetryNum", wireType)
			}
			m.RemainRetryNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainRetryNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForgetPassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForgetPassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForgetPassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForgetPassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForgetPassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForgetPassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserActiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserActiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserActiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivationCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwoFACaptcha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwoFACaptcha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCountryCodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCountryCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCountryCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReSendActivationCodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReSendActivationCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReSendActivationCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReSendActivationCodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReSendActivationCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReSendActivationCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCountryCodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCountryCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCountryCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.CountryCode{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserActiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserActiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserActiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivationCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwoFACode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwoFACode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInviteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInviteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInviteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInviteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInviteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInviteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyResetOtherPassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyResetOtherPassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyResetOtherPassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyResetOtherPassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyResetOtherPassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyResetOtherPassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyResetOther2FARequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyResetOther2FARequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyResetOther2FARequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyResetOther2FAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyResetOther2FAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyResetOther2FAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetMePassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetMePassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetMePassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldPass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetMePassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetMePassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetMePassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetMe2FARequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetMe2FARequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetMe2FARequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldTwoFACaptcha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldTwoFACaptcha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTwoFACaptcha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewTwoFACaptcha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetMe2FAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetMe2FAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetMe2FAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwoFACode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwoFACode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.UserData{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Welcome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Welcome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyMePassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyMePassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyMePassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyMePassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyMePassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyMePassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.UserData{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoleAndPermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoleAndPermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoleAndPermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoleAndPermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoleAndPermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoleAndPermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &shared_gogo.RoleItem{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Perms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Perms = append(m.Perms, &shared_gogo.AuthItem{})
			if err := m.Perms[len(m.Perms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOtherUserGenericInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOtherUserGenericInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOtherUserGenericInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EMail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EMail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOtherUserGenericInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOtherUserGenericInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOtherUserGenericInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOtherUserImportantInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOtherUserImportantInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOtherUserImportantInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddRoles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddRoles = append(m.AddRoles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelRoles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelRoles = append(m.DelRoles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOtherUserImportantInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOtherUserImportantInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOtherUserImportantInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddApiKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddApiKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddApiKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			m.WalletId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessType", wireType)
			}
			m.AccessType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddApiKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddApiKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddApiKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.ApiKey{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApiKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApiKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApiKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			m.WalletId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApiKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApiKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApiKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.ApiKey{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateApiKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateApiKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateApiKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessType", wireType)
			}
			m.AccessType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateApiKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateApiKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateApiKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteApiKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteApiKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteApiKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteApiKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteApiKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteApiKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WType", wireType)
			}
			m.WType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WType |= shared_gogo.WalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= shared_gogo.StateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.WalletInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCoinInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCoinInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCoinInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCoinInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCoinInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCoinInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.CoinInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWalletCoinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWalletCoinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWalletCoinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanDeposit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanDeposit = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanWithdraw", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanWithdraw = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWalletCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWalletCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWalletCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWalletCoinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWalletCoinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWalletCoinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWalletCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWalletCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWalletCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletCoinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletCoinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletCoinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.WalletCoin{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleAddressInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleAddressInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleAddressInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SimpleAddressInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNewAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNewAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNewAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNewAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNewAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNewAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.AddressInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HideAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HideAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HideAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HideAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HideAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HideAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HasAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HasAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HasAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HasAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HasAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HasAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoinFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCoinFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCoinFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoinFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCoinFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCoinFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeSlow", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FeeSlow = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeMiddle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FeeMiddle = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeFast", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FeeFast = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitFee", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LimitFee = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformFee", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PlatformFee = float64(math.Float64frombits(v))
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeSlowStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeSlowStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeFastStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeFastStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitFeeStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitFeeStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformFeeStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformFeeStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 112:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeMiddleStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeMiddleStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCoinTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCoinTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCoinTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinConfirmedNum", wireType)
			}
			m.MinConfirmedNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinConfirmedNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlockTime", wireType)
			}
			m.BeginBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginBlockTime |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockTime", wireType)
			}
			m.EndBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlockTime |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= shared_gogo.TxSideType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCoinTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCoinTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCoinTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.CoinTx{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCoinTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCoinTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCoinTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Wids = append(m.Wids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAssite
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAssite
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Wids) == 0 {
					m.Wids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssite
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Wids = append(m.Wids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Wids", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cids = append(m.Cids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAssite
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAssite
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cids) == 0 {
					m.Cids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssite
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cids = append(m.Cids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cids", wireType)
			}
		case 5:
			if wireType == 0 {
				var v shared_gogo.TxStateType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= shared_gogo.TxStateType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.States = append(m.States, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAssite
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAssite
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.States) == 0 {
					m.States = make([]shared_gogo.TxStateType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v shared_gogo.TxStateType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssite
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= shared_gogo.TxStateType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.States = append(m.States, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
		case 6:
			if wireType == 0 {
				var v shared_gogo.TxSideType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= shared_gogo.TxSideType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sides = append(m.Sides, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAssite
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAssite
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Sides) == 0 {
					m.Sides = make([]shared_gogo.TxSideType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v shared_gogo.TxSideType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssite
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= shared_gogo.TxSideType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sides = append(m.Sides, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sides", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlockTime", wireType)
			}
			m.BeginBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginBlockTime |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockTime", wireType)
			}
			m.EndBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlockTime |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginCreateAt", wireType)
			}
			m.BeginCreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginCreateAt |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndCreateAt", wireType)
			}
			m.EndCreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndCreateAt |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginUpdateAt", wireType)
			}
			m.BeginUpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginUpdateAt |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndUpdateAt", wireType)
			}
			m.EndUpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndUpdateAt |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCoinTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCoinTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCoinTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.CoinTx{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportCoinTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportCoinTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportCoinTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Wids = append(m.Wids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAssite
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAssite
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Wids) == 0 {
					m.Wids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssite
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Wids = append(m.Wids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Wids", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cids = append(m.Cids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAssite
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAssite
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cids) == 0 {
					m.Cids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssite
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cids = append(m.Cids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cids", wireType)
			}
		case 5:
			if wireType == 0 {
				var v shared_gogo.TxStateType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= shared_gogo.TxStateType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.States = append(m.States, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAssite
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAssite
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.States) == 0 {
					m.States = make([]shared_gogo.TxStateType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v shared_gogo.TxStateType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssite
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= shared_gogo.TxStateType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.States = append(m.States, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
		case 6:
			if wireType == 0 {
				var v shared_gogo.TxSideType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= shared_gogo.TxSideType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sides = append(m.Sides, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssite
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAssite
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAssite
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Sides) == 0 {
					m.Sides = make([]shared_gogo.TxSideType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v shared_gogo.TxSideType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssite
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= shared_gogo.TxSideType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sides = append(m.Sides, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sides", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlockTime", wireType)
			}
			m.BeginBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginBlockTime |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockTime", wireType)
			}
			m.EndBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlockTime |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportCoinTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportCoinTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportCoinTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amount = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCid", wireType)
			}
			m.FeeCid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeCid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Fee = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerTxid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InnerTxid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWithdrawDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWithdrawDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWithdrawDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWithdrawDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWithdrawDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWithdrawDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.CoinTx{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWalletAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWalletAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWalletAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWalletAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWalletAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWalletAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.WalletAsset{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.WalletAsset{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.WalletDetail{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletCoinDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletCoinDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletCoinDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletCoinDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletCoinDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletCoinDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.WalletCoinDetail{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWithdrawSettingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWithdrawSettingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWithdrawSettingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApproveAll = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawCallbackUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawCallbackUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferCallbackUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferCallbackUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsContainConfirmNum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsContainConfirmNum = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWithdrawSettingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWithdrawSettingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWithdrawSettingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWithdrawSettingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWithdrawSettingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWithdrawSettingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApproveAll = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawCallbackUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawCallbackUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferCallbackUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferCallbackUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsContainConfirmNum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsContainConfirmNum = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWithdrawSettingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWithdrawSettingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWithdrawSettingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWithdrawSettingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWithdrawSettingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWithdrawSettingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWithdrawSettingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWithdrawSettingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWithdrawSettingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWithdrawSettingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWithdrawSettingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWithdrawSettingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWithdrawSettingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWithdrawSettingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWithdrawSettingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.WithdrawSetting{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWithdrawQuotaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWithdrawQuotaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWithdrawQuotaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotaPerTx", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.QuotaPerTx = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotaPerHour", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.QuotaPerHour = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotaPerDay", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.QuotaPerDay = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedPerson", wireType)
			}
			m.ApprovedPerson = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApprovedPerson |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWithdrawQuotaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWithdrawQuotaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWithdrawQuotaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWithdrawQuotaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWithdrawQuotaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWithdrawQuotaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWithdrawQuotaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWithdrawQuotaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWithdrawQuotaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWithdrawQuotaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWithdrawQuotaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWithdrawQuotaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWithdrawQuotaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWithdrawQuotaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWithdrawQuotaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.CoinWithdrawQuota{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWithdrawWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWithdrawWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWithdrawWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= shared_gogo.StateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWithdrawWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWithdrawWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWithdrawWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWithdrawWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWithdrawWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWithdrawWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWithdrawWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWithdrawWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWithdrawWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWithdrawWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWithdrawWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWithdrawWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWithdrawWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWithdrawWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWithdrawWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.CoinWithdrawWhitelist{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWithdrawPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWithdrawPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWithdrawPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddItem == nil {
				m.AddItem = &shared_gogo.WithdrawPolicy{}
			}
			if err := m.AddItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelItem == nil {
				m.DelItem = &shared_gogo.WithdrawPolicy{}
			}
			if err := m.DelItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateItem == nil {
				m.UpdateItem = &shared_gogo.WithdrawPolicy{}
			}
			if err := m.UpdateItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWithdrawPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWithdrawPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWithdrawPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWithdrawPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWithdrawPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWithdrawPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWithdrawPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWithdrawPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWithdrawPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.WithdrawPolicy{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.Message{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.Message{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.Message{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAssite(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAssite
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAssite
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAssite
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAssite
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAssite
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAssite        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAssite          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAssite = fmt.Errorf("proto: unexpected end of group")
)
