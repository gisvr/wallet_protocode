// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: assite.proto

package pbassite

import (
	"context"

	bm "github.com/gisvr/golib/net/http/blademaster"
	"github.com/gisvr/golib/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathAsSiteRegister = "/regist"
var PathAsSiteUserActive = "/regist/active"
var PathAsSiteReSendActivationCode = "/regist/active/resend"
var PathAsSiteListCountryCode = "/code/list"
var PathAsSiteLogin = "/login"
var PathAsSiteLogout = "/logout"
var PathAsSiteForgetPass = "/forget/pass"
var PathAsSiteUserInvite = "/user/invite"
var PathAsSiteApplyResetOtherPass = "/user/other/pass/reset"
var PathAsSiteApplyResetOther2FA = "/user/other/2fa/reset"
var PathAsSiteUpdateOtherUserGenericInfo = "/user/other/info/update"
var PathAsSiteUpdateOtherUserImportantInfo = "/user/other/role/update"
var PathAsSiteResetMePass = "/user/me/pass/reset"
var PathAsSiteResetMe2FA = "/user/me/2fa/reset"
var PathAsSiteGetMe = "/user/me"
var PathAsSiteUpdateMe = "/user/me/update"
var PathAsSiteVerifyMePass = "/user/me/pass/verify"
var PathAsSiteListUser = "/user/list"
var PathAsSiteListRoleAndPermission = "/user/role/perm/list"
var PathAsSiteAddWallet = "/wallet/add"
var PathAsSiteUpdateWallet = "/wallet/update"
var PathAsSiteRemoveWallet = "/wallet/delete"
var PathAsSiteListWallet = "/wallet/list"
var PathAsSiteListApiKey = "/wallet/api/key/list"
var PathAsSiteAddApiKey = "/wallet/api/key/add"
var PathAsSiteDeleteApiKey = "/wallet/api/key/delete"
var PathAsSiteUpdateApiKey = "/wallet/api/key/update"
var PathAsSiteListCoinInfo = "/coin/list"
var PathAsSiteAddWalletCoin = "/wallet/coin/add"
var PathAsSiteRemoveWalletCoin = "/wallet/coin/delete"
var PathAsSiteListWalletCoin = "/wallet/coin/list"
var PathAsSiteGetNewAddress = "/wallet/coin/address/add"
var PathAsSiteHideAddress = "/wallet/coin/address/hide"
var PathAsSiteListAddress = "/wallet/coin/address/list"
var PathAsSiteHasAddress = "/wallet/coin/address/exist"
var PathAsSiteCheckAddress = "/wallet/coin/address/check"
var PathAsSiteGetCoinFee = "/wallet/coin/fee"
var PathAsSiteListCoinTx = "/wallet/coin/tx/list2"
var PathAsSiteQueryCoinTx = "/wallet/coin/tx/list"
var PathAsSiteExportCoinTx = "/wallet/coin/tx/export"
var PathAsSiteNewWithdraw = "/wallet/coin/withdraw/add"
var PathAsSiteGetWithdrawDetail = "/wallet/coin/withdraw/tx/get"
var PathAsSiteGetWalletAsset = "/wallet/asset/get"
var PathAsSiteListWalletAsset = "/wallet/asset/list"
var PathAsSiteListWalletDetail = "/wallet/detail/list"
var PathAsSiteListWalletCoinDetail = "/wallet/coin/detail/list"
var PathAsSiteAddWithdrawSetting = "/wallet/coin/setting/add"
var PathAsSiteUpdateWithdrawSetting = "/wallet/coin/setting/update"
var PathAsSiteRemoveWithdrawSetting = "/wallet/coin/setting/delete"
var PathAsSiteGetWithdrawSetting = "/wallet/coin/setting/get"
var PathAsSiteAddWithdrawQuota = "/wallet/coin/setting/quota/add"
var PathAsSiteRemoveWithdrawQuota = "/wallet/coin/setting/quota/delete"
var PathAsSiteListWithdrawQuota = "/wallet/coin/setting/quota/list"
var PathAsSiteAddWithdrawWhitelist = "/wallet/coin/setting/whitelist/add"
var PathAsSiteRemoveWithdrawWhitelist = "/wallet/coin/setting/whitelist/delete"
var PathAsSiteListWithdrawWhitelist = "/wallet/coin/setting/whitelist/list"
var PathAsSiteUpdateWithdrawPolicy = "/wallet/coin/policy/update"
var PathAsSiteListWithdrawPolicy = "/wallet/coin/policy/list"
var PathAsSiteAddMessage = "/wallet/message/add"
var PathAsSiteUpdateMessage = "/wallet/message/update"
var PathAsSiteListMessage = "/wallet/message/list"

const (
	PermissionRegister                     = "PermissionAsSiteRegister"
	PermissionUserActive                   = "PermissionAsSiteUserActive"
	PermissionReSendActivationCode         = "PermissionAsSiteReSendActivationCode"
	PermissionListCountryCode              = "PermissionAsSiteListCountryCode"
	PermissionLogin                        = "PermissionAsSiteLogin"
	PermissionLogout                       = "PermissionAsSiteLogout"
	PermissionForgetPass                   = "PermissionAsSiteForgetPass"
	PermissionUserInvite                   = "PermissionAsSiteUserInvite"
	PermissionApplyResetOtherPass          = "PermissionAsSiteApplyResetOtherPass"
	PermissionApplyResetOther2FA           = "PermissionAsSiteApplyResetOther2FA"
	PermissionUpdateOtherUserGenericInfo   = "PermissionAsSiteUpdateOtherUserGenericInfo"
	PermissionUpdateOtherUserImportantInfo = "PermissionAsSiteUpdateOtherUserImportantInfo"
	PermissionResetMePass                  = "PermissionAsSiteResetMePass"
	PermissionResetMe2FA                   = "PermissionAsSiteResetMe2FA"
	PermissionGetMe                        = "PermissionAsSiteGetMe"
	PermissionUpdateMe                     = "PermissionAsSiteUpdateMe"
	PermissionVerifyMePass                 = "PermissionAsSiteVerifyMePass"
	PermissionListUser                     = "PermissionAsSiteListUser"
	PermissionListRoleAndPermission        = "PermissionAsSiteListRoleAndPermission"
	PermissionAddWallet                    = "PermissionAsSiteAddWallet"
	PermissionUpdateWallet                 = "PermissionAsSiteUpdateWallet"
	PermissionRemoveWallet                 = "PermissionAsSiteRemoveWallet"
	PermissionListWallet                   = "PermissionAsSiteListWallet"
	PermissionListApiKey                   = "PermissionAsSiteListApiKey"
	PermissionAddApiKey                    = "PermissionAsSiteAddApiKey"
	PermissionDeleteApiKey                 = "PermissionAsSiteDeleteApiKey"
	PermissionUpdateApiKey                 = "PermissionAsSiteUpdateApiKey"
	PermissionListCoinInfo                 = "PermissionAsSiteListCoinInfo"
	PermissionAddWalletCoin                = "PermissionAsSiteAddWalletCoin"
	PermissionRemoveWalletCoin             = "PermissionAsSiteRemoveWalletCoin"
	PermissionListWalletCoin               = "PermissionAsSiteListWalletCoin"
	PermissionGetNewAddress                = "PermissionAsSiteGetNewAddress"
	PermissionHideAddress                  = "PermissionAsSiteHideAddress"
	PermissionListAddress                  = "PermissionAsSiteListAddress"
	PermissionHasAddress                   = "PermissionAsSiteHasAddress"
	PermissionCheckAddress                 = "PermissionAsSiteCheckAddress"
	PermissionGetCoinFee                   = "PermissionAsSiteGetCoinFee"
	PermissionListCoinTx                   = "PermissionAsSiteListCoinTx"
	PermissionQueryCoinTx                  = "PermissionAsSiteQueryCoinTx"
	PermissionExportCoinTx                 = "PermissionAsSiteExportCoinTx"
	PermissionNewWithdraw                  = "PermissionAsSiteNewWithdraw"
	PermissionGetWithdrawDetail            = "PermissionAsSiteGetWithdrawDetail"
	PermissionGetWalletAsset               = "PermissionAsSiteGetWalletAsset"
	PermissionListWalletAsset              = "PermissionAsSiteListWalletAsset"
	PermissionListWalletDetail             = "PermissionAsSiteListWalletDetail"
	PermissionListWalletCoinDetail         = "PermissionAsSiteListWalletCoinDetail"
	PermissionAddWithdrawSetting           = "PermissionAsSiteAddWithdrawSetting"
	PermissionUpdateWithdrawSetting        = "PermissionAsSiteUpdateWithdrawSetting"
	PermissionRemoveWithdrawSetting        = "PermissionAsSiteRemoveWithdrawSetting"
	PermissionGetWithdrawSetting           = "PermissionAsSiteGetWithdrawSetting"
	PermissionAddWithdrawQuota             = "PermissionAsSiteAddWithdrawQuota"
	PermissionRemoveWithdrawQuota          = "PermissionAsSiteRemoveWithdrawQuota"
	PermissionListWithdrawQuota            = "PermissionAsSiteListWithdrawQuota"
	PermissionAddWithdrawWhitelist         = "PermissionAsSiteAddWithdrawWhitelist"
	PermissionRemoveWithdrawWhitelist      = "PermissionAsSiteRemoveWithdrawWhitelist"
	PermissionListWithdrawWhitelist        = "PermissionAsSiteListWithdrawWhitelist"
	PermissionUpdateWithdrawPolicy         = "PermissionAsSiteUpdateWithdrawPolicy"
	PermissionListWithdrawPolicy           = "PermissionAsSiteListWithdrawPolicy"
	PermissionAddMessage                   = "PermissionAsSiteAddMessage"
	PermissionUpdateMessage                = "PermissionAsSiteUpdateMessage"
	PermissionListMessage                  = "PermissionAsSiteListMessage"
)

type Permission struct {
	Module      string
	Name        string
	Url         string
	Description string
}

var Perms = []Permission{
	Permission{"AsSite", PermissionRegister, PathAsSiteRegister, "注册 新增一用户、一账户"},
	Permission{"AsSite", PermissionUserActive, PathAsSiteUserActive, "激活 激活码内有操作符：1 激活、2 改密码、3 改2FA；改FA流程第一次调用返回FACode，第二次调用验证FA通过后才能激活"},
	Permission{"AsSite", PermissionReSendActivationCode, PathAsSiteReSendActivationCode, "重新发送一次激活码"},
	Permission{"AsSite", PermissionListCountryCode, PathAsSiteListCountryCode, "获取地区代码"},
	Permission{"AsSite", PermissionLogin, PathAsSiteLogin, "登录"},
	Permission{"AsSite", PermissionLogout, PathAsSiteLogout, "登出"},
	Permission{"AsSite", PermissionForgetPass, PathAsSiteForgetPass, "忘记密码"},
	Permission{"AsSite", PermissionUserInvite, PathAsSiteUserInvite, "邀请用户 新增用户，但用户暂时是冻结的，必须激活"},
	Permission{"AsSite", PermissionApplyResetOtherPass, PathAsSiteApplyResetOtherPass, "申请重置其它用户的密码，系统将向该用户发邮件`激活码`"},
	Permission{"AsSite", PermissionApplyResetOther2FA, PathAsSiteApplyResetOther2FA, "申请重置其它用户的2FA，系统将向该用户发邮件`激活码`"},
	Permission{"AsSite", PermissionUpdateOtherUserGenericInfo, PathAsSiteUpdateOtherUserGenericInfo, " 更新用户一般信息"},
	Permission{"AsSite", PermissionUpdateOtherUserImportantInfo, PathAsSiteUpdateOtherUserImportantInfo, "给用户分配权限/冻结/解冻"},
	Permission{"AsSite", PermissionResetMePass, PathAsSiteResetMePass, "立即重置自己的密码"},
	Permission{"AsSite", PermissionResetMe2FA, PathAsSiteResetMe2FA, "立即重置自己的2FA, 第一次调用返回FACode,第二次调用验证通过才能重置"},
	Permission{"AsSite", PermissionGetMe, PathAsSiteGetMe, "获取登录用户自己的信息"},
	Permission{"AsSite", PermissionUpdateMe, PathAsSiteUpdateMe, "更新登录用户自己的信息"},
	Permission{"AsSite", PermissionVerifyMePass, PathAsSiteVerifyMePass, "验证自己的密码"},
	Permission{"AsSite", PermissionListUser, PathAsSiteListUser, "用户列表"},
	Permission{"AsSite", PermissionListRoleAndPermission, PathAsSiteListRoleAndPermission, "获取角色/权限列表"},
	Permission{"AsSite", PermissionAddWallet, PathAsSiteAddWallet, "新增钱包"},
	Permission{"AsSite", PermissionUpdateWallet, PathAsSiteUpdateWallet, "更新钱包"},
	Permission{"AsSite", PermissionRemoveWallet, PathAsSiteRemoveWallet, "移除钱包"},
	Permission{"AsSite", PermissionListWallet, PathAsSiteListWallet, "获取钱包列表"},
	Permission{"AsSite", PermissionListApiKey, PathAsSiteListApiKey, " 获取API_KEY列表"},
	Permission{"AsSite", PermissionAddApiKey, PathAsSiteAddApiKey, "添加API_KEY"},
	Permission{"AsSite", PermissionDeleteApiKey, PathAsSiteDeleteApiKey, "删除API_KEY"},
	Permission{"AsSite", PermissionUpdateApiKey, PathAsSiteUpdateApiKey, "更新API_KEY"},
	Permission{"AsSite", PermissionListCoinInfo, PathAsSiteListCoinInfo, "获取系统已经支持支持的Coin列表"},
	Permission{"AsSite", PermissionAddWalletCoin, PathAsSiteAddWalletCoin, "钱包添加coin"},
	Permission{"AsSite", PermissionRemoveWalletCoin, PathAsSiteRemoveWalletCoin, "钱包删除Coin"},
	Permission{"AsSite", PermissionListWalletCoin, PathAsSiteListWalletCoin, "获取钱包已添加的Coin列表"},
	Permission{"AsSite", PermissionGetNewAddress, PathAsSiteGetNewAddress, "钱包申请新地址"},
	Permission{"AsSite", PermissionHideAddress, PathAsSiteHideAddress, "钱包隐藏地址"},
	Permission{"AsSite", PermissionListAddress, PathAsSiteListAddress, "获取钱包指定coin的所有地址"},
	Permission{"AsSite", PermissionHasAddress, PathAsSiteHasAddress, "验证钱包指定coin的地址是否存在"},
	Permission{"AsSite", PermissionCheckAddress, PathAsSiteCheckAddress, "验证指定coin的地址是否合法有效"},
	Permission{"AsSite", PermissionGetCoinFee, PathAsSiteGetCoinFee, "获取coin当前的最佳手续费率"},
	Permission{"AsSite", PermissionListCoinTx, PathAsSiteListCoinTx, "获取交易列表"},
	Permission{"AsSite", PermissionQueryCoinTx, PathAsSiteQueryCoinTx, "查询交易"},
	Permission{"AsSite", PermissionExportCoinTx, PathAsSiteExportCoinTx, "导出交易列表"},
	Permission{"AsSite", PermissionNewWithdraw, PathAsSiteNewWithdraw, "申请提现"},
	Permission{"AsSite", PermissionGetWithdrawDetail, PathAsSiteGetWithdrawDetail, "获取交易详细信息"},
	Permission{"AsSite", PermissionGetWalletAsset, PathAsSiteGetWalletAsset, "获取钱包coin信息及资产余额"},
	Permission{"AsSite", PermissionListWalletAsset, PathAsSiteListWalletAsset, "获取钱包资产余额列表"},
	Permission{"AsSite", PermissionListWalletDetail, PathAsSiteListWalletDetail, "获取钱包详情列表"},
	Permission{"AsSite", PermissionListWalletCoinDetail, PathAsSiteListWalletCoinDetail, "获取钱包详情列表"},
	Permission{"AsSite", PermissionAddWithdrawSetting, PathAsSiteAddWithdrawSetting, "添加钱包Coin参数设置"},
	Permission{"AsSite", PermissionUpdateWithdrawSetting, PathAsSiteUpdateWithdrawSetting, "更新钱包Coin参数设置"},
	Permission{"AsSite", PermissionRemoveWithdrawSetting, PathAsSiteRemoveWithdrawSetting, "移除钱包Coin参数设置"},
	Permission{"AsSite", PermissionGetWithdrawSetting, PathAsSiteGetWithdrawSetting, "获取钱包Coin参数设置"},
	Permission{"AsSite", PermissionAddWithdrawQuota, PathAsSiteAddWithdrawQuota, "增加钱包Coin提现限额设置"},
	Permission{"AsSite", PermissionRemoveWithdrawQuota, PathAsSiteRemoveWithdrawQuota, "移除钱包Coin提现限额设置"},
	Permission{"AsSite", PermissionListWithdrawQuota, PathAsSiteListWithdrawQuota, "获取钱包Coin提现限额设置列表"},
	Permission{"AsSite", PermissionAddWithdrawWhitelist, PathAsSiteAddWithdrawWhitelist, "增加钱包Coin提现白名单设置"},
	Permission{"AsSite", PermissionRemoveWithdrawWhitelist, PathAsSiteRemoveWithdrawWhitelist, "移除钱包Coin提现白名单设置"},
	Permission{"AsSite", PermissionListWithdrawWhitelist, PathAsSiteListWithdrawWhitelist, "获取钱包Coin提现白名单设置列表"},
	Permission{"AsSite", PermissionUpdateWithdrawPolicy, PathAsSiteUpdateWithdrawPolicy, "更新钱包Coin策略参数"},
	Permission{"AsSite", PermissionListWithdrawPolicy, PathAsSiteListWithdrawPolicy, "获取钱包Coin策略参数设置列表"},
	Permission{"AsSite", PermissionAddMessage, PathAsSiteAddMessage, "增加推送消息"},
	Permission{"AsSite", PermissionUpdateMessage, PathAsSiteUpdateMessage, "更新推送消息"},
	Permission{"AsSite", PermissionListMessage, PathAsSiteListMessage, "获取推送消息列表"},
}

// AsSiteBMServer is the server API for AsSite service.
type AsSiteBMServer interface {
	// 注册 新增一用户、一账户
	Register(ctx context.Context, req *RegisterRequest) (resp *RegisterResponse, err error)

	// 激活 激活码内有操作符：1 激活、2 改密码、3 改2FA；改FA流程第一次调用返回FACode，第二次调用验证FA通过后才能激活
	UserActive(ctx context.Context, req *UserActiveRequest) (resp *UserActiveResponse, err error)

	// 重新发送一次激活码
	ReSendActivationCode(ctx context.Context, req *ReSendActivationCodeRequest) (resp *ReSendActivationCodeResponse, err error)

	// 获取地区代码
	ListCountryCode(ctx context.Context, req *ListCountryCodeRequest) (resp *ListCountryCodeResponse, err error)

	// 登录
	Login(ctx context.Context, req *LoginRequest) (resp *LoginResponse, err error)

	// 登出
	Logout(ctx context.Context, req *LogoutRequest) (resp *LogoutResponse, err error)

	// 忘记密码
	ForgetPass(ctx context.Context, req *ForgetPassRequest) (resp *ForgetPassResponse, err error)

	// 邀请用户 新增用户，但用户暂时是冻结的，必须激活
	UserInvite(ctx context.Context, req *UserInviteRequest) (resp *UserInviteResponse, err error)

	// 申请重置其它用户的密码，系统将向该用户发邮件`激活码`
	ApplyResetOtherPass(ctx context.Context, req *ApplyResetOtherPassRequest) (resp *ApplyResetOtherPassResponse, err error)

	// 申请重置其它用户的2FA，系统将向该用户发邮件`激活码`
	ApplyResetOther2FA(ctx context.Context, req *ApplyResetOther2FARequest) (resp *ApplyResetOther2FAResponse, err error)

	// 更新用户一般信息
	UpdateOtherUserGenericInfo(ctx context.Context, req *UpdateOtherUserGenericInfoRequest) (resp *UpdateOtherUserGenericInfoResponse, err error)

	// 给用户分配权限/冻结/解冻
	UpdateOtherUserImportantInfo(ctx context.Context, req *UpdateOtherUserImportantInfoRequest) (resp *UpdateOtherUserImportantInfoResponse, err error)

	// 立即重置自己的密码
	ResetMePass(ctx context.Context, req *ResetMePassRequest) (resp *ResetMePassResponse, err error)

	// 立即重置自己的2FA, 第一次调用返回FACode,第二次调用验证通过才能重置
	ResetMe2FA(ctx context.Context, req *ResetMe2FARequest) (resp *ResetMe2FAResponse, err error)

	// 获取登录用户自己的信息
	GetMe(ctx context.Context, req *GetMeRequest) (resp *GetMeResponse, err error)

	// 更新登录用户自己的信息
	UpdateMe(ctx context.Context, req *UpdateMeRequest) (resp *UpdateMeResponse, err error)

	// 验证自己的密码
	VerifyMePass(ctx context.Context, req *VerifyMePassRequest) (resp *VerifyMePassResponse, err error)

	// 用户列表
	ListUser(ctx context.Context, req *ListUserRequest) (resp *ListUserResponse, err error)

	// 获取角色/权限列表
	ListRoleAndPermission(ctx context.Context, req *ListRoleAndPermissionRequest) (resp *ListRoleAndPermissionResponse, err error)

	// 新增钱包
	AddWallet(ctx context.Context, req *AddWalletRequest) (resp *AddWalletResponse, err error)

	// 更新钱包
	UpdateWallet(ctx context.Context, req *UpdateWalletRequest) (resp *UpdateWalletResponse, err error)

	// 移除钱包
	RemoveWallet(ctx context.Context, req *RemoveWalletRequest) (resp *RemoveWalletResponse, err error)

	// 获取钱包列表
	ListWallet(ctx context.Context, req *ListWalletRequest) (resp *ListWalletResponse, err error)

	// 获取API_KEY列表
	ListApiKey(ctx context.Context, req *ListApiKeyRequest) (resp *ListApiKeyResponse, err error)

	// 添加API_KEY
	AddApiKey(ctx context.Context, req *AddApiKeyRequest) (resp *AddApiKeyResponse, err error)

	// 删除API_KEY
	DeleteApiKey(ctx context.Context, req *DeleteApiKeyRequest) (resp *DeleteApiKeyResponse, err error)

	// 更新API_KEY
	UpdateApiKey(ctx context.Context, req *UpdateApiKeyRequest) (resp *UpdateApiKeyResponse, err error)

	// 获取系统已经支持支持的Coin列表
	ListCoinInfo(ctx context.Context, req *ListCoinInfoRequest) (resp *ListCoinInfoResponse, err error)

	// 钱包添加coin
	AddWalletCoin(ctx context.Context, req *AddWalletCoinRequest) (resp *AddWalletCoinResponse, err error)

	// 钱包删除Coin
	RemoveWalletCoin(ctx context.Context, req *RemoveWalletCoinRequest) (resp *RemoveWalletCoinResponse, err error)

	// 获取钱包已添加的Coin列表
	ListWalletCoin(ctx context.Context, req *ListWalletCoinRequest) (resp *ListWalletCoinResponse, err error)

	// 钱包申请新地址
	GetNewAddress(ctx context.Context, req *GetNewAddressRequest) (resp *GetNewAddressResponse, err error)

	// 钱包隐藏地址
	HideAddress(ctx context.Context, req *HideAddressRequest) (resp *HideAddressResponse, err error)

	// 获取钱包指定coin的所有地址
	ListAddress(ctx context.Context, req *ListAddressRequest) (resp *ListAddressResponse, err error)

	// 验证钱包指定coin的地址是否存在
	HasAddress(ctx context.Context, req *HasAddressRequest) (resp *HasAddressResponse, err error)

	// 验证指定coin的地址是否合法有效
	CheckAddress(ctx context.Context, req *CheckAddressRequest) (resp *CheckAddressResponse, err error)

	// 获取coin当前的最佳手续费率
	GetCoinFee(ctx context.Context, req *GetCoinFeeRequest) (resp *GetCoinFeeResponse, err error)

	// 获取交易列表
	ListCoinTx(ctx context.Context, req *ListCoinTxRequest) (resp *ListCoinTxResponse, err error)

	// 查询交易
	QueryCoinTx(ctx context.Context, req *QueryCoinTxRequest) (resp *QueryCoinTxResponse, err error)

	// 导出交易列表
	ExportCoinTx(ctx context.Context, req *ExportCoinTxRequest) (resp *ExportCoinTxResponse, err error)

	// 申请提现
	NewWithdraw(ctx context.Context, req *NewWithdrawRequest) (resp *NewWithdrawResponse, err error)

	// 获取交易详细信息
	GetWithdrawDetail(ctx context.Context, req *GetWithdrawDetailRequest) (resp *GetWithdrawDetailResponse, err error)

	// 获取钱包coin信息及资产余额
	GetWalletAsset(ctx context.Context, req *GetWalletAssetRequest) (resp *GetWalletAssetResponse, err error)

	// 获取钱包资产余额列表
	ListWalletAsset(ctx context.Context, req *ListWalletAssetRequest) (resp *ListWalletAssetResponse, err error)

	// 获取钱包详情列表
	ListWalletDetail(ctx context.Context, req *ListWalletDetailRequest) (resp *ListWalletDetailResponse, err error)

	// 获取钱包详情列表
	ListWalletCoinDetail(ctx context.Context, req *ListWalletCoinDetailRequest) (resp *ListWalletCoinDetailResponse, err error)

	// 添加钱包Coin参数设置
	AddWithdrawSetting(ctx context.Context, req *AddWithdrawSettingRequest) (resp *AddWithdrawSettingResponse, err error)

	// 更新钱包Coin参数设置
	UpdateWithdrawSetting(ctx context.Context, req *UpdateWithdrawSettingRequest) (resp *UpdateWithdrawSettingResponse, err error)

	// 移除钱包Coin参数设置
	RemoveWithdrawSetting(ctx context.Context, req *RemoveWithdrawSettingRequest) (resp *RemoveWithdrawSettingResponse, err error)

	// 获取钱包Coin参数设置
	GetWithdrawSetting(ctx context.Context, req *GetWithdrawSettingRequest) (resp *GetWithdrawSettingResponse, err error)

	// 增加钱包Coin提现限额设置
	AddWithdrawQuota(ctx context.Context, req *AddWithdrawQuotaRequest) (resp *AddWithdrawQuotaResponse, err error)

	// 移除钱包Coin提现限额设置
	RemoveWithdrawQuota(ctx context.Context, req *RemoveWithdrawQuotaRequest) (resp *RemoveWithdrawQuotaResponse, err error)

	// 获取钱包Coin提现限额设置列表
	ListWithdrawQuota(ctx context.Context, req *ListWithdrawQuotaRequest) (resp *ListWithdrawQuotaResponse, err error)

	// 增加钱包Coin提现白名单设置
	AddWithdrawWhitelist(ctx context.Context, req *AddWithdrawWhitelistRequest) (resp *AddWithdrawWhitelistResponse, err error)

	// 移除钱包Coin提现白名单设置
	RemoveWithdrawWhitelist(ctx context.Context, req *RemoveWithdrawWhitelistRequest) (resp *RemoveWithdrawWhitelistResponse, err error)

	// 获取钱包Coin提现白名单设置列表
	ListWithdrawWhitelist(ctx context.Context, req *ListWithdrawWhitelistRequest) (resp *ListWithdrawWhitelistResponse, err error)

	// 更新钱包Coin策略参数
	UpdateWithdrawPolicy(ctx context.Context, req *UpdateWithdrawPolicyRequest) (resp *UpdateWithdrawPolicyResponse, err error)

	// 获取钱包Coin策略参数设置列表
	ListWithdrawPolicy(ctx context.Context, req *ListWithdrawPolicyRequest) (resp *ListWithdrawPolicyResponse, err error)

	// 增加推送消息
	AddMessage(ctx context.Context, req *AddMessageRequest) (resp *AddMessageResponse, err error)

	// 更新推送消息
	UpdateMessage(ctx context.Context, req *UpdateMessageRequest) (resp *UpdateMessageResponse, err error)

	// 获取推送消息列表
	ListMessage(ctx context.Context, req *ListMessageRequest) (resp *ListMessageResponse, err error)
}

var AsSiteSvc AsSiteBMServer

type JSONReaderFunc func(c *bm.Context, data interface{}, err error)

func DefaultJSONReader(c *bm.Context, data interface{}, err error) {
	c.JSON(data, err)
}

var JF JSONReaderFunc = DefaultJSONReader

func AsSiteRegister(c *bm.Context) {
	p := new(RegisterRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.Register(c, p)
	JF(c, resp, err)
}

func AsSiteUserActive(c *bm.Context) {
	p := new(UserActiveRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.UserActive(c, p)
	JF(c, resp, err)
}

func AsSiteReSendActivationCode(c *bm.Context) {
	p := new(ReSendActivationCodeRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ReSendActivationCode(c, p)
	JF(c, resp, err)
}

func AsSiteListCountryCode(c *bm.Context) {
	p := new(ListCountryCodeRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListCountryCode(c, p)
	JF(c, resp, err)
}

func AsSiteLogin(c *bm.Context) {
	p := new(LoginRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.Login(c, p)
	JF(c, resp, err)
}

func AsSiteLogout(c *bm.Context) {
	p := new(LogoutRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.Logout(c, p)
	JF(c, resp, err)
}

func AsSiteForgetPass(c *bm.Context) {
	p := new(ForgetPassRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ForgetPass(c, p)
	JF(c, resp, err)
}

func AsSiteUserInvite(c *bm.Context) {
	p := new(UserInviteRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.UserInvite(c, p)
	JF(c, resp, err)
}

func AsSiteApplyResetOtherPass(c *bm.Context) {
	p := new(ApplyResetOtherPassRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ApplyResetOtherPass(c, p)
	JF(c, resp, err)
}

func AsSiteApplyResetOther2FA(c *bm.Context) {
	p := new(ApplyResetOther2FARequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ApplyResetOther2FA(c, p)
	JF(c, resp, err)
}

func AsSiteUpdateOtherUserGenericInfo(c *bm.Context) {
	p := new(UpdateOtherUserGenericInfoRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.UpdateOtherUserGenericInfo(c, p)
	JF(c, resp, err)
}

func AsSiteUpdateOtherUserImportantInfo(c *bm.Context) {
	p := new(UpdateOtherUserImportantInfoRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.UpdateOtherUserImportantInfo(c, p)
	JF(c, resp, err)
}

func AsSiteResetMePass(c *bm.Context) {
	p := new(ResetMePassRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ResetMePass(c, p)
	JF(c, resp, err)
}

func AsSiteResetMe2FA(c *bm.Context) {
	p := new(ResetMe2FARequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ResetMe2FA(c, p)
	JF(c, resp, err)
}

func AsSiteGetMe(c *bm.Context) {
	p := new(GetMeRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.GetMe(c, p)
	JF(c, resp, err)
}

func AsSiteUpdateMe(c *bm.Context) {
	p := new(UpdateMeRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.UpdateMe(c, p)
	JF(c, resp, err)
}

func AsSiteVerifyMePass(c *bm.Context) {
	p := new(VerifyMePassRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.VerifyMePass(c, p)
	JF(c, resp, err)
}

func AsSiteListUser(c *bm.Context) {
	p := new(ListUserRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListUser(c, p)
	JF(c, resp, err)
}

func AsSiteListRoleAndPermission(c *bm.Context) {
	p := new(ListRoleAndPermissionRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListRoleAndPermission(c, p)
	JF(c, resp, err)
}

func AsSiteAddWallet(c *bm.Context) {
	p := new(AddWalletRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.AddWallet(c, p)
	JF(c, resp, err)
}

func AsSiteUpdateWallet(c *bm.Context) {
	p := new(UpdateWalletRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.UpdateWallet(c, p)
	JF(c, resp, err)
}

func AsSiteRemoveWallet(c *bm.Context) {
	p := new(RemoveWalletRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.RemoveWallet(c, p)
	JF(c, resp, err)
}

func AsSiteListWallet(c *bm.Context) {
	p := new(ListWalletRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListWallet(c, p)
	JF(c, resp, err)
}

func AsSiteListApiKey(c *bm.Context) {
	p := new(ListApiKeyRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListApiKey(c, p)
	JF(c, resp, err)
}

func AsSiteAddApiKey(c *bm.Context) {
	p := new(AddApiKeyRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.AddApiKey(c, p)
	JF(c, resp, err)
}

func AsSiteDeleteApiKey(c *bm.Context) {
	p := new(DeleteApiKeyRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.DeleteApiKey(c, p)
	JF(c, resp, err)
}

func AsSiteUpdateApiKey(c *bm.Context) {
	p := new(UpdateApiKeyRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.UpdateApiKey(c, p)
	JF(c, resp, err)
}

func AsSiteListCoinInfo(c *bm.Context) {
	p := new(ListCoinInfoRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListCoinInfo(c, p)
	JF(c, resp, err)
}

func AsSiteAddWalletCoin(c *bm.Context) {
	p := new(AddWalletCoinRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.AddWalletCoin(c, p)
	JF(c, resp, err)
}

func AsSiteRemoveWalletCoin(c *bm.Context) {
	p := new(RemoveWalletCoinRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.RemoveWalletCoin(c, p)
	JF(c, resp, err)
}

func AsSiteListWalletCoin(c *bm.Context) {
	p := new(ListWalletCoinRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListWalletCoin(c, p)
	JF(c, resp, err)
}

func AsSiteGetNewAddress(c *bm.Context) {
	p := new(GetNewAddressRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.GetNewAddress(c, p)
	JF(c, resp, err)
}

func AsSiteHideAddress(c *bm.Context) {
	p := new(HideAddressRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.HideAddress(c, p)
	JF(c, resp, err)
}

func AsSiteListAddress(c *bm.Context) {
	p := new(ListAddressRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListAddress(c, p)
	JF(c, resp, err)
}

func AsSiteHasAddress(c *bm.Context) {
	p := new(HasAddressRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.HasAddress(c, p)
	JF(c, resp, err)
}

func AsSiteCheckAddress(c *bm.Context) {
	p := new(CheckAddressRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.CheckAddress(c, p)
	JF(c, resp, err)
}

func AsSiteGetCoinFee(c *bm.Context) {
	p := new(GetCoinFeeRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.GetCoinFee(c, p)
	JF(c, resp, err)
}

func AsSiteListCoinTx(c *bm.Context) {
	p := new(ListCoinTxRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListCoinTx(c, p)
	JF(c, resp, err)
}

func AsSiteQueryCoinTx(c *bm.Context) {
	p := new(QueryCoinTxRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.QueryCoinTx(c, p)
	JF(c, resp, err)
}

func AsSiteExportCoinTx(c *bm.Context) {
	p := new(ExportCoinTxRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ExportCoinTx(c, p)
	JF(c, resp, err)
}

func AsSiteNewWithdraw(c *bm.Context) {
	p := new(NewWithdrawRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.NewWithdraw(c, p)
	JF(c, resp, err)
}

func AsSiteGetWithdrawDetail(c *bm.Context) {
	p := new(GetWithdrawDetailRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.GetWithdrawDetail(c, p)
	JF(c, resp, err)
}

func AsSiteGetWalletAsset(c *bm.Context) {
	p := new(GetWalletAssetRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.GetWalletAsset(c, p)
	JF(c, resp, err)
}

func AsSiteListWalletAsset(c *bm.Context) {
	p := new(ListWalletAssetRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListWalletAsset(c, p)
	JF(c, resp, err)
}

func AsSiteListWalletDetail(c *bm.Context) {
	p := new(ListWalletDetailRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListWalletDetail(c, p)
	JF(c, resp, err)
}

func AsSiteListWalletCoinDetail(c *bm.Context) {
	p := new(ListWalletCoinDetailRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListWalletCoinDetail(c, p)
	JF(c, resp, err)
}

func AsSiteAddWithdrawSetting(c *bm.Context) {
	p := new(AddWithdrawSettingRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.AddWithdrawSetting(c, p)
	JF(c, resp, err)
}

func AsSiteUpdateWithdrawSetting(c *bm.Context) {
	p := new(UpdateWithdrawSettingRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.UpdateWithdrawSetting(c, p)
	JF(c, resp, err)
}

func AsSiteRemoveWithdrawSetting(c *bm.Context) {
	p := new(RemoveWithdrawSettingRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.RemoveWithdrawSetting(c, p)
	JF(c, resp, err)
}

func AsSiteGetWithdrawSetting(c *bm.Context) {
	p := new(GetWithdrawSettingRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.GetWithdrawSetting(c, p)
	JF(c, resp, err)
}

func AsSiteAddWithdrawQuota(c *bm.Context) {
	p := new(AddWithdrawQuotaRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.AddWithdrawQuota(c, p)
	JF(c, resp, err)
}

func AsSiteRemoveWithdrawQuota(c *bm.Context) {
	p := new(RemoveWithdrawQuotaRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.RemoveWithdrawQuota(c, p)
	JF(c, resp, err)
}

func AsSiteListWithdrawQuota(c *bm.Context) {
	p := new(ListWithdrawQuotaRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListWithdrawQuota(c, p)
	JF(c, resp, err)
}

func AsSiteAddWithdrawWhitelist(c *bm.Context) {
	p := new(AddWithdrawWhitelistRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.AddWithdrawWhitelist(c, p)
	JF(c, resp, err)
}

func AsSiteRemoveWithdrawWhitelist(c *bm.Context) {
	p := new(RemoveWithdrawWhitelistRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.RemoveWithdrawWhitelist(c, p)
	JF(c, resp, err)
}

func AsSiteListWithdrawWhitelist(c *bm.Context) {
	p := new(ListWithdrawWhitelistRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListWithdrawWhitelist(c, p)
	JF(c, resp, err)
}

func AsSiteUpdateWithdrawPolicy(c *bm.Context) {
	p := new(UpdateWithdrawPolicyRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.UpdateWithdrawPolicy(c, p)
	JF(c, resp, err)
}

func AsSiteListWithdrawPolicy(c *bm.Context) {
	p := new(ListWithdrawPolicyRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListWithdrawPolicy(c, p)
	JF(c, resp, err)
}

func AsSiteAddMessage(c *bm.Context) {
	p := new(AddMessageRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.AddMessage(c, p)
	JF(c, resp, err)
}

func AsSiteUpdateMessage(c *bm.Context) {
	p := new(UpdateMessageRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.UpdateMessage(c, p)
	JF(c, resp, err)
}

func AsSiteListMessage(c *bm.Context) {
	p := new(ListMessageRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsSiteSvc.ListMessage(c, p)
	JF(c, resp, err)
}

// RegisterAsSiteBMServer Register the blademaster route
func RegisterAsSiteBMServer(e *bm.Engine, server AsSiteBMServer) {
	AsSiteSvc = server
	e.POST(PathAsSiteRegister, AsSiteRegister)
	e.POST(PathAsSiteUserActive, AsSiteUserActive)
	e.POST(PathAsSiteReSendActivationCode, AsSiteReSendActivationCode)
	e.POST(PathAsSiteListCountryCode, AsSiteListCountryCode)
	e.POST(PathAsSiteLogin, AsSiteLogin)
	e.POST(PathAsSiteLogout, AsSiteLogout)
	e.POST(PathAsSiteForgetPass, AsSiteForgetPass)
	e.POST(PathAsSiteUserInvite, AsSiteUserInvite)
	e.POST(PathAsSiteApplyResetOtherPass, AsSiteApplyResetOtherPass)
	e.POST(PathAsSiteApplyResetOther2FA, AsSiteApplyResetOther2FA)
	e.POST(PathAsSiteUpdateOtherUserGenericInfo, AsSiteUpdateOtherUserGenericInfo)
	e.POST(PathAsSiteUpdateOtherUserImportantInfo, AsSiteUpdateOtherUserImportantInfo)
	e.POST(PathAsSiteResetMePass, AsSiteResetMePass)
	e.POST(PathAsSiteResetMe2FA, AsSiteResetMe2FA)
	e.GET(PathAsSiteGetMe, AsSiteGetMe)
	e.POST(PathAsSiteUpdateMe, AsSiteUpdateMe)
	e.POST(PathAsSiteVerifyMePass, AsSiteVerifyMePass)
	e.GET(PathAsSiteListUser, AsSiteListUser)
	e.GET(PathAsSiteListRoleAndPermission, AsSiteListRoleAndPermission)
	e.POST(PathAsSiteAddWallet, AsSiteAddWallet)
	e.POST(PathAsSiteUpdateWallet, AsSiteUpdateWallet)
	e.POST(PathAsSiteRemoveWallet, AsSiteRemoveWallet)
	e.POST(PathAsSiteListWallet, AsSiteListWallet)
	e.GET(PathAsSiteListApiKey, AsSiteListApiKey)
	e.POST(PathAsSiteAddApiKey, AsSiteAddApiKey)
	e.POST(PathAsSiteDeleteApiKey, AsSiteDeleteApiKey)
	e.POST(PathAsSiteUpdateApiKey, AsSiteUpdateApiKey)
	e.POST(PathAsSiteListCoinInfo, AsSiteListCoinInfo)
	e.POST(PathAsSiteAddWalletCoin, AsSiteAddWalletCoin)
	e.POST(PathAsSiteRemoveWalletCoin, AsSiteRemoveWalletCoin)
	e.POST(PathAsSiteListWalletCoin, AsSiteListWalletCoin)
	e.POST(PathAsSiteGetNewAddress, AsSiteGetNewAddress)
	e.POST(PathAsSiteHideAddress, AsSiteHideAddress)
	e.POST(PathAsSiteListAddress, AsSiteListAddress)
	e.POST(PathAsSiteHasAddress, AsSiteHasAddress)
	e.POST(PathAsSiteCheckAddress, AsSiteCheckAddress)
	e.POST(PathAsSiteGetCoinFee, AsSiteGetCoinFee)
	e.POST(PathAsSiteListCoinTx, AsSiteListCoinTx)
	e.POST(PathAsSiteQueryCoinTx, AsSiteQueryCoinTx)
	e.POST(PathAsSiteExportCoinTx, AsSiteExportCoinTx)
	e.POST(PathAsSiteNewWithdraw, AsSiteNewWithdraw)
	e.POST(PathAsSiteGetWithdrawDetail, AsSiteGetWithdrawDetail)
	e.POST(PathAsSiteGetWalletAsset, AsSiteGetWalletAsset)
	e.POST(PathAsSiteListWalletAsset, AsSiteListWalletAsset)
	e.POST(PathAsSiteListWalletDetail, AsSiteListWalletDetail)
	e.POST(PathAsSiteListWalletCoinDetail, AsSiteListWalletCoinDetail)
	e.POST(PathAsSiteAddWithdrawSetting, AsSiteAddWithdrawSetting)
	e.POST(PathAsSiteUpdateWithdrawSetting, AsSiteUpdateWithdrawSetting)
	e.POST(PathAsSiteRemoveWithdrawSetting, AsSiteRemoveWithdrawSetting)
	e.POST(PathAsSiteGetWithdrawSetting, AsSiteGetWithdrawSetting)
	e.POST(PathAsSiteAddWithdrawQuota, AsSiteAddWithdrawQuota)
	e.POST(PathAsSiteRemoveWithdrawQuota, AsSiteRemoveWithdrawQuota)
	e.POST(PathAsSiteListWithdrawQuota, AsSiteListWithdrawQuota)
	e.POST(PathAsSiteAddWithdrawWhitelist, AsSiteAddWithdrawWhitelist)
	e.POST(PathAsSiteRemoveWithdrawWhitelist, AsSiteRemoveWithdrawWhitelist)
	e.POST(PathAsSiteListWithdrawWhitelist, AsSiteListWithdrawWhitelist)
	e.POST(PathAsSiteUpdateWithdrawPolicy, AsSiteUpdateWithdrawPolicy)
	e.POST(PathAsSiteListWithdrawPolicy, AsSiteListWithdrawPolicy)
	e.POST(PathAsSiteAddMessage, AsSiteAddMessage)
	e.POST(PathAsSiteUpdateMessage, AsSiteUpdateMessage)
	e.POST(PathAsSiteListMessage, AsSiteListMessage)
}
