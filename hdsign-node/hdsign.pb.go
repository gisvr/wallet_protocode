// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hdsign.proto

package pbhdsign

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetSecretRequest struct {
	HdPath string `protobuf:"bytes,1,opt,name=HdPath,proto3" json:"HdPath,omitempty"`
}

func (m *GetSecretRequest) Reset()         { *m = GetSecretRequest{} }
func (m *GetSecretRequest) String() string { return proto.CompactTextString(m) }
func (*GetSecretRequest) ProtoMessage()    {}
func (*GetSecretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc34efff2b1d08fe, []int{0}
}
func (m *GetSecretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSecretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSecretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSecretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSecretRequest.Merge(m, src)
}
func (m *GetSecretRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSecretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSecretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSecretRequest proto.InternalMessageInfo

func (m *GetSecretRequest) GetHdPath() string {
	if m != nil {
		return m.HdPath
	}
	return ""
}

type GetSecretResult struct {
	KeySecret string `protobuf:"bytes,1,opt,name=keySecret,proto3" json:"keySecret,omitempty"`
}

func (m *GetSecretResult) Reset()         { *m = GetSecretResult{} }
func (m *GetSecretResult) String() string { return proto.CompactTextString(m) }
func (*GetSecretResult) ProtoMessage()    {}
func (*GetSecretResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc34efff2b1d08fe, []int{1}
}
func (m *GetSecretResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSecretResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSecretResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSecretResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSecretResult.Merge(m, src)
}
func (m *GetSecretResult) XXX_Size() int {
	return m.Size()
}
func (m *GetSecretResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSecretResult.DiscardUnknown(m)
}

var xxx_messageInfo_GetSecretResult proto.InternalMessageInfo

func (m *GetSecretResult) GetKeySecret() string {
	if m != nil {
		return m.KeySecret
	}
	return ""
}

type GetSecretResponse struct {
	ErrNo  string             `protobuf:"bytes,1,opt,name=ErrNo,proto3" json:"ErrNo,omitempty"`
	ErrMsg string             `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Result []*GetSecretResult `protobuf:"bytes,3,rep,name=Result,proto3" json:"Result,omitempty"`
}

func (m *GetSecretResponse) Reset()         { *m = GetSecretResponse{} }
func (m *GetSecretResponse) String() string { return proto.CompactTextString(m) }
func (*GetSecretResponse) ProtoMessage()    {}
func (*GetSecretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc34efff2b1d08fe, []int{2}
}
func (m *GetSecretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSecretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSecretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSecretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSecretResponse.Merge(m, src)
}
func (m *GetSecretResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSecretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSecretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSecretResponse proto.InternalMessageInfo

func (m *GetSecretResponse) GetErrNo() string {
	if m != nil {
		return m.ErrNo
	}
	return ""
}

func (m *GetSecretResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetSecretResponse) GetResult() []*GetSecretResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type GetMnemonicFingerprintingRequest struct {
}

func (m *GetMnemonicFingerprintingRequest) Reset()         { *m = GetMnemonicFingerprintingRequest{} }
func (m *GetMnemonicFingerprintingRequest) String() string { return proto.CompactTextString(m) }
func (*GetMnemonicFingerprintingRequest) ProtoMessage()    {}
func (*GetMnemonicFingerprintingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc34efff2b1d08fe, []int{3}
}
func (m *GetMnemonicFingerprintingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMnemonicFingerprintingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMnemonicFingerprintingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMnemonicFingerprintingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMnemonicFingerprintingRequest.Merge(m, src)
}
func (m *GetMnemonicFingerprintingRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMnemonicFingerprintingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMnemonicFingerprintingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMnemonicFingerprintingRequest proto.InternalMessageInfo

type GetMnemonicFingerprintingResult struct {
	Fingerprinting string `protobuf:"bytes,1,opt,name=Fingerprinting,proto3" json:"Fingerprinting,omitempty"`
}

func (m *GetMnemonicFingerprintingResult) Reset()         { *m = GetMnemonicFingerprintingResult{} }
func (m *GetMnemonicFingerprintingResult) String() string { return proto.CompactTextString(m) }
func (*GetMnemonicFingerprintingResult) ProtoMessage()    {}
func (*GetMnemonicFingerprintingResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc34efff2b1d08fe, []int{4}
}
func (m *GetMnemonicFingerprintingResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMnemonicFingerprintingResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMnemonicFingerprintingResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMnemonicFingerprintingResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMnemonicFingerprintingResult.Merge(m, src)
}
func (m *GetMnemonicFingerprintingResult) XXX_Size() int {
	return m.Size()
}
func (m *GetMnemonicFingerprintingResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMnemonicFingerprintingResult.DiscardUnknown(m)
}

var xxx_messageInfo_GetMnemonicFingerprintingResult proto.InternalMessageInfo

func (m *GetMnemonicFingerprintingResult) GetFingerprinting() string {
	if m != nil {
		return m.Fingerprinting
	}
	return ""
}

type GetMnemonicFingerprintingResponse struct {
	ErrNo  string                             `protobuf:"bytes,1,opt,name=ErrNo,proto3" json:"ErrNo,omitempty"`
	ErrMsg string                             `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Result []*GetMnemonicFingerprintingResult `protobuf:"bytes,3,rep,name=Result,proto3" json:"Result,omitempty"`
}

func (m *GetMnemonicFingerprintingResponse) Reset()         { *m = GetMnemonicFingerprintingResponse{} }
func (m *GetMnemonicFingerprintingResponse) String() string { return proto.CompactTextString(m) }
func (*GetMnemonicFingerprintingResponse) ProtoMessage()    {}
func (*GetMnemonicFingerprintingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc34efff2b1d08fe, []int{5}
}
func (m *GetMnemonicFingerprintingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMnemonicFingerprintingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMnemonicFingerprintingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMnemonicFingerprintingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMnemonicFingerprintingResponse.Merge(m, src)
}
func (m *GetMnemonicFingerprintingResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMnemonicFingerprintingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMnemonicFingerprintingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMnemonicFingerprintingResponse proto.InternalMessageInfo

func (m *GetMnemonicFingerprintingResponse) GetErrNo() string {
	if m != nil {
		return m.ErrNo
	}
	return ""
}

func (m *GetMnemonicFingerprintingResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetMnemonicFingerprintingResponse) GetResult() []*GetMnemonicFingerprintingResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type GetMemoRequest struct {
	HdPath string `protobuf:"bytes,1,opt,name=HdPath,proto3" json:"HdPath,omitempty"`
}

func (m *GetMemoRequest) Reset()         { *m = GetMemoRequest{} }
func (m *GetMemoRequest) String() string { return proto.CompactTextString(m) }
func (*GetMemoRequest) ProtoMessage()    {}
func (*GetMemoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc34efff2b1d08fe, []int{6}
}
func (m *GetMemoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMemoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMemoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMemoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMemoRequest.Merge(m, src)
}
func (m *GetMemoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMemoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMemoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMemoRequest proto.InternalMessageInfo

func (m *GetMemoRequest) GetHdPath() string {
	if m != nil {
		return m.HdPath
	}
	return ""
}

type GetMemoResult struct {
	KeySecret string `protobuf:"bytes,1,opt,name=keySecret,proto3" json:"keySecret,omitempty"`
}

func (m *GetMemoResult) Reset()         { *m = GetMemoResult{} }
func (m *GetMemoResult) String() string { return proto.CompactTextString(m) }
func (*GetMemoResult) ProtoMessage()    {}
func (*GetMemoResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc34efff2b1d08fe, []int{7}
}
func (m *GetMemoResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMemoResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMemoResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMemoResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMemoResult.Merge(m, src)
}
func (m *GetMemoResult) XXX_Size() int {
	return m.Size()
}
func (m *GetMemoResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMemoResult.DiscardUnknown(m)
}

var xxx_messageInfo_GetMemoResult proto.InternalMessageInfo

func (m *GetMemoResult) GetKeySecret() string {
	if m != nil {
		return m.KeySecret
	}
	return ""
}

type GetMemoResponse struct {
	ErrNo  string           `protobuf:"bytes,1,opt,name=ErrNo,proto3" json:"ErrNo,omitempty"`
	ErrMsg string           `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Result []*GetMemoResult `protobuf:"bytes,3,rep,name=Result,proto3" json:"Result,omitempty"`
}

func (m *GetMemoResponse) Reset()         { *m = GetMemoResponse{} }
func (m *GetMemoResponse) String() string { return proto.CompactTextString(m) }
func (*GetMemoResponse) ProtoMessage()    {}
func (*GetMemoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc34efff2b1d08fe, []int{8}
}
func (m *GetMemoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMemoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMemoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMemoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMemoResponse.Merge(m, src)
}
func (m *GetMemoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMemoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMemoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMemoResponse proto.InternalMessageInfo

func (m *GetMemoResponse) GetErrNo() string {
	if m != nil {
		return m.ErrNo
	}
	return ""
}

func (m *GetMemoResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetMemoResponse) GetResult() []*GetMemoResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*GetSecretRequest)(nil), "hdsign.api.GetSecretRequest")
	proto.RegisterType((*GetSecretResult)(nil), "hdsign.api.GetSecretResult")
	proto.RegisterType((*GetSecretResponse)(nil), "hdsign.api.GetSecretResponse")
	proto.RegisterType((*GetMnemonicFingerprintingRequest)(nil), "hdsign.api.GetMnemonicFingerprintingRequest")
	proto.RegisterType((*GetMnemonicFingerprintingResult)(nil), "hdsign.api.GetMnemonicFingerprintingResult")
	proto.RegisterType((*GetMnemonicFingerprintingResponse)(nil), "hdsign.api.GetMnemonicFingerprintingResponse")
	proto.RegisterType((*GetMemoRequest)(nil), "hdsign.api.GetMemoRequest")
	proto.RegisterType((*GetMemoResult)(nil), "hdsign.api.GetMemoResult")
	proto.RegisterType((*GetMemoResponse)(nil), "hdsign.api.GetMemoResponse")
}

func init() { proto.RegisterFile("hdsign.proto", fileDescriptor_bc34efff2b1d08fe) }

var fileDescriptor_bc34efff2b1d08fe = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x8e, 0x12, 0x41,
	0x10, 0xc6, 0x67, 0x20, 0x62, 0x28, 0x15, 0xb5, 0x63, 0x0c, 0xff, 0x1c, 0xb1, 0x0f, 0x86, 0xa8,
	0xcc, 0x44, 0x88, 0x27, 0x6f, 0x2a, 0xa2, 0x26, 0xa8, 0x81, 0x9b, 0x17, 0xc3, 0x9f, 0x4e, 0xd3,
	0x59, 0xe8, 0x9e, 0xed, 0x69, 0xd8, 0xec, 0x3e, 0xc5, 0x9e, 0x78, 0xa6, 0x3d, 0x72, 0xdc, 0xe3,
	0x06, 0x5e, 0x64, 0xc3, 0x74, 0x33, 0xb0, 0x13, 0x60, 0x09, 0xc7, 0x2a, 0x3e, 0xaa, 0xbe, 0xdf,
	0xd7, 0x95, 0x81, 0xc7, 0x83, 0x7e, 0xc0, 0x28, 0x77, 0x7d, 0x29, 0x94, 0x40, 0x60, 0xaa, 0x8e,
	0xcf, 0xf0, 0x3b, 0x78, 0xd6, 0x20, 0xaa, 0x4d, 0x7a, 0x92, 0xa8, 0x16, 0x39, 0x1d, 0x93, 0x40,
	0xa1, 0x97, 0x90, 0xfa, 0xd1, 0xff, 0xdb, 0x51, 0x83, 0xac, 0x5d, 0xb2, 0xcb, 0xe9, 0x96, 0xa9,
	0xb0, 0x07, 0x4f, 0x37, 0xb4, 0xc1, 0x78, 0xa8, 0x50, 0x11, 0xd2, 0x27, 0xe4, 0x5c, 0xb7, 0x8c,
	0x7a, 0xdd, 0xc0, 0x13, 0x78, 0xbe, 0xf9, 0x07, 0x5f, 0xf0, 0x80, 0xa0, 0x17, 0xf0, 0xa0, 0x2e,
	0xe5, 0x6f, 0x61, 0xe4, 0xba, 0x58, 0xee, 0xac, 0x4b, 0xd9, 0x0c, 0x68, 0x36, 0xa1, 0x77, 0xea,
	0x0a, 0xd5, 0x20, 0xa5, 0x57, 0x65, 0x93, 0xa5, 0x64, 0xf9, 0x51, 0xb5, 0xe0, 0xae, 0xcd, 0xbb,
	0x31, 0x37, 0x2d, 0x23, 0xc5, 0x18, 0x4a, 0x0d, 0xa2, 0x9a, 0x9c, 0x8c, 0x04, 0x67, 0xbd, 0xef,
	0x8c, 0x53, 0x22, 0x7d, 0xc9, 0xb8, 0x62, 0x9c, 0x1a, 0x48, 0xfc, 0x13, 0x5e, 0xef, 0xd1, 0x84,
	0x70, 0x6f, 0x21, 0x73, 0xb7, 0x6f, 0x2c, 0xc7, 0xba, 0x78, 0x6a, 0xc3, 0x9b, 0x7d, 0xb3, 0x8e,
	0xe1, 0xfe, 0x1a, 0xe3, 0x7e, 0x1f, 0xe3, 0xde, 0x67, 0x3c, 0xca, 0xa1, 0x0c, 0x99, 0xa5, 0x94,
	0x8c, 0xc4, 0x7d, 0x4f, 0x5b, 0x81, 0x27, 0x91, 0xf2, 0x80, 0x87, 0x95, 0xe1, 0x25, 0x18, 0xf9,
	0x31, 0x78, 0x1f, 0x63, 0x78, 0xb9, 0x38, 0x5e, 0xe4, 0x64, 0x05, 0x53, 0x9d, 0x26, 0x96, 0xde,
	0xdb, 0x8c, 0x72, 0x74, 0x01, 0xb9, 0x9d, 0x11, 0xa0, 0x0f, 0x07, 0x26, 0x15, 0x06, 0x92, 0xaf,
	0x1c, 0x9a, 0x6b, 0x48, 0x89, 0x2d, 0xf4, 0x0b, 0xd2, 0xd1, 0xd9, 0xa1, 0xe2, 0x8e, 0x6b, 0xd4,
	0xb3, 0x5f, 0xed, 0xba, 0xd5, 0xd5, 0xac, 0x6f, 0xf0, 0xd0, 0xb0, 0xa2, 0xfc, 0xd6, 0x00, 0xf4,
	0x9c, 0xc2, 0xf6, 0x70, 0xcc, 0x94, 0x2f, 0x7f, 0xae, 0xe6, 0x8e, 0x3d, 0x9b, 0x3b, 0xf6, 0xcd,
	0xdc, 0xb1, 0x2f, 0x17, 0x8e, 0x35, 0x5b, 0x38, 0xd6, 0xf5, 0xc2, 0xb1, 0xfe, 0x7d, 0xa2, 0x4c,
	0x0d, 0xc6, 0x5d, 0xb7, 0x27, 0x46, 0x1e, 0x65, 0xc1, 0x44, 0x7a, 0x67, 0x9d, 0xe1, 0x90, 0xa8,
	0xff, 0xe1, 0x77, 0x40, 0x12, 0xdf, 0xd3, 0x83, 0x2b, 0x54, 0x50, 0xf1, 0xd9, 0xef, 0xea, 0xaa,
	0x9b, 0x0a, 0x7f, 0xae, 0xdd, 0x06, 0x00, 0x00, 0xff, 0xff, 0x22, 0x35, 0xf5, 0x75, 0x36, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HdSignClient is the client API for HdSign service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HdSignClient interface {
	//钱包私钥特征，用于验证钱包内记录账目的地址和链上的地址是一致的
	GetMnemonicFingerprinting(ctx context.Context, in *GetMnemonicFingerprintingRequest, opts ...grpc.CallOption) (*GetMnemonicFingerprintingResponse, error)
	//生成密钥
	GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error)
	//生成eos的memo
	GetMemo(ctx context.Context, in *GetMemoRequest, opts ...grpc.CallOption) (*GetMemoResponse, error)
}

type hdSignClient struct {
	cc *grpc.ClientConn
}

func NewHdSignClient(cc *grpc.ClientConn) HdSignClient {
	return &hdSignClient{cc}
}

func (c *hdSignClient) GetMnemonicFingerprinting(ctx context.Context, in *GetMnemonicFingerprintingRequest, opts ...grpc.CallOption) (*GetMnemonicFingerprintingResponse, error) {
	out := new(GetMnemonicFingerprintingResponse)
	err := c.cc.Invoke(ctx, "/hdsign.api.HdSign/GetMnemonicFingerprinting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdSignClient) GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error) {
	out := new(GetSecretResponse)
	err := c.cc.Invoke(ctx, "/hdsign.api.HdSign/GetSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdSignClient) GetMemo(ctx context.Context, in *GetMemoRequest, opts ...grpc.CallOption) (*GetMemoResponse, error) {
	out := new(GetMemoResponse)
	err := c.cc.Invoke(ctx, "/hdsign.api.HdSign/GetMemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HdSignServer is the server API for HdSign service.
type HdSignServer interface {
	//钱包私钥特征，用于验证钱包内记录账目的地址和链上的地址是一致的
	GetMnemonicFingerprinting(context.Context, *GetMnemonicFingerprintingRequest) (*GetMnemonicFingerprintingResponse, error)
	//生成密钥
	GetSecret(context.Context, *GetSecretRequest) (*GetSecretResponse, error)
	//生成eos的memo
	GetMemo(context.Context, *GetMemoRequest) (*GetMemoResponse, error)
}

// UnimplementedHdSignServer can be embedded to have forward compatible implementations.
type UnimplementedHdSignServer struct {
}

func (*UnimplementedHdSignServer) GetMnemonicFingerprinting(ctx context.Context, req *GetMnemonicFingerprintingRequest) (*GetMnemonicFingerprintingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMnemonicFingerprinting not implemented")
}
func (*UnimplementedHdSignServer) GetSecret(ctx context.Context, req *GetSecretRequest) (*GetSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (*UnimplementedHdSignServer) GetMemo(ctx context.Context, req *GetMemoRequest) (*GetMemoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemo not implemented")
}

func RegisterHdSignServer(s *grpc.Server, srv HdSignServer) {
	s.RegisterService(&_HdSign_serviceDesc, srv)
}

func _HdSign_GetMnemonicFingerprinting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMnemonicFingerprintingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdSignServer).GetMnemonicFingerprinting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdsign.api.HdSign/GetMnemonicFingerprinting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdSignServer).GetMnemonicFingerprinting(ctx, req.(*GetMnemonicFingerprintingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdSign_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdSignServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdsign.api.HdSign/GetSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdSignServer).GetSecret(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdSign_GetMemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdSignServer).GetMemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hdsign.api.HdSign/GetMemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdSignServer).GetMemo(ctx, req.(*GetMemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HdSign_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hdsign.api.HdSign",
	HandlerType: (*HdSignServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMnemonicFingerprinting",
			Handler:    _HdSign_GetMnemonicFingerprinting_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _HdSign_GetSecret_Handler,
		},
		{
			MethodName: "GetMemo",
			Handler:    _HdSign_GetMemo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hdsign.proto",
}

func (m *GetSecretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSecretRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSecretRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HdPath) > 0 {
		i -= len(m.HdPath)
		copy(dAtA[i:], m.HdPath)
		i = encodeVarintHdsign(dAtA, i, uint64(len(m.HdPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSecretResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSecretResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSecretResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeySecret) > 0 {
		i -= len(m.KeySecret)
		copy(dAtA[i:], m.KeySecret)
		i = encodeVarintHdsign(dAtA, i, uint64(len(m.KeySecret)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSecretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSecretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSecretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Result[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHdsign(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ErrMsg) > 0 {
		i -= len(m.ErrMsg)
		copy(dAtA[i:], m.ErrMsg)
		i = encodeVarintHdsign(dAtA, i, uint64(len(m.ErrMsg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ErrNo) > 0 {
		i -= len(m.ErrNo)
		copy(dAtA[i:], m.ErrNo)
		i = encodeVarintHdsign(dAtA, i, uint64(len(m.ErrNo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMnemonicFingerprintingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMnemonicFingerprintingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMnemonicFingerprintingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMnemonicFingerprintingResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMnemonicFingerprintingResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMnemonicFingerprintingResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fingerprinting) > 0 {
		i -= len(m.Fingerprinting)
		copy(dAtA[i:], m.Fingerprinting)
		i = encodeVarintHdsign(dAtA, i, uint64(len(m.Fingerprinting)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMnemonicFingerprintingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMnemonicFingerprintingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMnemonicFingerprintingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Result[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHdsign(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ErrMsg) > 0 {
		i -= len(m.ErrMsg)
		copy(dAtA[i:], m.ErrMsg)
		i = encodeVarintHdsign(dAtA, i, uint64(len(m.ErrMsg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ErrNo) > 0 {
		i -= len(m.ErrNo)
		copy(dAtA[i:], m.ErrNo)
		i = encodeVarintHdsign(dAtA, i, uint64(len(m.ErrNo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMemoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMemoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMemoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HdPath) > 0 {
		i -= len(m.HdPath)
		copy(dAtA[i:], m.HdPath)
		i = encodeVarintHdsign(dAtA, i, uint64(len(m.HdPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMemoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMemoResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMemoResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeySecret) > 0 {
		i -= len(m.KeySecret)
		copy(dAtA[i:], m.KeySecret)
		i = encodeVarintHdsign(dAtA, i, uint64(len(m.KeySecret)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMemoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMemoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMemoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Result[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHdsign(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ErrMsg) > 0 {
		i -= len(m.ErrMsg)
		copy(dAtA[i:], m.ErrMsg)
		i = encodeVarintHdsign(dAtA, i, uint64(len(m.ErrMsg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ErrNo) > 0 {
		i -= len(m.ErrNo)
		copy(dAtA[i:], m.ErrNo)
		i = encodeVarintHdsign(dAtA, i, uint64(len(m.ErrNo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHdsign(dAtA []byte, offset int, v uint64) int {
	offset -= sovHdsign(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetSecretRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HdPath)
	if l > 0 {
		n += 1 + l + sovHdsign(uint64(l))
	}
	return n
}

func (m *GetSecretResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeySecret)
	if l > 0 {
		n += 1 + l + sovHdsign(uint64(l))
	}
	return n
}

func (m *GetSecretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrNo)
	if l > 0 {
		n += 1 + l + sovHdsign(uint64(l))
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovHdsign(uint64(l))
	}
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovHdsign(uint64(l))
		}
	}
	return n
}

func (m *GetMnemonicFingerprintingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMnemonicFingerprintingResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fingerprinting)
	if l > 0 {
		n += 1 + l + sovHdsign(uint64(l))
	}
	return n
}

func (m *GetMnemonicFingerprintingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrNo)
	if l > 0 {
		n += 1 + l + sovHdsign(uint64(l))
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovHdsign(uint64(l))
	}
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovHdsign(uint64(l))
		}
	}
	return n
}

func (m *GetMemoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HdPath)
	if l > 0 {
		n += 1 + l + sovHdsign(uint64(l))
	}
	return n
}

func (m *GetMemoResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeySecret)
	if l > 0 {
		n += 1 + l + sovHdsign(uint64(l))
	}
	return n
}

func (m *GetMemoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrNo)
	if l > 0 {
		n += 1 + l + sovHdsign(uint64(l))
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovHdsign(uint64(l))
	}
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovHdsign(uint64(l))
		}
	}
	return n
}

func sovHdsign(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHdsign(x uint64) (n int) {
	return sovHdsign(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetSecretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHdsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSecretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSecretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HdPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHdsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHdsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HdPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHdsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSecretResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHdsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSecretResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSecretResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHdsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHdsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeySecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHdsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSecretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHdsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSecretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSecretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHdsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHdsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHdsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHdsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHdsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHdsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &GetSecretResult{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHdsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMnemonicFingerprintingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHdsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMnemonicFingerprintingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMnemonicFingerprintingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHdsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMnemonicFingerprintingResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHdsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMnemonicFingerprintingResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMnemonicFingerprintingResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fingerprinting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHdsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHdsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fingerprinting = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHdsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMnemonicFingerprintingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHdsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMnemonicFingerprintingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMnemonicFingerprintingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHdsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHdsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHdsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHdsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHdsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHdsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &GetMnemonicFingerprintingResult{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHdsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMemoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHdsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMemoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMemoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HdPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHdsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHdsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HdPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHdsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMemoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHdsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMemoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMemoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHdsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHdsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeySecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHdsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMemoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHdsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMemoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMemoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHdsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHdsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHdsign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHdsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHdsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHdsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &GetMemoResult{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHdsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHdsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHdsign(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHdsign
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHdsign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHdsign
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHdsign
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHdsign
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHdsign        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHdsign          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHdsign = fmt.Errorf("proto: unexpected end of group")
)
