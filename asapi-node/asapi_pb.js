/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('../github.com/gogo/protobuf/gogoproto/gogo_pb.js');
var google_api_annotations_pb = require('../google/api/annotations_pb.js');
goog.exportSymbol('proto.asapi.api.CheckAddressRepose', null, global);
goog.exportSymbol('proto.asapi.api.CheckAddressRequest', null, global);
goog.exportSymbol('proto.asapi.api.CoinAsset', null, global);
goog.exportSymbol('proto.asapi.api.GetCoinInfoRepose', null, global);
goog.exportSymbol('proto.asapi.api.GetCoinInfoRequest', null, global);
goog.exportSymbol('proto.asapi.api.GetConfirmedTxRepose', null, global);
goog.exportSymbol('proto.asapi.api.GetConfirmedTxRequest', null, global);
goog.exportSymbol('proto.asapi.api.GetUnConfirmedTxRepose', null, global);
goog.exportSymbol('proto.asapi.api.GetUnConfirmedTxRequest', null, global);
goog.exportSymbol('proto.asapi.api.GetWithdrawDetailRepose', null, global);
goog.exportSymbol('proto.asapi.api.GetWithdrawDetailRequest', null, global);
goog.exportSymbol('proto.asapi.api.HasAddressRepose', null, global);
goog.exportSymbol('proto.asapi.api.HasAddressRequest', null, global);
goog.exportSymbol('proto.asapi.api.HasAddressResult', null, global);
goog.exportSymbol('proto.asapi.api.ListAllAddressRepose', null, global);
goog.exportSymbol('proto.asapi.api.ListAllAddressRequest', null, global);
goog.exportSymbol('proto.asapi.api.ListAllAddressResult', null, global);
goog.exportSymbol('proto.asapi.api.ListAllCoinRepose', null, global);
goog.exportSymbol('proto.asapi.api.ListAllCoinRequest', null, global);
goog.exportSymbol('proto.asapi.api.ListAllCoinResult', null, global);
goog.exportSymbol('proto.asapi.api.ListConfirmedTxRepose', null, global);
goog.exportSymbol('proto.asapi.api.ListConfirmedTxRequest', null, global);
goog.exportSymbol('proto.asapi.api.ListUnConfirmedTxRepose', null, global);
goog.exportSymbol('proto.asapi.api.ListUnConfirmedTxRequest', null, global);
goog.exportSymbol('proto.asapi.api.NewDepositAddressRepose', null, global);
goog.exportSymbol('proto.asapi.api.NewDepositAddressRequest', null, global);
goog.exportSymbol('proto.asapi.api.NewDepositAddressResult', null, global);
goog.exportSymbol('proto.asapi.api.NewWithdrawRepose', null, global);
goog.exportSymbol('proto.asapi.api.NewWithdrawRequest', null, global);
goog.exportSymbol('proto.asapi.api.Txinfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.ListAllCoinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.ListAllCoinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.ListAllCoinRequest.displayName = 'proto.asapi.api.ListAllCoinRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.ListAllCoinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.ListAllCoinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.ListAllCoinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListAllCoinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.ListAllCoinRequest}
 */
proto.asapi.api.ListAllCoinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.ListAllCoinRequest;
  return proto.asapi.api.ListAllCoinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.ListAllCoinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.ListAllCoinRequest}
 */
proto.asapi.api.ListAllCoinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.ListAllCoinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.ListAllCoinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.ListAllCoinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListAllCoinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.CoinAsset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.CoinAsset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.CoinAsset.displayName = 'proto.asapi.api.CoinAsset';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.CoinAsset.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.CoinAsset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.CoinAsset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.CoinAsset.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    displayCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    decimal: jspb.Message.getFieldWithDefault(msg, 4, 0),
    canDeposit: jspb.Message.getFieldWithDefault(msg, 5, false),
    canWithdraw: jspb.Message.getFieldWithDefault(msg, 6, false),
    balance: jspb.Message.getFieldWithDefault(msg, 7, ""),
    absBalance: jspb.Message.getFieldWithDefault(msg, 8, ""),
    feeCoin: jspb.Message.getFieldWithDefault(msg, 9, ""),
    absEstimateFee: jspb.Message.getFieldWithDefault(msg, 10, ""),
    confirmingThreshold: jspb.Message.getFieldWithDefault(msg, 11, 0),
    dustThreshold: jspb.Message.getFieldWithDefault(msg, 12, 0),
    tokenAddress: jspb.Message.getFieldWithDefault(msg, 13, ""),
    requireMemo: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.CoinAsset}
 */
proto.asapi.api.CoinAsset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.CoinAsset;
  return proto.asapi.api.CoinAsset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.CoinAsset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.CoinAsset}
 */
proto.asapi.api.CoinAsset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimal(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanDeposit(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanWithdraw(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbsBalance(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeeCoin(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbsEstimateFee(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfirmingThreshold(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDustThreshold(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenAddress(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequireMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.CoinAsset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.CoinAsset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.CoinAsset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.CoinAsset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisplayCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDecimal();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCanDeposit();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getCanWithdraw();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getBalance();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAbsBalance();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getFeeCoin();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAbsEstimateFee();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getConfirmingThreshold();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getDustThreshold();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getTokenAddress();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getRequireMemo();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string coin = 1;
 * @return {string}
 */
proto.asapi.api.CoinAsset.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.CoinAsset.prototype.setCoin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string display_code = 2;
 * @return {string}
 */
proto.asapi.api.CoinAsset.prototype.getDisplayCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.asapi.api.CoinAsset.prototype.setDisplayCode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.asapi.api.CoinAsset.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.CoinAsset.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 decimal = 4;
 * @return {number}
 */
proto.asapi.api.CoinAsset.prototype.getDecimal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.asapi.api.CoinAsset.prototype.setDecimal = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool can_deposit = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.asapi.api.CoinAsset.prototype.getCanDeposit = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.asapi.api.CoinAsset.prototype.setCanDeposit = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool can_withdraw = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.asapi.api.CoinAsset.prototype.getCanWithdraw = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.asapi.api.CoinAsset.prototype.setCanWithdraw = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string balance = 7;
 * @return {string}
 */
proto.asapi.api.CoinAsset.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.asapi.api.CoinAsset.prototype.setBalance = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string abs_balance = 8;
 * @return {string}
 */
proto.asapi.api.CoinAsset.prototype.getAbsBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.asapi.api.CoinAsset.prototype.setAbsBalance = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string fee_coin = 9;
 * @return {string}
 */
proto.asapi.api.CoinAsset.prototype.getFeeCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.asapi.api.CoinAsset.prototype.setFeeCoin = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string abs_estimate_fee = 10;
 * @return {string}
 */
proto.asapi.api.CoinAsset.prototype.getAbsEstimateFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.asapi.api.CoinAsset.prototype.setAbsEstimateFee = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 confirming_threshold = 11;
 * @return {number}
 */
proto.asapi.api.CoinAsset.prototype.getConfirmingThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.asapi.api.CoinAsset.prototype.setConfirmingThreshold = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 dust_threshold = 12;
 * @return {number}
 */
proto.asapi.api.CoinAsset.prototype.getDustThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.asapi.api.CoinAsset.prototype.setDustThreshold = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string token_address = 13;
 * @return {string}
 */
proto.asapi.api.CoinAsset.prototype.getTokenAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.asapi.api.CoinAsset.prototype.setTokenAddress = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string require_memo = 14;
 * @return {string}
 */
proto.asapi.api.CoinAsset.prototype.getRequireMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.asapi.api.CoinAsset.prototype.setRequireMemo = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.ListAllCoinResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.asapi.api.ListAllCoinResult.repeatedFields_, null);
};
goog.inherits(proto.asapi.api.ListAllCoinResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.ListAllCoinResult.displayName = 'proto.asapi.api.ListAllCoinResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.asapi.api.ListAllCoinResult.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.ListAllCoinResult.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.ListAllCoinResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.ListAllCoinResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListAllCoinResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetsList: jspb.Message.toObjectList(msg.getAssetsList(),
    proto.asapi.api.CoinAsset.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.ListAllCoinResult}
 */
proto.asapi.api.ListAllCoinResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.ListAllCoinResult;
  return proto.asapi.api.ListAllCoinResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.ListAllCoinResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.ListAllCoinResult}
 */
proto.asapi.api.ListAllCoinResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.asapi.api.CoinAsset;
      reader.readMessage(value,proto.asapi.api.CoinAsset.deserializeBinaryFromReader);
      msg.addAssets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.ListAllCoinResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.ListAllCoinResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.ListAllCoinResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListAllCoinResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.asapi.api.CoinAsset.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.asapi.api.ListAllCoinResult.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.ListAllCoinResult.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated CoinAsset assets = 2;
 * @return {!Array.<!proto.asapi.api.CoinAsset>}
 */
proto.asapi.api.ListAllCoinResult.prototype.getAssetsList = function() {
  return /** @type{!Array.<!proto.asapi.api.CoinAsset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.asapi.api.CoinAsset, 2));
};


/** @param {!Array.<!proto.asapi.api.CoinAsset>} value */
proto.asapi.api.ListAllCoinResult.prototype.setAssetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.asapi.api.CoinAsset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.asapi.api.CoinAsset}
 */
proto.asapi.api.ListAllCoinResult.prototype.addAssets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.asapi.api.CoinAsset, opt_index);
};


proto.asapi.api.ListAllCoinResult.prototype.clearAssetsList = function() {
  this.setAssetsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.ListAllCoinRepose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.asapi.api.ListAllCoinRepose.repeatedFields_, null);
};
goog.inherits(proto.asapi.api.ListAllCoinRepose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.ListAllCoinRepose.displayName = 'proto.asapi.api.ListAllCoinRepose';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.asapi.api.ListAllCoinRepose.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.ListAllCoinRepose.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.ListAllCoinRepose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.ListAllCoinRepose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListAllCoinRepose.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    resultList: jspb.Message.toObjectList(msg.getResultList(),
    proto.asapi.api.ListAllCoinResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.ListAllCoinRepose}
 */
proto.asapi.api.ListAllCoinRepose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.ListAllCoinRepose;
  return proto.asapi.api.ListAllCoinRepose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.ListAllCoinRepose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.ListAllCoinRepose}
 */
proto.asapi.api.ListAllCoinRepose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    case 4:
      var value = new proto.asapi.api.ListAllCoinResult;
      reader.readMessage(value,proto.asapi.api.ListAllCoinResult.deserializeBinaryFromReader);
      msg.addResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.ListAllCoinRepose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.ListAllCoinRepose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.ListAllCoinRepose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListAllCoinRepose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.asapi.api.ListAllCoinResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.asapi.api.ListAllCoinRepose.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.asapi.api.ListAllCoinRepose.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.asapi.api.ListAllCoinRepose.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.asapi.api.ListAllCoinRepose.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_description = 3;
 * @return {string}
 */
proto.asapi.api.ListAllCoinRepose.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.ListAllCoinRepose.prototype.setErrorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated ListAllCoinResult result = 4;
 * @return {!Array.<!proto.asapi.api.ListAllCoinResult>}
 */
proto.asapi.api.ListAllCoinRepose.prototype.getResultList = function() {
  return /** @type{!Array.<!proto.asapi.api.ListAllCoinResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.asapi.api.ListAllCoinResult, 4));
};


/** @param {!Array.<!proto.asapi.api.ListAllCoinResult>} value */
proto.asapi.api.ListAllCoinRepose.prototype.setResultList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.asapi.api.ListAllCoinResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.asapi.api.ListAllCoinResult}
 */
proto.asapi.api.ListAllCoinRepose.prototype.addResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.asapi.api.ListAllCoinResult, opt_index);
};


proto.asapi.api.ListAllCoinRepose.prototype.clearResultList = function() {
  this.setResultList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.GetCoinInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.GetCoinInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.GetCoinInfoRequest.displayName = 'proto.asapi.api.GetCoinInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.GetCoinInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.GetCoinInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.GetCoinInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetCoinInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.GetCoinInfoRequest}
 */
proto.asapi.api.GetCoinInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.GetCoinInfoRequest;
  return proto.asapi.api.GetCoinInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.GetCoinInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.GetCoinInfoRequest}
 */
proto.asapi.api.GetCoinInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.GetCoinInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.GetCoinInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.GetCoinInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetCoinInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string coin = 1;
 * @return {string}
 */
proto.asapi.api.GetCoinInfoRequest.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.GetCoinInfoRequest.prototype.setCoin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.GetCoinInfoRepose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.GetCoinInfoRepose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.GetCoinInfoRepose.displayName = 'proto.asapi.api.GetCoinInfoRepose';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.GetCoinInfoRepose.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.GetCoinInfoRepose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.GetCoinInfoRepose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetCoinInfoRepose.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    result: (f = msg.getResult()) && proto.asapi.api.CoinAsset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.GetCoinInfoRepose}
 */
proto.asapi.api.GetCoinInfoRepose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.GetCoinInfoRepose;
  return proto.asapi.api.GetCoinInfoRepose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.GetCoinInfoRepose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.GetCoinInfoRepose}
 */
proto.asapi.api.GetCoinInfoRepose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    case 4:
      var value = new proto.asapi.api.CoinAsset;
      reader.readMessage(value,proto.asapi.api.CoinAsset.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.GetCoinInfoRepose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.GetCoinInfoRepose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.GetCoinInfoRepose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetCoinInfoRepose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.asapi.api.CoinAsset.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.asapi.api.GetCoinInfoRepose.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.asapi.api.GetCoinInfoRepose.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.asapi.api.GetCoinInfoRepose.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.asapi.api.GetCoinInfoRepose.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_description = 3;
 * @return {string}
 */
proto.asapi.api.GetCoinInfoRepose.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.GetCoinInfoRepose.prototype.setErrorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional CoinAsset result = 4;
 * @return {?proto.asapi.api.CoinAsset}
 */
proto.asapi.api.GetCoinInfoRepose.prototype.getResult = function() {
  return /** @type{?proto.asapi.api.CoinAsset} */ (
    jspb.Message.getWrapperField(this, proto.asapi.api.CoinAsset, 4));
};


/** @param {?proto.asapi.api.CoinAsset|undefined} value */
proto.asapi.api.GetCoinInfoRepose.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.asapi.api.GetCoinInfoRepose.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.asapi.api.GetCoinInfoRepose.prototype.hasResult = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.NewDepositAddressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.NewDepositAddressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.NewDepositAddressRequest.displayName = 'proto.asapi.api.NewDepositAddressRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.NewDepositAddressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.NewDepositAddressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.NewDepositAddressRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.NewDepositAddressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.NewDepositAddressRequest}
 */
proto.asapi.api.NewDepositAddressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.NewDepositAddressRequest;
  return proto.asapi.api.NewDepositAddressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.NewDepositAddressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.NewDepositAddressRequest}
 */
proto.asapi.api.NewDepositAddressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.NewDepositAddressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.NewDepositAddressRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.NewDepositAddressRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.NewDepositAddressRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string coin = 1;
 * @return {string}
 */
proto.asapi.api.NewDepositAddressRequest.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.NewDepositAddressRequest.prototype.setCoin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.NewDepositAddressResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.NewDepositAddressResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.NewDepositAddressResult.displayName = 'proto.asapi.api.NewDepositAddressResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.NewDepositAddressResult.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.NewDepositAddressResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.NewDepositAddressResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.NewDepositAddressResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.NewDepositAddressResult}
 */
proto.asapi.api.NewDepositAddressResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.NewDepositAddressResult;
  return proto.asapi.api.NewDepositAddressResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.NewDepositAddressResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.NewDepositAddressResult}
 */
proto.asapi.api.NewDepositAddressResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.NewDepositAddressResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.NewDepositAddressResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.NewDepositAddressResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.NewDepositAddressResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string coin = 1;
 * @return {string}
 */
proto.asapi.api.NewDepositAddressResult.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.NewDepositAddressResult.prototype.setCoin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.asapi.api.NewDepositAddressResult.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.asapi.api.NewDepositAddressResult.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.NewDepositAddressRepose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.NewDepositAddressRepose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.NewDepositAddressRepose.displayName = 'proto.asapi.api.NewDepositAddressRepose';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.NewDepositAddressRepose.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.NewDepositAddressRepose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.NewDepositAddressRepose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.NewDepositAddressRepose.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    result: (f = msg.getResult()) && proto.asapi.api.NewDepositAddressResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.NewDepositAddressRepose}
 */
proto.asapi.api.NewDepositAddressRepose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.NewDepositAddressRepose;
  return proto.asapi.api.NewDepositAddressRepose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.NewDepositAddressRepose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.NewDepositAddressRepose}
 */
proto.asapi.api.NewDepositAddressRepose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    case 4:
      var value = new proto.asapi.api.NewDepositAddressResult;
      reader.readMessage(value,proto.asapi.api.NewDepositAddressResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.NewDepositAddressRepose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.NewDepositAddressRepose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.NewDepositAddressRepose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.NewDepositAddressRepose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.asapi.api.NewDepositAddressResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.asapi.api.NewDepositAddressRepose.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.asapi.api.NewDepositAddressRepose.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.asapi.api.NewDepositAddressRepose.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.asapi.api.NewDepositAddressRepose.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_description = 3;
 * @return {string}
 */
proto.asapi.api.NewDepositAddressRepose.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.NewDepositAddressRepose.prototype.setErrorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional NewDepositAddressResult result = 4;
 * @return {?proto.asapi.api.NewDepositAddressResult}
 */
proto.asapi.api.NewDepositAddressRepose.prototype.getResult = function() {
  return /** @type{?proto.asapi.api.NewDepositAddressResult} */ (
    jspb.Message.getWrapperField(this, proto.asapi.api.NewDepositAddressResult, 4));
};


/** @param {?proto.asapi.api.NewDepositAddressResult|undefined} value */
proto.asapi.api.NewDepositAddressRepose.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.asapi.api.NewDepositAddressRepose.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.asapi.api.NewDepositAddressRepose.prototype.hasResult = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.HasAddressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.HasAddressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.HasAddressRequest.displayName = 'proto.asapi.api.HasAddressRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.HasAddressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.HasAddressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.HasAddressRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.HasAddressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.HasAddressRequest}
 */
proto.asapi.api.HasAddressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.HasAddressRequest;
  return proto.asapi.api.HasAddressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.HasAddressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.HasAddressRequest}
 */
proto.asapi.api.HasAddressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.HasAddressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.HasAddressRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.HasAddressRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.HasAddressRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string coin = 1;
 * @return {string}
 */
proto.asapi.api.HasAddressRequest.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.HasAddressRequest.prototype.setCoin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.asapi.api.HasAddressRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.asapi.api.HasAddressRequest.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.HasAddressResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.HasAddressResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.HasAddressResult.displayName = 'proto.asapi.api.HasAddressResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.HasAddressResult.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.HasAddressResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.HasAddressResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.HasAddressResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.HasAddressResult}
 */
proto.asapi.api.HasAddressResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.HasAddressResult;
  return proto.asapi.api.HasAddressResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.HasAddressResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.HasAddressResult}
 */
proto.asapi.api.HasAddressResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.HasAddressResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.HasAddressResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.HasAddressResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.HasAddressResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string coin = 1;
 * @return {string}
 */
proto.asapi.api.HasAddressResult.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.HasAddressResult.prototype.setCoin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.asapi.api.HasAddressResult.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.asapi.api.HasAddressResult.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.HasAddressRepose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.HasAddressRepose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.HasAddressRepose.displayName = 'proto.asapi.api.HasAddressRepose';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.HasAddressRepose.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.HasAddressRepose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.HasAddressRepose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.HasAddressRepose.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    result: (f = msg.getResult()) && proto.asapi.api.HasAddressResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.HasAddressRepose}
 */
proto.asapi.api.HasAddressRepose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.HasAddressRepose;
  return proto.asapi.api.HasAddressRepose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.HasAddressRepose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.HasAddressRepose}
 */
proto.asapi.api.HasAddressRepose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    case 4:
      var value = new proto.asapi.api.HasAddressResult;
      reader.readMessage(value,proto.asapi.api.HasAddressResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.HasAddressRepose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.HasAddressRepose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.HasAddressRepose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.HasAddressRepose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.asapi.api.HasAddressResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.asapi.api.HasAddressRepose.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.asapi.api.HasAddressRepose.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.asapi.api.HasAddressRepose.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.asapi.api.HasAddressRepose.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_description = 3;
 * @return {string}
 */
proto.asapi.api.HasAddressRepose.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.HasAddressRepose.prototype.setErrorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional HasAddressResult result = 4;
 * @return {?proto.asapi.api.HasAddressResult}
 */
proto.asapi.api.HasAddressRepose.prototype.getResult = function() {
  return /** @type{?proto.asapi.api.HasAddressResult} */ (
    jspb.Message.getWrapperField(this, proto.asapi.api.HasAddressResult, 4));
};


/** @param {?proto.asapi.api.HasAddressResult|undefined} value */
proto.asapi.api.HasAddressRepose.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.asapi.api.HasAddressRepose.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.asapi.api.HasAddressRepose.prototype.hasResult = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.CheckAddressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.CheckAddressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.CheckAddressRequest.displayName = 'proto.asapi.api.CheckAddressRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.CheckAddressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.CheckAddressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.CheckAddressRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.CheckAddressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.CheckAddressRequest}
 */
proto.asapi.api.CheckAddressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.CheckAddressRequest;
  return proto.asapi.api.CheckAddressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.CheckAddressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.CheckAddressRequest}
 */
proto.asapi.api.CheckAddressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.CheckAddressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.CheckAddressRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.CheckAddressRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.CheckAddressRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string coin = 1;
 * @return {string}
 */
proto.asapi.api.CheckAddressRequest.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.CheckAddressRequest.prototype.setCoin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.asapi.api.CheckAddressRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.asapi.api.CheckAddressRequest.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.CheckAddressRepose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.CheckAddressRepose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.CheckAddressRepose.displayName = 'proto.asapi.api.CheckAddressRepose';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.CheckAddressRepose.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.CheckAddressRepose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.CheckAddressRepose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.CheckAddressRepose.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    result: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.CheckAddressRepose}
 */
proto.asapi.api.CheckAddressRepose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.CheckAddressRepose;
  return proto.asapi.api.CheckAddressRepose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.CheckAddressRepose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.CheckAddressRepose}
 */
proto.asapi.api.CheckAddressRepose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.CheckAddressRepose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.CheckAddressRepose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.CheckAddressRepose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.CheckAddressRepose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResult();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.asapi.api.CheckAddressRepose.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.asapi.api.CheckAddressRepose.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.asapi.api.CheckAddressRepose.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.asapi.api.CheckAddressRepose.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_description = 3;
 * @return {string}
 */
proto.asapi.api.CheckAddressRepose.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.CheckAddressRepose.prototype.setErrorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool result = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.asapi.api.CheckAddressRepose.prototype.getResult = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.asapi.api.CheckAddressRepose.prototype.setResult = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.ListAllAddressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.ListAllAddressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.ListAllAddressRequest.displayName = 'proto.asapi.api.ListAllAddressRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.ListAllAddressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.ListAllAddressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.ListAllAddressRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListAllAddressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.ListAllAddressRequest}
 */
proto.asapi.api.ListAllAddressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.ListAllAddressRequest;
  return proto.asapi.api.ListAllAddressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.ListAllAddressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.ListAllAddressRequest}
 */
proto.asapi.api.ListAllAddressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.ListAllAddressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.ListAllAddressRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.ListAllAddressRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListAllAddressRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string coin = 1;
 * @return {string}
 */
proto.asapi.api.ListAllAddressRequest.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.ListAllAddressRequest.prototype.setCoin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.ListAllAddressResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.ListAllAddressResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.ListAllAddressResult.displayName = 'proto.asapi.api.ListAllAddressResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.ListAllAddressResult.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.ListAllAddressResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.ListAllAddressResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListAllAddressResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.ListAllAddressResult}
 */
proto.asapi.api.ListAllAddressResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.ListAllAddressResult;
  return proto.asapi.api.ListAllAddressResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.ListAllAddressResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.ListAllAddressResult}
 */
proto.asapi.api.ListAllAddressResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.ListAllAddressResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.ListAllAddressResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.ListAllAddressResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListAllAddressResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string coin = 1;
 * @return {string}
 */
proto.asapi.api.ListAllAddressResult.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.ListAllAddressResult.prototype.setCoin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.asapi.api.ListAllAddressResult.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.asapi.api.ListAllAddressResult.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.ListAllAddressRepose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.asapi.api.ListAllAddressRepose.repeatedFields_, null);
};
goog.inherits(proto.asapi.api.ListAllAddressRepose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.ListAllAddressRepose.displayName = 'proto.asapi.api.ListAllAddressRepose';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.asapi.api.ListAllAddressRepose.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.ListAllAddressRepose.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.ListAllAddressRepose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.ListAllAddressRepose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListAllAddressRepose.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    resultList: jspb.Message.toObjectList(msg.getResultList(),
    proto.asapi.api.ListAllAddressResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.ListAllAddressRepose}
 */
proto.asapi.api.ListAllAddressRepose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.ListAllAddressRepose;
  return proto.asapi.api.ListAllAddressRepose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.ListAllAddressRepose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.ListAllAddressRepose}
 */
proto.asapi.api.ListAllAddressRepose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    case 4:
      var value = new proto.asapi.api.ListAllAddressResult;
      reader.readMessage(value,proto.asapi.api.ListAllAddressResult.deserializeBinaryFromReader);
      msg.addResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.ListAllAddressRepose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.ListAllAddressRepose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.ListAllAddressRepose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListAllAddressRepose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.asapi.api.ListAllAddressResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.asapi.api.ListAllAddressRepose.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.asapi.api.ListAllAddressRepose.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.asapi.api.ListAllAddressRepose.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.asapi.api.ListAllAddressRepose.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_description = 3;
 * @return {string}
 */
proto.asapi.api.ListAllAddressRepose.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.ListAllAddressRepose.prototype.setErrorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated ListAllAddressResult result = 4;
 * @return {!Array.<!proto.asapi.api.ListAllAddressResult>}
 */
proto.asapi.api.ListAllAddressRepose.prototype.getResultList = function() {
  return /** @type{!Array.<!proto.asapi.api.ListAllAddressResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.asapi.api.ListAllAddressResult, 4));
};


/** @param {!Array.<!proto.asapi.api.ListAllAddressResult>} value */
proto.asapi.api.ListAllAddressRepose.prototype.setResultList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.asapi.api.ListAllAddressResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.asapi.api.ListAllAddressResult}
 */
proto.asapi.api.ListAllAddressRepose.prototype.addResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.asapi.api.ListAllAddressResult, opt_index);
};


proto.asapi.api.ListAllAddressRepose.prototype.clearResultList = function() {
  this.setResultList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.Txinfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.Txinfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.Txinfo.displayName = 'proto.asapi.api.Txinfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.Txinfo.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.Txinfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.Txinfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.Txinfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    displayCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    decimal: jspb.Message.getFieldWithDefault(msg, 4, 0),
    address: jspb.Message.getFieldWithDefault(msg, 5, ""),
    memo: jspb.Message.getFieldWithDefault(msg, 6, ""),
    sourceAddress: jspb.Message.getFieldWithDefault(msg, 7, ""),
    sourceAddressDetail: jspb.Message.getFieldWithDefault(msg, 8, ""),
    side: jspb.Message.getFieldWithDefault(msg, 9, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 10, ""),
    absAmount: jspb.Message.getFieldWithDefault(msg, 11, ""),
    absCoboFee: jspb.Message.getFieldWithDefault(msg, 12, ""),
    txid: jspb.Message.getFieldWithDefault(msg, 13, ""),
    voutN: jspb.Message.getFieldWithDefault(msg, 14, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 15, ""),
    status: jspb.Message.getFieldWithDefault(msg, 16, ""),
    createTime: jspb.Message.getFieldWithDefault(msg, 17, 0),
    lastTime: jspb.Message.getFieldWithDefault(msg, 18, 0),
    confirmingThreshold: jspb.Message.getFieldWithDefault(msg, 19, 0),
    confirmedNum: jspb.Message.getFieldWithDefault(msg, 20, 0),
    feeCoin: jspb.Message.getFieldWithDefault(msg, 21, ""),
    feeAmount: jspb.Message.getFieldWithDefault(msg, 22, 0),
    feeDecimal: jspb.Message.getFieldWithDefault(msg, 23, 0),
    type: jspb.Message.getFieldWithDefault(msg, 24, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.Txinfo}
 */
proto.asapi.api.Txinfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.Txinfo;
  return proto.asapi.api.Txinfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.Txinfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.Txinfo}
 */
proto.asapi.api.Txinfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimal(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceAddress(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceAddressDetail(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSide(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbsAmount(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbsCoboFee(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxid(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVoutN(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateTime(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastTime(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfirmingThreshold(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfirmedNum(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeeCoin(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFeeAmount(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFeeDecimal(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.Txinfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.Txinfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.Txinfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.Txinfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisplayCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDecimal();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSourceAddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSourceAddressDetail();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSide();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getAbsAmount();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getAbsCoboFee();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getTxid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getVoutN();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getLastTime();
  if (f !== 0) {
    writer.writeInt64(
      18,
      f
    );
  }
  f = message.getConfirmingThreshold();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getConfirmedNum();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getFeeCoin();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getFeeAmount();
  if (f !== 0) {
    writer.writeInt64(
      22,
      f
    );
  }
  f = message.getFeeDecimal();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
};


/**
 * optional string coin = 1;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setCoin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string display_code = 2;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getDisplayCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setDisplayCode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 decimal = 4;
 * @return {number}
 */
proto.asapi.api.Txinfo.prototype.getDecimal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.asapi.api.Txinfo.prototype.setDecimal = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string address = 5;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string memo = 6;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string source_address = 7;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getSourceAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setSourceAddress = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string source_address_detail = 8;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getSourceAddressDetail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setSourceAddressDetail = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string side = 9;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setSide = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string amount = 10;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setAmount = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string abs_amount = 11;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getAbsAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setAbsAmount = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string abs_cobo_fee = 12;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getAbsCoboFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setAbsCoboFee = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string txid = 13;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getTxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setTxid = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional int32 vout_n = 14;
 * @return {number}
 */
proto.asapi.api.Txinfo.prototype.getVoutN = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.asapi.api.Txinfo.prototype.setVoutN = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional string request_id = 15;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setRequestId = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string status = 16;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional int64 create_time = 17;
 * @return {number}
 */
proto.asapi.api.Txinfo.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.asapi.api.Txinfo.prototype.setCreateTime = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int64 last_time = 18;
 * @return {number}
 */
proto.asapi.api.Txinfo.prototype.getLastTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.asapi.api.Txinfo.prototype.setLastTime = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 confirming_threshold = 19;
 * @return {number}
 */
proto.asapi.api.Txinfo.prototype.getConfirmingThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.asapi.api.Txinfo.prototype.setConfirmingThreshold = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 confirmed_num = 20;
 * @return {number}
 */
proto.asapi.api.Txinfo.prototype.getConfirmedNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.asapi.api.Txinfo.prototype.setConfirmedNum = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional string fee_coin = 21;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getFeeCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setFeeCoin = function(value) {
  jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional int64 fee_amount = 22;
 * @return {number}
 */
proto.asapi.api.Txinfo.prototype.getFeeAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.asapi.api.Txinfo.prototype.setFeeAmount = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 fee_decimal = 23;
 * @return {number}
 */
proto.asapi.api.Txinfo.prototype.getFeeDecimal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.asapi.api.Txinfo.prototype.setFeeDecimal = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional string type = 24;
 * @return {string}
 */
proto.asapi.api.Txinfo.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/** @param {string} value */
proto.asapi.api.Txinfo.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 24, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.GetConfirmedTxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.GetConfirmedTxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.GetConfirmedTxRequest.displayName = 'proto.asapi.api.GetConfirmedTxRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.GetConfirmedTxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.GetConfirmedTxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.GetConfirmedTxRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetConfirmedTxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.GetConfirmedTxRequest}
 */
proto.asapi.api.GetConfirmedTxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.GetConfirmedTxRequest;
  return proto.asapi.api.GetConfirmedTxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.GetConfirmedTxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.GetConfirmedTxRequest}
 */
proto.asapi.api.GetConfirmedTxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.GetConfirmedTxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.GetConfirmedTxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.GetConfirmedTxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetConfirmedTxRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.asapi.api.GetConfirmedTxRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.GetConfirmedTxRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.GetConfirmedTxRepose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.GetConfirmedTxRepose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.GetConfirmedTxRepose.displayName = 'proto.asapi.api.GetConfirmedTxRepose';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.GetConfirmedTxRepose.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.GetConfirmedTxRepose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.GetConfirmedTxRepose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetConfirmedTxRepose.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    result: (f = msg.getResult()) && proto.asapi.api.Txinfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.GetConfirmedTxRepose}
 */
proto.asapi.api.GetConfirmedTxRepose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.GetConfirmedTxRepose;
  return proto.asapi.api.GetConfirmedTxRepose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.GetConfirmedTxRepose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.GetConfirmedTxRepose}
 */
proto.asapi.api.GetConfirmedTxRepose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    case 4:
      var value = new proto.asapi.api.Txinfo;
      reader.readMessage(value,proto.asapi.api.Txinfo.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.GetConfirmedTxRepose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.GetConfirmedTxRepose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.GetConfirmedTxRepose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetConfirmedTxRepose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.asapi.api.Txinfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.asapi.api.GetConfirmedTxRepose.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.asapi.api.GetConfirmedTxRepose.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.asapi.api.GetConfirmedTxRepose.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.asapi.api.GetConfirmedTxRepose.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_description = 3;
 * @return {string}
 */
proto.asapi.api.GetConfirmedTxRepose.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.GetConfirmedTxRepose.prototype.setErrorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Txinfo result = 4;
 * @return {?proto.asapi.api.Txinfo}
 */
proto.asapi.api.GetConfirmedTxRepose.prototype.getResult = function() {
  return /** @type{?proto.asapi.api.Txinfo} */ (
    jspb.Message.getWrapperField(this, proto.asapi.api.Txinfo, 4));
};


/** @param {?proto.asapi.api.Txinfo|undefined} value */
proto.asapi.api.GetConfirmedTxRepose.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.asapi.api.GetConfirmedTxRepose.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.asapi.api.GetConfirmedTxRepose.prototype.hasResult = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.ListConfirmedTxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.ListConfirmedTxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.ListConfirmedTxRequest.displayName = 'proto.asapi.api.ListConfirmedTxRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.ListConfirmedTxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.ListConfirmedTxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.ListConfirmedTxRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListConfirmedTxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    side: jspb.Message.getFieldWithDefault(msg, 2, ""),
    address: jspb.Message.getFieldWithDefault(msg, 3, ""),
    maxId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    minId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 6, 0),
    beginTime: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.ListConfirmedTxRequest}
 */
proto.asapi.api.ListConfirmedTxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.ListConfirmedTxRequest;
  return proto.asapi.api.ListConfirmedTxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.ListConfirmedTxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.ListConfirmedTxRequest}
 */
proto.asapi.api.ListConfirmedTxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSide(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBeginTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.ListConfirmedTxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.ListConfirmedTxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.ListConfirmedTxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListConfirmedTxRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSide();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMaxId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMinId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getBeginTime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional string coin = 1;
 * @return {string}
 */
proto.asapi.api.ListConfirmedTxRequest.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.ListConfirmedTxRequest.prototype.setCoin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string side = 2;
 * @return {string}
 */
proto.asapi.api.ListConfirmedTxRequest.prototype.getSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.asapi.api.ListConfirmedTxRequest.prototype.setSide = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string address = 3;
 * @return {string}
 */
proto.asapi.api.ListConfirmedTxRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.ListConfirmedTxRequest.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string max_id = 4;
 * @return {string}
 */
proto.asapi.api.ListConfirmedTxRequest.prototype.getMaxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.asapi.api.ListConfirmedTxRequest.prototype.setMaxId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string min_id = 5;
 * @return {string}
 */
proto.asapi.api.ListConfirmedTxRequest.prototype.getMinId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.asapi.api.ListConfirmedTxRequest.prototype.setMinId = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 limit = 6;
 * @return {number}
 */
proto.asapi.api.ListConfirmedTxRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.asapi.api.ListConfirmedTxRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 begin_time = 7;
 * @return {number}
 */
proto.asapi.api.ListConfirmedTxRequest.prototype.getBeginTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.asapi.api.ListConfirmedTxRequest.prototype.setBeginTime = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.ListConfirmedTxRepose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.asapi.api.ListConfirmedTxRepose.repeatedFields_, null);
};
goog.inherits(proto.asapi.api.ListConfirmedTxRepose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.ListConfirmedTxRepose.displayName = 'proto.asapi.api.ListConfirmedTxRepose';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.asapi.api.ListConfirmedTxRepose.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.ListConfirmedTxRepose.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.ListConfirmedTxRepose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.ListConfirmedTxRepose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListConfirmedTxRepose.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    resultList: jspb.Message.toObjectList(msg.getResultList(),
    proto.asapi.api.Txinfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.ListConfirmedTxRepose}
 */
proto.asapi.api.ListConfirmedTxRepose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.ListConfirmedTxRepose;
  return proto.asapi.api.ListConfirmedTxRepose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.ListConfirmedTxRepose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.ListConfirmedTxRepose}
 */
proto.asapi.api.ListConfirmedTxRepose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    case 4:
      var value = new proto.asapi.api.Txinfo;
      reader.readMessage(value,proto.asapi.api.Txinfo.deserializeBinaryFromReader);
      msg.addResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.ListConfirmedTxRepose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.ListConfirmedTxRepose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.ListConfirmedTxRepose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListConfirmedTxRepose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.asapi.api.Txinfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.asapi.api.ListConfirmedTxRepose.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.asapi.api.ListConfirmedTxRepose.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.asapi.api.ListConfirmedTxRepose.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.asapi.api.ListConfirmedTxRepose.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_description = 3;
 * @return {string}
 */
proto.asapi.api.ListConfirmedTxRepose.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.ListConfirmedTxRepose.prototype.setErrorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Txinfo result = 4;
 * @return {!Array.<!proto.asapi.api.Txinfo>}
 */
proto.asapi.api.ListConfirmedTxRepose.prototype.getResultList = function() {
  return /** @type{!Array.<!proto.asapi.api.Txinfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.asapi.api.Txinfo, 4));
};


/** @param {!Array.<!proto.asapi.api.Txinfo>} value */
proto.asapi.api.ListConfirmedTxRepose.prototype.setResultList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.asapi.api.Txinfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.asapi.api.Txinfo}
 */
proto.asapi.api.ListConfirmedTxRepose.prototype.addResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.asapi.api.Txinfo, opt_index);
};


proto.asapi.api.ListConfirmedTxRepose.prototype.clearResultList = function() {
  this.setResultList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.GetUnConfirmedTxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.GetUnConfirmedTxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.GetUnConfirmedTxRequest.displayName = 'proto.asapi.api.GetUnConfirmedTxRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.GetUnConfirmedTxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.GetUnConfirmedTxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.GetUnConfirmedTxRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetUnConfirmedTxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.GetUnConfirmedTxRequest}
 */
proto.asapi.api.GetUnConfirmedTxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.GetUnConfirmedTxRequest;
  return proto.asapi.api.GetUnConfirmedTxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.GetUnConfirmedTxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.GetUnConfirmedTxRequest}
 */
proto.asapi.api.GetUnConfirmedTxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.GetUnConfirmedTxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.GetUnConfirmedTxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.GetUnConfirmedTxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetUnConfirmedTxRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.asapi.api.GetUnConfirmedTxRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.GetUnConfirmedTxRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.GetUnConfirmedTxRepose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.GetUnConfirmedTxRepose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.GetUnConfirmedTxRepose.displayName = 'proto.asapi.api.GetUnConfirmedTxRepose';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.GetUnConfirmedTxRepose.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.GetUnConfirmedTxRepose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.GetUnConfirmedTxRepose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetUnConfirmedTxRepose.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    result: (f = msg.getResult()) && proto.asapi.api.Txinfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.GetUnConfirmedTxRepose}
 */
proto.asapi.api.GetUnConfirmedTxRepose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.GetUnConfirmedTxRepose;
  return proto.asapi.api.GetUnConfirmedTxRepose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.GetUnConfirmedTxRepose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.GetUnConfirmedTxRepose}
 */
proto.asapi.api.GetUnConfirmedTxRepose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    case 4:
      var value = new proto.asapi.api.Txinfo;
      reader.readMessage(value,proto.asapi.api.Txinfo.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.GetUnConfirmedTxRepose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.GetUnConfirmedTxRepose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.GetUnConfirmedTxRepose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetUnConfirmedTxRepose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.asapi.api.Txinfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.asapi.api.GetUnConfirmedTxRepose.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.asapi.api.GetUnConfirmedTxRepose.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.asapi.api.GetUnConfirmedTxRepose.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.asapi.api.GetUnConfirmedTxRepose.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_description = 3;
 * @return {string}
 */
proto.asapi.api.GetUnConfirmedTxRepose.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.GetUnConfirmedTxRepose.prototype.setErrorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Txinfo result = 4;
 * @return {?proto.asapi.api.Txinfo}
 */
proto.asapi.api.GetUnConfirmedTxRepose.prototype.getResult = function() {
  return /** @type{?proto.asapi.api.Txinfo} */ (
    jspb.Message.getWrapperField(this, proto.asapi.api.Txinfo, 4));
};


/** @param {?proto.asapi.api.Txinfo|undefined} value */
proto.asapi.api.GetUnConfirmedTxRepose.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.asapi.api.GetUnConfirmedTxRepose.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.asapi.api.GetUnConfirmedTxRepose.prototype.hasResult = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.ListUnConfirmedTxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.ListUnConfirmedTxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.ListUnConfirmedTxRequest.displayName = 'proto.asapi.api.ListUnConfirmedTxRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.ListUnConfirmedTxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.ListUnConfirmedTxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.ListUnConfirmedTxRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListUnConfirmedTxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    side: jspb.Message.getFieldWithDefault(msg, 2, ""),
    maxId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    minId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.ListUnConfirmedTxRequest}
 */
proto.asapi.api.ListUnConfirmedTxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.ListUnConfirmedTxRequest;
  return proto.asapi.api.ListUnConfirmedTxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.ListUnConfirmedTxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.ListUnConfirmedTxRequest}
 */
proto.asapi.api.ListUnConfirmedTxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSide(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.ListUnConfirmedTxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.ListUnConfirmedTxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.ListUnConfirmedTxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListUnConfirmedTxRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSide();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMaxId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMinId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string coin = 1;
 * @return {string}
 */
proto.asapi.api.ListUnConfirmedTxRequest.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.ListUnConfirmedTxRequest.prototype.setCoin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string side = 2;
 * @return {string}
 */
proto.asapi.api.ListUnConfirmedTxRequest.prototype.getSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.asapi.api.ListUnConfirmedTxRequest.prototype.setSide = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string max_id = 3;
 * @return {string}
 */
proto.asapi.api.ListUnConfirmedTxRequest.prototype.getMaxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.ListUnConfirmedTxRequest.prototype.setMaxId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string min_id = 4;
 * @return {string}
 */
proto.asapi.api.ListUnConfirmedTxRequest.prototype.getMinId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.asapi.api.ListUnConfirmedTxRequest.prototype.setMinId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 limit = 5;
 * @return {number}
 */
proto.asapi.api.ListUnConfirmedTxRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.asapi.api.ListUnConfirmedTxRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.ListUnConfirmedTxRepose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.asapi.api.ListUnConfirmedTxRepose.repeatedFields_, null);
};
goog.inherits(proto.asapi.api.ListUnConfirmedTxRepose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.ListUnConfirmedTxRepose.displayName = 'proto.asapi.api.ListUnConfirmedTxRepose';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.asapi.api.ListUnConfirmedTxRepose.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.ListUnConfirmedTxRepose.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.ListUnConfirmedTxRepose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.ListUnConfirmedTxRepose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListUnConfirmedTxRepose.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    resultList: jspb.Message.toObjectList(msg.getResultList(),
    proto.asapi.api.Txinfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.ListUnConfirmedTxRepose}
 */
proto.asapi.api.ListUnConfirmedTxRepose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.ListUnConfirmedTxRepose;
  return proto.asapi.api.ListUnConfirmedTxRepose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.ListUnConfirmedTxRepose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.ListUnConfirmedTxRepose}
 */
proto.asapi.api.ListUnConfirmedTxRepose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    case 4:
      var value = new proto.asapi.api.Txinfo;
      reader.readMessage(value,proto.asapi.api.Txinfo.deserializeBinaryFromReader);
      msg.addResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.ListUnConfirmedTxRepose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.ListUnConfirmedTxRepose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.ListUnConfirmedTxRepose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.ListUnConfirmedTxRepose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.asapi.api.Txinfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.asapi.api.ListUnConfirmedTxRepose.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.asapi.api.ListUnConfirmedTxRepose.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.asapi.api.ListUnConfirmedTxRepose.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.asapi.api.ListUnConfirmedTxRepose.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_description = 3;
 * @return {string}
 */
proto.asapi.api.ListUnConfirmedTxRepose.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.ListUnConfirmedTxRepose.prototype.setErrorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Txinfo result = 4;
 * @return {!Array.<!proto.asapi.api.Txinfo>}
 */
proto.asapi.api.ListUnConfirmedTxRepose.prototype.getResultList = function() {
  return /** @type{!Array.<!proto.asapi.api.Txinfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.asapi.api.Txinfo, 4));
};


/** @param {!Array.<!proto.asapi.api.Txinfo>} value */
proto.asapi.api.ListUnConfirmedTxRepose.prototype.setResultList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.asapi.api.Txinfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.asapi.api.Txinfo}
 */
proto.asapi.api.ListUnConfirmedTxRepose.prototype.addResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.asapi.api.Txinfo, opt_index);
};


proto.asapi.api.ListUnConfirmedTxRepose.prototype.clearResultList = function() {
  this.setResultList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.NewWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.NewWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.NewWithdrawRequest.displayName = 'proto.asapi.api.NewWithdrawRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.NewWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.NewWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.NewWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.NewWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    coin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    address: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 4, ""),
    memo: jspb.Message.getFieldWithDefault(msg, 5, ""),
    forceExternal: jspb.Message.getFieldWithDefault(msg, 6, ""),
    forceInternal: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.NewWithdrawRequest}
 */
proto.asapi.api.NewWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.NewWithdrawRequest;
  return proto.asapi.api.NewWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.NewWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.NewWithdrawRequest}
 */
proto.asapi.api.NewWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setForceExternal(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setForceInternal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.NewWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.NewWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.NewWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.NewWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getForceExternal();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getForceInternal();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string coin = 1;
 * @return {string}
 */
proto.asapi.api.NewWithdrawRequest.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.NewWithdrawRequest.prototype.setCoin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string request_id = 2;
 * @return {string}
 */
proto.asapi.api.NewWithdrawRequest.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.asapi.api.NewWithdrawRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string address = 3;
 * @return {string}
 */
proto.asapi.api.NewWithdrawRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.NewWithdrawRequest.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string amount = 4;
 * @return {string}
 */
proto.asapi.api.NewWithdrawRequest.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.asapi.api.NewWithdrawRequest.prototype.setAmount = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string memo = 5;
 * @return {string}
 */
proto.asapi.api.NewWithdrawRequest.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.asapi.api.NewWithdrawRequest.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string force_external = 6;
 * @return {string}
 */
proto.asapi.api.NewWithdrawRequest.prototype.getForceExternal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.asapi.api.NewWithdrawRequest.prototype.setForceExternal = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string force_internal = 7;
 * @return {string}
 */
proto.asapi.api.NewWithdrawRequest.prototype.getForceInternal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.asapi.api.NewWithdrawRequest.prototype.setForceInternal = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.NewWithdrawRepose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.NewWithdrawRepose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.NewWithdrawRepose.displayName = 'proto.asapi.api.NewWithdrawRepose';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.NewWithdrawRepose.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.NewWithdrawRepose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.NewWithdrawRepose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.NewWithdrawRepose.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    result: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.NewWithdrawRepose}
 */
proto.asapi.api.NewWithdrawRepose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.NewWithdrawRepose;
  return proto.asapi.api.NewWithdrawRepose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.NewWithdrawRepose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.NewWithdrawRepose}
 */
proto.asapi.api.NewWithdrawRepose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.NewWithdrawRepose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.NewWithdrawRepose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.NewWithdrawRepose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.NewWithdrawRepose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.asapi.api.NewWithdrawRepose.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.asapi.api.NewWithdrawRepose.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.asapi.api.NewWithdrawRepose.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.asapi.api.NewWithdrawRepose.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_description = 3;
 * @return {string}
 */
proto.asapi.api.NewWithdrawRepose.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.NewWithdrawRepose.prototype.setErrorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string result = 4;
 * @return {string}
 */
proto.asapi.api.NewWithdrawRepose.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.asapi.api.NewWithdrawRepose.prototype.setResult = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.GetWithdrawDetailRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.GetWithdrawDetailRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.GetWithdrawDetailRequest.displayName = 'proto.asapi.api.GetWithdrawDetailRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.GetWithdrawDetailRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.GetWithdrawDetailRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.GetWithdrawDetailRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetWithdrawDetailRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.GetWithdrawDetailRequest}
 */
proto.asapi.api.GetWithdrawDetailRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.GetWithdrawDetailRequest;
  return proto.asapi.api.GetWithdrawDetailRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.GetWithdrawDetailRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.GetWithdrawDetailRequest}
 */
proto.asapi.api.GetWithdrawDetailRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.GetWithdrawDetailRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.GetWithdrawDetailRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.GetWithdrawDetailRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetWithdrawDetailRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.asapi.api.GetWithdrawDetailRequest.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.asapi.api.GetWithdrawDetailRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.asapi.api.GetWithdrawDetailRepose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.asapi.api.GetWithdrawDetailRepose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.asapi.api.GetWithdrawDetailRepose.displayName = 'proto.asapi.api.GetWithdrawDetailRepose';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.asapi.api.GetWithdrawDetailRepose.prototype.toObject = function(opt_includeInstance) {
  return proto.asapi.api.GetWithdrawDetailRepose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.asapi.api.GetWithdrawDetailRepose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetWithdrawDetailRepose.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    result: (f = msg.getResult()) && proto.asapi.api.Txinfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.asapi.api.GetWithdrawDetailRepose}
 */
proto.asapi.api.GetWithdrawDetailRepose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.asapi.api.GetWithdrawDetailRepose;
  return proto.asapi.api.GetWithdrawDetailRepose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.asapi.api.GetWithdrawDetailRepose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.asapi.api.GetWithdrawDetailRepose}
 */
proto.asapi.api.GetWithdrawDetailRepose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    case 4:
      var value = new proto.asapi.api.Txinfo;
      reader.readMessage(value,proto.asapi.api.Txinfo.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.asapi.api.GetWithdrawDetailRepose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.asapi.api.GetWithdrawDetailRepose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.asapi.api.GetWithdrawDetailRepose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.asapi.api.GetWithdrawDetailRepose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.asapi.api.Txinfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.asapi.api.GetWithdrawDetailRepose.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.asapi.api.GetWithdrawDetailRepose.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.asapi.api.GetWithdrawDetailRepose.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.asapi.api.GetWithdrawDetailRepose.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error_description = 3;
 * @return {string}
 */
proto.asapi.api.GetWithdrawDetailRepose.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.asapi.api.GetWithdrawDetailRepose.prototype.setErrorDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Txinfo result = 4;
 * @return {?proto.asapi.api.Txinfo}
 */
proto.asapi.api.GetWithdrawDetailRepose.prototype.getResult = function() {
  return /** @type{?proto.asapi.api.Txinfo} */ (
    jspb.Message.getWrapperField(this, proto.asapi.api.Txinfo, 4));
};


/** @param {?proto.asapi.api.Txinfo|undefined} value */
proto.asapi.api.GetWithdrawDetailRepose.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.asapi.api.GetWithdrawDetailRepose.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.asapi.api.GetWithdrawDetailRepose.prototype.hasResult = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.asapi.api);
