// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wallet.proto

package pbwallet

import (
	bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time "bitbucket.org/biiigle/biiigle_wa001_dams/src/lib/time"
	shared_gogo "bitbucket.org/biiigle/biiigle_wa004_protocode/shared-gogo"
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GenBillStatus int32

const (
	GenBillStatus_GenBillStatus_Unknown GenBillStatus = 0
	GenBillStatus_GenBillStatus_Gen     GenBillStatus = 1
	GenBillStatus_GenBillStatus_UnGen   GenBillStatus = 2
)

var GenBillStatus_name = map[int32]string{
	0: "GenBillStatus_Unknown",
	1: "GenBillStatus_Gen",
	2: "GenBillStatus_UnGen",
}

var GenBillStatus_value = map[string]int32{
	"GenBillStatus_Unknown": 0,
	"GenBillStatus_Gen":     1,
	"GenBillStatus_UnGen":   2,
}

func (x GenBillStatus) String() string {
	return proto.EnumName(GenBillStatus_name, int32(x))
}

func (GenBillStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{0}
}

type AddWalletRequest struct {
	AccountId int64                  `protobuf:"varint,1,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	WType     shared_gogo.WalletType `protobuf:"varint,3,opt,name=WType,proto3,enum=shared.api.WalletType" json:"WType,omitempty"`
}

func (m *AddWalletRequest) Reset()         { *m = AddWalletRequest{} }
func (m *AddWalletRequest) String() string { return proto.CompactTextString(m) }
func (*AddWalletRequest) ProtoMessage()    {}
func (*AddWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{0}
}
func (m *AddWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWalletRequest.Merge(m, src)
}
func (m *AddWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWalletRequest proto.InternalMessageInfo

func (m *AddWalletRequest) GetAccountId() int64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *AddWalletRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddWalletRequest) GetWType() shared_gogo.WalletType {
	if m != nil {
		return m.WType
	}
	return shared_gogo.WalletType_WalletType_HD
}

type AddWalletResponse struct {
	Wid int64 `protobuf:"varint,1,opt,name=Wid,proto3" json:"Wid,omitempty"`
}

func (m *AddWalletResponse) Reset()         { *m = AddWalletResponse{} }
func (m *AddWalletResponse) String() string { return proto.CompactTextString(m) }
func (*AddWalletResponse) ProtoMessage()    {}
func (*AddWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{1}
}
func (m *AddWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWalletResponse.Merge(m, src)
}
func (m *AddWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddWalletResponse proto.InternalMessageInfo

func (m *AddWalletResponse) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

type GetWalletRequest struct {
	// 钱包ID。
	WalletId int64 `protobuf:"varint,1,opt,name=WalletId,proto3" json:"WalletId,omitempty"`
}

func (m *GetWalletRequest) Reset()         { *m = GetWalletRequest{} }
func (m *GetWalletRequest) String() string { return proto.CompactTextString(m) }
func (*GetWalletRequest) ProtoMessage()    {}
func (*GetWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{2}
}
func (m *GetWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWalletRequest.Merge(m, src)
}
func (m *GetWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWalletRequest proto.InternalMessageInfo

func (m *GetWalletRequest) GetWalletId() int64 {
	if m != nil {
		return m.WalletId
	}
	return 0
}

type GetWalletResponse struct {
	Item *shared_gogo.WalletInfo `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *GetWalletResponse) Reset()         { *m = GetWalletResponse{} }
func (m *GetWalletResponse) String() string { return proto.CompactTextString(m) }
func (*GetWalletResponse) ProtoMessage()    {}
func (*GetWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{3}
}
func (m *GetWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWalletResponse.Merge(m, src)
}
func (m *GetWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWalletResponse proto.InternalMessageInfo

func (m *GetWalletResponse) GetItem() *shared_gogo.WalletInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type UpdateWalletRequest struct {
	WalletId int64 `protobuf:"varint,1,opt,name=WalletId,proto3" json:"WalletId,omitempty"`
	//钱包名称
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	//钱包状态1 冻结/2 激活
	State shared_gogo.StateType `protobuf:"varint,3,opt,name=State,proto3,enum=shared.api.StateType" json:"State,omitempty"`
}

func (m *UpdateWalletRequest) Reset()         { *m = UpdateWalletRequest{} }
func (m *UpdateWalletRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateWalletRequest) ProtoMessage()    {}
func (*UpdateWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{4}
}
func (m *UpdateWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWalletRequest.Merge(m, src)
}
func (m *UpdateWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWalletRequest proto.InternalMessageInfo

func (m *UpdateWalletRequest) GetWalletId() int64 {
	if m != nil {
		return m.WalletId
	}
	return 0
}

func (m *UpdateWalletRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateWalletRequest) GetState() shared_gogo.StateType {
	if m != nil {
		return m.State
	}
	return shared_gogo.StateType_State_Unknown
}

type UpdateWalletResponse struct {
}

func (m *UpdateWalletResponse) Reset()         { *m = UpdateWalletResponse{} }
func (m *UpdateWalletResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateWalletResponse) ProtoMessage()    {}
func (*UpdateWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{5}
}
func (m *UpdateWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWalletResponse.Merge(m, src)
}
func (m *UpdateWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWalletResponse proto.InternalMessageInfo

type RemoveWalletRequest struct {
	WalletId int64 `protobuf:"varint,1,opt,name=WalletId,proto3" json:"WalletId,omitempty"`
}

func (m *RemoveWalletRequest) Reset()         { *m = RemoveWalletRequest{} }
func (m *RemoveWalletRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveWalletRequest) ProtoMessage()    {}
func (*RemoveWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{6}
}
func (m *RemoveWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWalletRequest.Merge(m, src)
}
func (m *RemoveWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWalletRequest proto.InternalMessageInfo

func (m *RemoveWalletRequest) GetWalletId() int64 {
	if m != nil {
		return m.WalletId
	}
	return 0
}

type RemoveWalletResponse struct {
}

func (m *RemoveWalletResponse) Reset()         { *m = RemoveWalletResponse{} }
func (m *RemoveWalletResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveWalletResponse) ProtoMessage()    {}
func (*RemoveWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{7}
}
func (m *RemoveWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWalletResponse.Merge(m, src)
}
func (m *RemoveWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWalletResponse proto.InternalMessageInfo

type ListWalletRequest struct {
	AccountId int64 `protobuf:"varint,1,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	WalletId  int64 `protobuf:"varint,2,opt,name=WalletId,proto3" json:"WalletId,omitempty"`
	Page      int32 `protobuf:"varint,10,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize  int32 `protobuf:"varint,11,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (m *ListWalletRequest) Reset()         { *m = ListWalletRequest{} }
func (m *ListWalletRequest) String() string { return proto.CompactTextString(m) }
func (*ListWalletRequest) ProtoMessage()    {}
func (*ListWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{8}
}
func (m *ListWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletRequest.Merge(m, src)
}
func (m *ListWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletRequest proto.InternalMessageInfo

func (m *ListWalletRequest) GetAccountId() int64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *ListWalletRequest) GetWalletId() int64 {
	if m != nil {
		return m.WalletId
	}
	return 0
}

func (m *ListWalletRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListWalletRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListWalletResponse struct {
	Items    []*shared_gogo.WalletInfo `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	TotalNum int32                     `protobuf:"varint,10,opt,name=TotalNum,proto3" json:"TotalNum,omitempty"`
	Page     int32                     `protobuf:"varint,11,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (m *ListWalletResponse) Reset()         { *m = ListWalletResponse{} }
func (m *ListWalletResponse) String() string { return proto.CompactTextString(m) }
func (*ListWalletResponse) ProtoMessage()    {}
func (*ListWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{9}
}
func (m *ListWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletResponse.Merge(m, src)
}
func (m *ListWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletResponse proto.InternalMessageInfo

func (m *ListWalletResponse) GetItems() []*shared_gogo.WalletInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListWalletResponse) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *ListWalletResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ListCoinInfoRequest struct {
	Page     int32 `protobuf:"varint,10,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize int32 `protobuf:"varint,11,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (m *ListCoinInfoRequest) Reset()         { *m = ListCoinInfoRequest{} }
func (m *ListCoinInfoRequest) String() string { return proto.CompactTextString(m) }
func (*ListCoinInfoRequest) ProtoMessage()    {}
func (*ListCoinInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{10}
}
func (m *ListCoinInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCoinInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCoinInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCoinInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCoinInfoRequest.Merge(m, src)
}
func (m *ListCoinInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCoinInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCoinInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCoinInfoRequest proto.InternalMessageInfo

func (m *ListCoinInfoRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListCoinInfoRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListCoinInfoResponse struct {
	Items    []*shared_gogo.CoinInfo `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	TotalNum int32                   `protobuf:"varint,10,opt,name=TotalNum,proto3" json:"TotalNum,omitempty"`
	Page     int32                   `protobuf:"varint,11,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (m *ListCoinInfoResponse) Reset()         { *m = ListCoinInfoResponse{} }
func (m *ListCoinInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListCoinInfoResponse) ProtoMessage()    {}
func (*ListCoinInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{11}
}
func (m *ListCoinInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCoinInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCoinInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCoinInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCoinInfoResponse.Merge(m, src)
}
func (m *ListCoinInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCoinInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCoinInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCoinInfoResponse proto.InternalMessageInfo

func (m *ListCoinInfoResponse) GetItems() []*shared_gogo.CoinInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListCoinInfoResponse) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *ListCoinInfoResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type AddWalletCoinRequest struct {
	Item *shared_gogo.WalletCoin `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *AddWalletCoinRequest) Reset()         { *m = AddWalletCoinRequest{} }
func (m *AddWalletCoinRequest) String() string { return proto.CompactTextString(m) }
func (*AddWalletCoinRequest) ProtoMessage()    {}
func (*AddWalletCoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{12}
}
func (m *AddWalletCoinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWalletCoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWalletCoinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWalletCoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWalletCoinRequest.Merge(m, src)
}
func (m *AddWalletCoinRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddWalletCoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWalletCoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWalletCoinRequest proto.InternalMessageInfo

func (m *AddWalletCoinRequest) GetItem() *shared_gogo.WalletCoin {
	if m != nil {
		return m.Item
	}
	return nil
}

type AddWalletCoinResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *AddWalletCoinResponse) Reset()         { *m = AddWalletCoinResponse{} }
func (m *AddWalletCoinResponse) String() string { return proto.CompactTextString(m) }
func (*AddWalletCoinResponse) ProtoMessage()    {}
func (*AddWalletCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{13}
}
func (m *AddWalletCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWalletCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWalletCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWalletCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWalletCoinResponse.Merge(m, src)
}
func (m *AddWalletCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddWalletCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWalletCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddWalletCoinResponse proto.InternalMessageInfo

func (m *AddWalletCoinResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveWalletCoinRequest struct {
	// 记录ID
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *RemoveWalletCoinRequest) Reset()         { *m = RemoveWalletCoinRequest{} }
func (m *RemoveWalletCoinRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveWalletCoinRequest) ProtoMessage()    {}
func (*RemoveWalletCoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{14}
}
func (m *RemoveWalletCoinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWalletCoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWalletCoinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWalletCoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWalletCoinRequest.Merge(m, src)
}
func (m *RemoveWalletCoinRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWalletCoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWalletCoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWalletCoinRequest proto.InternalMessageInfo

func (m *RemoveWalletCoinRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveWalletCoinResponse struct {
}

func (m *RemoveWalletCoinResponse) Reset()         { *m = RemoveWalletCoinResponse{} }
func (m *RemoveWalletCoinResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveWalletCoinResponse) ProtoMessage()    {}
func (*RemoveWalletCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{15}
}
func (m *RemoveWalletCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWalletCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWalletCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWalletCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWalletCoinResponse.Merge(m, src)
}
func (m *RemoveWalletCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWalletCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWalletCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWalletCoinResponse proto.InternalMessageInfo

type ListWalletCoinRequest struct {
	Aid int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
}

func (m *ListWalletCoinRequest) Reset()         { *m = ListWalletCoinRequest{} }
func (m *ListWalletCoinRequest) String() string { return proto.CompactTextString(m) }
func (*ListWalletCoinRequest) ProtoMessage()    {}
func (*ListWalletCoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{16}
}
func (m *ListWalletCoinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletCoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletCoinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletCoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletCoinRequest.Merge(m, src)
}
func (m *ListWalletCoinRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletCoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletCoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletCoinRequest proto.InternalMessageInfo

func (m *ListWalletCoinRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ListWalletCoinRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListWalletCoinRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type ListWalletCoinResponse struct {
	Items []*shared_gogo.WalletCoin `protobuf:"bytes,3,rep,name=Items,proto3" json:"Items,omitempty"`
}

func (m *ListWalletCoinResponse) Reset()         { *m = ListWalletCoinResponse{} }
func (m *ListWalletCoinResponse) String() string { return proto.CompactTextString(m) }
func (*ListWalletCoinResponse) ProtoMessage()    {}
func (*ListWalletCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{17}
}
func (m *ListWalletCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletCoinResponse.Merge(m, src)
}
func (m *ListWalletCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletCoinResponse proto.InternalMessageInfo

func (m *ListWalletCoinResponse) GetItems() []*shared_gogo.WalletCoin {
	if m != nil {
		return m.Items
	}
	return nil
}

type ListWalletDetailRequest struct {
	Aid      int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid      int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid      int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
	Page     int32 `protobuf:"varint,10,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize int32 `protobuf:"varint,11,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (m *ListWalletDetailRequest) Reset()         { *m = ListWalletDetailRequest{} }
func (m *ListWalletDetailRequest) String() string { return proto.CompactTextString(m) }
func (*ListWalletDetailRequest) ProtoMessage()    {}
func (*ListWalletDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{18}
}
func (m *ListWalletDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletDetailRequest.Merge(m, src)
}
func (m *ListWalletDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletDetailRequest proto.InternalMessageInfo

func (m *ListWalletDetailRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ListWalletDetailRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListWalletDetailRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ListWalletDetailRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListWalletDetailRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListWalletDetailResponse struct {
	Items    []*shared_gogo.WalletDetail `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	TotalNum int32                       `protobuf:"varint,10,opt,name=TotalNum,proto3" json:"TotalNum,omitempty"`
	Page     int32                       `protobuf:"varint,11,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (m *ListWalletDetailResponse) Reset()         { *m = ListWalletDetailResponse{} }
func (m *ListWalletDetailResponse) String() string { return proto.CompactTextString(m) }
func (*ListWalletDetailResponse) ProtoMessage()    {}
func (*ListWalletDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{19}
}
func (m *ListWalletDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletDetailResponse.Merge(m, src)
}
func (m *ListWalletDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletDetailResponse proto.InternalMessageInfo

func (m *ListWalletDetailResponse) GetItems() []*shared_gogo.WalletDetail {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListWalletDetailResponse) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *ListWalletDetailResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ListWalletCoinDetailRequest struct {
	Aid      int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid      int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Page     int32 `protobuf:"varint,10,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize int32 `protobuf:"varint,11,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (m *ListWalletCoinDetailRequest) Reset()         { *m = ListWalletCoinDetailRequest{} }
func (m *ListWalletCoinDetailRequest) String() string { return proto.CompactTextString(m) }
func (*ListWalletCoinDetailRequest) ProtoMessage()    {}
func (*ListWalletCoinDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{20}
}
func (m *ListWalletCoinDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletCoinDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletCoinDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletCoinDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletCoinDetailRequest.Merge(m, src)
}
func (m *ListWalletCoinDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletCoinDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletCoinDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletCoinDetailRequest proto.InternalMessageInfo

func (m *ListWalletCoinDetailRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ListWalletCoinDetailRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListWalletCoinDetailRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListWalletCoinDetailRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListWalletCoinDetailResponse struct {
	Items    []*shared_gogo.WalletCoinDetail `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	TotalNum int32                           `protobuf:"varint,10,opt,name=TotalNum,proto3" json:"TotalNum,omitempty"`
	Page     int32                           `protobuf:"varint,11,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (m *ListWalletCoinDetailResponse) Reset()         { *m = ListWalletCoinDetailResponse{} }
func (m *ListWalletCoinDetailResponse) String() string { return proto.CompactTextString(m) }
func (*ListWalletCoinDetailResponse) ProtoMessage()    {}
func (*ListWalletCoinDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{21}
}
func (m *ListWalletCoinDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletCoinDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletCoinDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletCoinDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletCoinDetailResponse.Merge(m, src)
}
func (m *ListWalletCoinDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletCoinDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletCoinDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletCoinDetailResponse proto.InternalMessageInfo

func (m *ListWalletCoinDetailResponse) GetItems() []*shared_gogo.WalletCoinDetail {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListWalletCoinDetailResponse) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *ListWalletCoinDetailResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type GetWalletCoinRequest struct {
	// 记录ID
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *GetWalletCoinRequest) Reset()         { *m = GetWalletCoinRequest{} }
func (m *GetWalletCoinRequest) String() string { return proto.CompactTextString(m) }
func (*GetWalletCoinRequest) ProtoMessage()    {}
func (*GetWalletCoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{22}
}
func (m *GetWalletCoinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWalletCoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWalletCoinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWalletCoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWalletCoinRequest.Merge(m, src)
}
func (m *GetWalletCoinRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWalletCoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWalletCoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWalletCoinRequest proto.InternalMessageInfo

func (m *GetWalletCoinRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetWalletCoinResponse struct {
	Item *shared_gogo.WalletCoin `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *GetWalletCoinResponse) Reset()         { *m = GetWalletCoinResponse{} }
func (m *GetWalletCoinResponse) String() string { return proto.CompactTextString(m) }
func (*GetWalletCoinResponse) ProtoMessage()    {}
func (*GetWalletCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{23}
}
func (m *GetWalletCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWalletCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWalletCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWalletCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWalletCoinResponse.Merge(m, src)
}
func (m *GetWalletCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWalletCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWalletCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWalletCoinResponse proto.InternalMessageInfo

func (m *GetWalletCoinResponse) GetItem() *shared_gogo.WalletCoin {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListAddressRequest struct {
	Aid      int64  `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid      int64  `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid      int64  `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
	Address  string `protobuf:"bytes,4,opt,name=Address,proto3" json:"Address,omitempty"`
	Page     int32  `protobuf:"varint,10,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize int32  `protobuf:"varint,11,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (m *ListAddressRequest) Reset()         { *m = ListAddressRequest{} }
func (m *ListAddressRequest) String() string { return proto.CompactTextString(m) }
func (*ListAddressRequest) ProtoMessage()    {}
func (*ListAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{24}
}
func (m *ListAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAddressRequest.Merge(m, src)
}
func (m *ListAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAddressRequest proto.InternalMessageInfo

func (m *ListAddressRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ListAddressRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListAddressRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ListAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ListAddressRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListAddressRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListAddressResponse struct {
	Items    []*shared_gogo.AddressInfo `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	TotalNum int32                      `protobuf:"varint,10,opt,name=TotalNum,proto3" json:"TotalNum,omitempty"`
	Page     int32                      `protobuf:"varint,11,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (m *ListAddressResponse) Reset()         { *m = ListAddressResponse{} }
func (m *ListAddressResponse) String() string { return proto.CompactTextString(m) }
func (*ListAddressResponse) ProtoMessage()    {}
func (*ListAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{25}
}
func (m *ListAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAddressResponse.Merge(m, src)
}
func (m *ListAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAddressResponse proto.InternalMessageInfo

func (m *ListAddressResponse) GetItems() []*shared_gogo.AddressInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListAddressResponse) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *ListAddressResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type GetNewAddressRequest struct {
	Aid   int64  `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid   int64  `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid   int64  `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
	Uid   int64  `protobuf:"varint,4,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Label string `protobuf:"bytes,5,opt,name=Label,proto3" json:"Label,omitempty"`
}

func (m *GetNewAddressRequest) Reset()         { *m = GetNewAddressRequest{} }
func (m *GetNewAddressRequest) String() string { return proto.CompactTextString(m) }
func (*GetNewAddressRequest) ProtoMessage()    {}
func (*GetNewAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{26}
}
func (m *GetNewAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNewAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNewAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNewAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNewAddressRequest.Merge(m, src)
}
func (m *GetNewAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNewAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNewAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNewAddressRequest proto.InternalMessageInfo

func (m *GetNewAddressRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *GetNewAddressRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *GetNewAddressRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *GetNewAddressRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GetNewAddressRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type GetNewAddressResponse struct {
	Item *shared_gogo.AddressInfo `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *GetNewAddressResponse) Reset()         { *m = GetNewAddressResponse{} }
func (m *GetNewAddressResponse) String() string { return proto.CompactTextString(m) }
func (*GetNewAddressResponse) ProtoMessage()    {}
func (*GetNewAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{27}
}
func (m *GetNewAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNewAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNewAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNewAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNewAddressResponse.Merge(m, src)
}
func (m *GetNewAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNewAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNewAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNewAddressResponse proto.InternalMessageInfo

func (m *GetNewAddressResponse) GetItem() *shared_gogo.AddressInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type HideAddressRequest struct {
	Aid     int64  `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid     int64  `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid     int64  `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
	Address string `protobuf:"bytes,4,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (m *HideAddressRequest) Reset()         { *m = HideAddressRequest{} }
func (m *HideAddressRequest) String() string { return proto.CompactTextString(m) }
func (*HideAddressRequest) ProtoMessage()    {}
func (*HideAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{28}
}
func (m *HideAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HideAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HideAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HideAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HideAddressRequest.Merge(m, src)
}
func (m *HideAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *HideAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HideAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HideAddressRequest proto.InternalMessageInfo

func (m *HideAddressRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *HideAddressRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *HideAddressRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *HideAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type HideAddressResponse struct {
}

func (m *HideAddressResponse) Reset()         { *m = HideAddressResponse{} }
func (m *HideAddressResponse) String() string { return proto.CompactTextString(m) }
func (*HideAddressResponse) ProtoMessage()    {}
func (*HideAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{29}
}
func (m *HideAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HideAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HideAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HideAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HideAddressResponse.Merge(m, src)
}
func (m *HideAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *HideAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HideAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HideAddressResponse proto.InternalMessageInfo

type HasAddressRequest struct {
	Aid     int64  `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid     int64  `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid     int64  `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
	Address string `protobuf:"bytes,4,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (m *HasAddressRequest) Reset()         { *m = HasAddressRequest{} }
func (m *HasAddressRequest) String() string { return proto.CompactTextString(m) }
func (*HasAddressRequest) ProtoMessage()    {}
func (*HasAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{30}
}
func (m *HasAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HasAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HasAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HasAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasAddressRequest.Merge(m, src)
}
func (m *HasAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *HasAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HasAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HasAddressRequest proto.InternalMessageInfo

func (m *HasAddressRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *HasAddressRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *HasAddressRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *HasAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type HasAddressResponse struct {
	Exist bool `protobuf:"varint,1,opt,name=Exist,proto3" json:"Exist,omitempty"`
}

func (m *HasAddressResponse) Reset()         { *m = HasAddressResponse{} }
func (m *HasAddressResponse) String() string { return proto.CompactTextString(m) }
func (*HasAddressResponse) ProtoMessage()    {}
func (*HasAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{31}
}
func (m *HasAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HasAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HasAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HasAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasAddressResponse.Merge(m, src)
}
func (m *HasAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *HasAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HasAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HasAddressResponse proto.InternalMessageInfo

func (m *HasAddressResponse) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

type CheckAddressRequest struct {
	Cid     int64  `protobuf:"varint,1,opt,name=Cid,proto3" json:"Cid,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (m *CheckAddressRequest) Reset()         { *m = CheckAddressRequest{} }
func (m *CheckAddressRequest) String() string { return proto.CompactTextString(m) }
func (*CheckAddressRequest) ProtoMessage()    {}
func (*CheckAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{32}
}
func (m *CheckAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckAddressRequest.Merge(m, src)
}
func (m *CheckAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckAddressRequest proto.InternalMessageInfo

func (m *CheckAddressRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *CheckAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type CheckAddressResponse struct {
	Valid bool `protobuf:"varint,1,opt,name=Valid,proto3" json:"Valid,omitempty"`
}

func (m *CheckAddressResponse) Reset()         { *m = CheckAddressResponse{} }
func (m *CheckAddressResponse) String() string { return proto.CompactTextString(m) }
func (*CheckAddressResponse) ProtoMessage()    {}
func (*CheckAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{33}
}
func (m *CheckAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckAddressResponse.Merge(m, src)
}
func (m *CheckAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckAddressResponse proto.InternalMessageInfo

func (m *CheckAddressResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type GetCoinFeeRequest struct {
	Aid int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
}

func (m *GetCoinFeeRequest) Reset()         { *m = GetCoinFeeRequest{} }
func (m *GetCoinFeeRequest) String() string { return proto.CompactTextString(m) }
func (*GetCoinFeeRequest) ProtoMessage()    {}
func (*GetCoinFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{34}
}
func (m *GetCoinFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoinFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoinFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCoinFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoinFeeRequest.Merge(m, src)
}
func (m *GetCoinFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCoinFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoinFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoinFeeRequest proto.InternalMessageInfo

func (m *GetCoinFeeRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *GetCoinFeeRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *GetCoinFeeRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type GetCoinFeeResponse struct {
	FeeSlow        float64 `protobuf:"fixed64,1,opt,name=FeeSlow,proto3" json:"FeeSlow,omitempty"`
	FeeMiddle      float64 `protobuf:"fixed64,2,opt,name=FeeMiddle,proto3" json:"FeeMiddle,omitempty"`
	FeeFast        float64 `protobuf:"fixed64,3,opt,name=FeeFast,proto3" json:"FeeFast,omitempty"`
	LimitFee       float64 `protobuf:"fixed64,4,opt,name=LimitFee,proto3" json:"LimitFee,omitempty"`
	PlatformFee    float64 `protobuf:"fixed64,5,opt,name=PlatformFee,proto3" json:"PlatformFee,omitempty"`
	FeeSlowStr     string  `protobuf:"bytes,11,opt,name=FeeSlowStr,proto3" json:"FeeSlowStr,omitempty"`
	FeeMiddleStr   string  `protobuf:"bytes,12,opt,name=FeeMiddleStr,proto3" json:"FeeMiddleStr,omitempty"`
	FeeFastStr     string  `protobuf:"bytes,13,opt,name=FeeFastStr,proto3" json:"FeeFastStr,omitempty"`
	LimitFeeStr    string  `protobuf:"bytes,14,opt,name=LimitFeeStr,proto3" json:"LimitFeeStr,omitempty"`
	PlatformFeeStr string  `protobuf:"bytes,15,opt,name=PlatformFeeStr,proto3" json:"PlatformFeeStr,omitempty"`
}

func (m *GetCoinFeeResponse) Reset()         { *m = GetCoinFeeResponse{} }
func (m *GetCoinFeeResponse) String() string { return proto.CompactTextString(m) }
func (*GetCoinFeeResponse) ProtoMessage()    {}
func (*GetCoinFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{35}
}
func (m *GetCoinFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoinFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoinFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCoinFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoinFeeResponse.Merge(m, src)
}
func (m *GetCoinFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCoinFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoinFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoinFeeResponse proto.InternalMessageInfo

func (m *GetCoinFeeResponse) GetFeeSlow() float64 {
	if m != nil {
		return m.FeeSlow
	}
	return 0
}

func (m *GetCoinFeeResponse) GetFeeMiddle() float64 {
	if m != nil {
		return m.FeeMiddle
	}
	return 0
}

func (m *GetCoinFeeResponse) GetFeeFast() float64 {
	if m != nil {
		return m.FeeFast
	}
	return 0
}

func (m *GetCoinFeeResponse) GetLimitFee() float64 {
	if m != nil {
		return m.LimitFee
	}
	return 0
}

func (m *GetCoinFeeResponse) GetPlatformFee() float64 {
	if m != nil {
		return m.PlatformFee
	}
	return 0
}

func (m *GetCoinFeeResponse) GetFeeSlowStr() string {
	if m != nil {
		return m.FeeSlowStr
	}
	return ""
}

func (m *GetCoinFeeResponse) GetFeeMiddleStr() string {
	if m != nil {
		return m.FeeMiddleStr
	}
	return ""
}

func (m *GetCoinFeeResponse) GetFeeFastStr() string {
	if m != nil {
		return m.FeeFastStr
	}
	return ""
}

func (m *GetCoinFeeResponse) GetLimitFeeStr() string {
	if m != nil {
		return m.LimitFeeStr
	}
	return ""
}

func (m *GetCoinFeeResponse) GetPlatformFeeStr() string {
	if m != nil {
		return m.PlatformFeeStr
	}
	return ""
}

type ListCoinTxRequest struct {
	RefAid          int64                                                      `protobuf:"varint,1,opt,name=RefAid,proto3" json:"RefAid,omitempty"`
	RefWid          int64                                                      `protobuf:"varint,2,opt,name=RefWid,proto3" json:"RefWid,omitempty"`
	RefCid          int64                                                      `protobuf:"varint,3,opt,name=RefCid,proto3" json:"RefCid,omitempty"`
	Txid            string                                                     `protobuf:"bytes,4,opt,name=Txid,proto3" json:"Txid,omitempty"`
	FromAddress     string                                                     `protobuf:"bytes,5,opt,name=FromAddress,proto3" json:"FromAddress,omitempty"`
	ToAddress       string                                                     `protobuf:"bytes,6,opt,name=ToAddress,proto3" json:"ToAddress,omitempty"`
	Memo            string                                                     `protobuf:"bytes,7,opt,name=Memo,proto3" json:"Memo,omitempty"`
	RequestId       string                                                     `protobuf:"bytes,8,opt,name=RequestId,proto3" json:"RequestId,omitempty"`
	InnerTxid       string                                                     `protobuf:"bytes,9,opt,name=InnerTxid,proto3" json:"InnerTxid,omitempty"`
	Type            int64                                                      `protobuf:"varint,10,opt,name=Type,proto3" json:"Type,omitempty"`
	MinConfirmedNum int64                                                      `protobuf:"varint,11,opt,name=MinConfirmedNum,proto3" json:"MinConfirmedNum,omitempty"`
	MinId           int64                                                      `protobuf:"varint,12,opt,name=MinId,proto3" json:"MinId,omitempty"`
	MaxId           int64                                                      `protobuf:"varint,13,opt,name=MaxId,proto3" json:"MaxId,omitempty"`
	Limit           int32                                                      `protobuf:"varint,14,opt,name=Limit,proto3" json:"Limit,omitempty"`
	BeginBlockTime  bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,15,opt,name=BeginBlockTime,proto3,casttype=bitbucket.org/biiigle/biiigle_wa001_dams/src/lib/time.Time" json:"BeginBlockTime,omitempty"`
	EndBlockTime    bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,16,opt,name=EndBlockTime,proto3,casttype=bitbucket.org/biiigle/biiigle_wa001_dams/src/lib/time.Time" json:"EndBlockTime,omitempty"`
	BillStatus      GenBillStatus                                              `protobuf:"varint,17,opt,name=BillStatus,proto3,enum=wallet.api.GenBillStatus" json:"BillStatus,omitempty"`
	Side            shared_gogo.TxSideType                                     `protobuf:"varint,18,opt,name=Side,proto3,enum=shared.api.TxSideType" json:"Side,omitempty"`
}

func (m *ListCoinTxRequest) Reset()         { *m = ListCoinTxRequest{} }
func (m *ListCoinTxRequest) String() string { return proto.CompactTextString(m) }
func (*ListCoinTxRequest) ProtoMessage()    {}
func (*ListCoinTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{36}
}
func (m *ListCoinTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCoinTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCoinTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCoinTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCoinTxRequest.Merge(m, src)
}
func (m *ListCoinTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCoinTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCoinTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCoinTxRequest proto.InternalMessageInfo

func (m *ListCoinTxRequest) GetRefAid() int64 {
	if m != nil {
		return m.RefAid
	}
	return 0
}

func (m *ListCoinTxRequest) GetRefWid() int64 {
	if m != nil {
		return m.RefWid
	}
	return 0
}

func (m *ListCoinTxRequest) GetRefCid() int64 {
	if m != nil {
		return m.RefCid
	}
	return 0
}

func (m *ListCoinTxRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *ListCoinTxRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *ListCoinTxRequest) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *ListCoinTxRequest) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *ListCoinTxRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ListCoinTxRequest) GetInnerTxid() string {
	if m != nil {
		return m.InnerTxid
	}
	return ""
}

func (m *ListCoinTxRequest) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ListCoinTxRequest) GetMinConfirmedNum() int64 {
	if m != nil {
		return m.MinConfirmedNum
	}
	return 0
}

func (m *ListCoinTxRequest) GetMinId() int64 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *ListCoinTxRequest) GetMaxId() int64 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *ListCoinTxRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListCoinTxRequest) GetBeginBlockTime() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.BeginBlockTime
	}
	return 0
}

func (m *ListCoinTxRequest) GetEndBlockTime() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.EndBlockTime
	}
	return 0
}

func (m *ListCoinTxRequest) GetBillStatus() GenBillStatus {
	if m != nil {
		return m.BillStatus
	}
	return GenBillStatus_GenBillStatus_Unknown
}

func (m *ListCoinTxRequest) GetSide() shared_gogo.TxSideType {
	if m != nil {
		return m.Side
	}
	return shared_gogo.TxSideType_TxSide_Unknown
}

type ListCoinTxResponse struct {
	Items []*shared_gogo.CoinTx `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
}

func (m *ListCoinTxResponse) Reset()         { *m = ListCoinTxResponse{} }
func (m *ListCoinTxResponse) String() string { return proto.CompactTextString(m) }
func (*ListCoinTxResponse) ProtoMessage()    {}
func (*ListCoinTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{37}
}
func (m *ListCoinTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCoinTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCoinTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCoinTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCoinTxResponse.Merge(m, src)
}
func (m *ListCoinTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCoinTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCoinTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCoinTxResponse proto.InternalMessageInfo

func (m *ListCoinTxResponse) GetItems() []*shared_gogo.CoinTx {
	if m != nil {
		return m.Items
	}
	return nil
}

type QueryCoinTxRequest struct {
	//账户id
	RefAid int64 `protobuf:"varint,1,opt,name=RefAid,proto3" json:"aid"`
	//模糊条件
	Txt string `protobuf:"bytes,2,opt,name=txt,proto3" json:"txt"`
	//钱包id
	RefWids []int64 `protobuf:"varint,3,rep,packed,name=RefWids,proto3" json:"wids"`
	//coin id
	RefCids []int64 `protobuf:"varint,4,rep,packed,name=RefCids,proto3" json:"cids"`
	//状态 3 等待审核 11 等待确认 13 成功 14 失败
	States []shared_gogo.TxStateType `protobuf:"varint,5,rep,packed,name=States,proto3,enum=shared.api.TxStateType" json:"states"`
	//类型 1 接收 2 发送
	Sides []shared_gogo.TxSideType `protobuf:"varint,6,rep,packed,name=Sides,proto3,enum=shared.api.TxSideType" json:"sides"`
	//上链时间 起始
	BeginBlockTime bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,7,opt,name=BeginBlockTime,proto3,casttype=bitbucket.org/biiigle/biiigle_wa001_dams/src/lib/time.Time" json:"begin_block_time" gorm:"type:datetime;"`
	//上链时间 结束 cointx.BlockTime < EndBlockTime
	EndBlockTime bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,8,opt,name=EndBlockTime,proto3,casttype=bitbucket.org/biiigle/biiigle_wa001_dams/src/lib/time.Time" json:"end_block_time" gorm:"type:datetime;"`
	//创建时间 起始
	BeginCreateAt bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,9,opt,name=BeginCreateAt,proto3,casttype=bitbucket.org/biiigle/biiigle_wa001_dams/src/lib/time.Time" json:"begin_create_at" gorm:"type:datetime;"`
	//创建时间 结束 cointx.BlockTime < EndBlockTime
	EndCreateAt bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,10,opt,name=EndCreateAt,proto3,casttype=bitbucket.org/biiigle/biiigle_wa001_dams/src/lib/time.Time" json:"end_create_at" gorm:"type:datetime;"`
	//更新时间 起始
	BeginUpdateAt bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,11,opt,name=BeginUpdateAt,proto3,casttype=bitbucket.org/biiigle/biiigle_wa001_dams/src/lib/time.Time" json:"begin_update_at" gorm:"type:datetime;"`
	//更新时间 结束 cointx.BlockTime < EndBlockTime
	EndUpdateAt bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time `protobuf:"varint,12,opt,name=EndUpdateAt,proto3,casttype=bitbucket.org/biiigle/biiigle_wa001_dams/src/lib/time.Time" json:"end_update_at" gorm:"type:datetime;"`
	//第几页
	Page int32 `protobuf:"varint,50,opt,name=Page,proto3" json:"page"`
	//每页条数
	PageSize int32 `protobuf:"varint,51,opt,name=PageSize,proto3" json:"page_size"`
}

func (m *QueryCoinTxRequest) Reset()         { *m = QueryCoinTxRequest{} }
func (m *QueryCoinTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCoinTxRequest) ProtoMessage()    {}
func (*QueryCoinTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{38}
}
func (m *QueryCoinTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCoinTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCoinTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCoinTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCoinTxRequest.Merge(m, src)
}
func (m *QueryCoinTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCoinTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCoinTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCoinTxRequest proto.InternalMessageInfo

func (m *QueryCoinTxRequest) GetRefAid() int64 {
	if m != nil {
		return m.RefAid
	}
	return 0
}

func (m *QueryCoinTxRequest) GetTxt() string {
	if m != nil {
		return m.Txt
	}
	return ""
}

func (m *QueryCoinTxRequest) GetRefWids() []int64 {
	if m != nil {
		return m.RefWids
	}
	return nil
}

func (m *QueryCoinTxRequest) GetRefCids() []int64 {
	if m != nil {
		return m.RefCids
	}
	return nil
}

func (m *QueryCoinTxRequest) GetStates() []shared_gogo.TxStateType {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *QueryCoinTxRequest) GetSides() []shared_gogo.TxSideType {
	if m != nil {
		return m.Sides
	}
	return nil
}

func (m *QueryCoinTxRequest) GetBeginBlockTime() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.BeginBlockTime
	}
	return 0
}

func (m *QueryCoinTxRequest) GetEndBlockTime() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.EndBlockTime
	}
	return 0
}

func (m *QueryCoinTxRequest) GetBeginCreateAt() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.BeginCreateAt
	}
	return 0
}

func (m *QueryCoinTxRequest) GetEndCreateAt() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.EndCreateAt
	}
	return 0
}

func (m *QueryCoinTxRequest) GetBeginUpdateAt() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.BeginUpdateAt
	}
	return 0
}

func (m *QueryCoinTxRequest) GetEndUpdateAt() bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time {
	if m != nil {
		return m.EndUpdateAt
	}
	return 0
}

func (m *QueryCoinTxRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryCoinTxRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type QueryCoinTxResponse struct {
	//交易列表
	Items []*shared_gogo.CoinTx `protobuf:"bytes,1,rep,name=Items,proto3" json:"items"`
	//总数
	TotalNum int32 `protobuf:"varint,2,opt,name=TotalNum,proto3" json:"total_num"`
	//第几页
	Page int32 `protobuf:"varint,3,opt,name=Page,proto3" json:"page"`
}

func (m *QueryCoinTxResponse) Reset()         { *m = QueryCoinTxResponse{} }
func (m *QueryCoinTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCoinTxResponse) ProtoMessage()    {}
func (*QueryCoinTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{39}
}
func (m *QueryCoinTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCoinTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCoinTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCoinTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCoinTxResponse.Merge(m, src)
}
func (m *QueryCoinTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCoinTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCoinTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCoinTxResponse proto.InternalMessageInfo

func (m *QueryCoinTxResponse) GetItems() []*shared_gogo.CoinTx {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *QueryCoinTxResponse) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *QueryCoinTxResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type NewWithdrawRequest struct {
	Item *shared_gogo.CoinTx `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *NewWithdrawRequest) Reset()         { *m = NewWithdrawRequest{} }
func (m *NewWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*NewWithdrawRequest) ProtoMessage()    {}
func (*NewWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{40}
}
func (m *NewWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewWithdrawRequest.Merge(m, src)
}
func (m *NewWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewWithdrawRequest proto.InternalMessageInfo

func (m *NewWithdrawRequest) GetItem() *shared_gogo.CoinTx {
	if m != nil {
		return m.Item
	}
	return nil
}

type NewWithdrawResponse struct {
	InnerTxid string `protobuf:"bytes,1,opt,name=InnerTxid,proto3" json:"InnerTxid,omitempty"`
}

func (m *NewWithdrawResponse) Reset()         { *m = NewWithdrawResponse{} }
func (m *NewWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*NewWithdrawResponse) ProtoMessage()    {}
func (*NewWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{41}
}
func (m *NewWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewWithdrawResponse.Merge(m, src)
}
func (m *NewWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewWithdrawResponse proto.InternalMessageInfo

func (m *NewWithdrawResponse) GetInnerTxid() string {
	if m != nil {
		return m.InnerTxid
	}
	return ""
}

type GetWithdrawDetailRequest struct {
	Aid       int64  `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid       int64  `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid       int64  `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
	RequestId string `protobuf:"bytes,4,opt,name=RequestId,proto3" json:"RequestId,omitempty"`
}

func (m *GetWithdrawDetailRequest) Reset()         { *m = GetWithdrawDetailRequest{} }
func (m *GetWithdrawDetailRequest) String() string { return proto.CompactTextString(m) }
func (*GetWithdrawDetailRequest) ProtoMessage()    {}
func (*GetWithdrawDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{42}
}
func (m *GetWithdrawDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWithdrawDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWithdrawDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWithdrawDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWithdrawDetailRequest.Merge(m, src)
}
func (m *GetWithdrawDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWithdrawDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWithdrawDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWithdrawDetailRequest proto.InternalMessageInfo

func (m *GetWithdrawDetailRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *GetWithdrawDetailRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *GetWithdrawDetailRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *GetWithdrawDetailRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type GetWithdrawDetailResponse struct {
	Item *shared_gogo.CoinTx `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *GetWithdrawDetailResponse) Reset()         { *m = GetWithdrawDetailResponse{} }
func (m *GetWithdrawDetailResponse) String() string { return proto.CompactTextString(m) }
func (*GetWithdrawDetailResponse) ProtoMessage()    {}
func (*GetWithdrawDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{43}
}
func (m *GetWithdrawDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWithdrawDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWithdrawDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWithdrawDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWithdrawDetailResponse.Merge(m, src)
}
func (m *GetWithdrawDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWithdrawDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWithdrawDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWithdrawDetailResponse proto.InternalMessageInfo

func (m *GetWithdrawDetailResponse) GetItem() *shared_gogo.CoinTx {
	if m != nil {
		return m.Item
	}
	return nil
}

type CollectCallbackRequest struct {
	Item *shared_gogo.CoinTx `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *CollectCallbackRequest) Reset()         { *m = CollectCallbackRequest{} }
func (m *CollectCallbackRequest) String() string { return proto.CompactTextString(m) }
func (*CollectCallbackRequest) ProtoMessage()    {}
func (*CollectCallbackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{44}
}
func (m *CollectCallbackRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectCallbackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectCallbackRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectCallbackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectCallbackRequest.Merge(m, src)
}
func (m *CollectCallbackRequest) XXX_Size() int {
	return m.Size()
}
func (m *CollectCallbackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectCallbackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CollectCallbackRequest proto.InternalMessageInfo

func (m *CollectCallbackRequest) GetItem() *shared_gogo.CoinTx {
	if m != nil {
		return m.Item
	}
	return nil
}

type CollectCallbackResponse struct {
	InnerTxid string `protobuf:"bytes,1,opt,name=InnerTxid,proto3" json:"InnerTxid,omitempty"`
}

func (m *CollectCallbackResponse) Reset()         { *m = CollectCallbackResponse{} }
func (m *CollectCallbackResponse) String() string { return proto.CompactTextString(m) }
func (*CollectCallbackResponse) ProtoMessage()    {}
func (*CollectCallbackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{45}
}
func (m *CollectCallbackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectCallbackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectCallbackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectCallbackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectCallbackResponse.Merge(m, src)
}
func (m *CollectCallbackResponse) XXX_Size() int {
	return m.Size()
}
func (m *CollectCallbackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectCallbackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CollectCallbackResponse proto.InternalMessageInfo

func (m *CollectCallbackResponse) GetInnerTxid() string {
	if m != nil {
		return m.InnerTxid
	}
	return ""
}

type ImportOldAddressRequest struct {
	Aid     int64  `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid     int64  `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid     int64  `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
	Uid     int64  `protobuf:"varint,4,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Address string `protobuf:"bytes,5,opt,name=Address,proto3" json:"Address,omitempty"`
	Memo    string `protobuf:"bytes,6,opt,name=Memo,proto3" json:"Memo,omitempty"`
	Label   string `protobuf:"bytes,7,opt,name=Label,proto3" json:"Label,omitempty"`
}

func (m *ImportOldAddressRequest) Reset()         { *m = ImportOldAddressRequest{} }
func (m *ImportOldAddressRequest) String() string { return proto.CompactTextString(m) }
func (*ImportOldAddressRequest) ProtoMessage()    {}
func (*ImportOldAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{46}
}
func (m *ImportOldAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportOldAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportOldAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportOldAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportOldAddressRequest.Merge(m, src)
}
func (m *ImportOldAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImportOldAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportOldAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportOldAddressRequest proto.InternalMessageInfo

func (m *ImportOldAddressRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ImportOldAddressRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ImportOldAddressRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ImportOldAddressRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ImportOldAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ImportOldAddressRequest) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *ImportOldAddressRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ImportOldAddressResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *ImportOldAddressResponse) Reset()         { *m = ImportOldAddressResponse{} }
func (m *ImportOldAddressResponse) String() string { return proto.CompactTextString(m) }
func (*ImportOldAddressResponse) ProtoMessage()    {}
func (*ImportOldAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{47}
}
func (m *ImportOldAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportOldAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportOldAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportOldAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportOldAddressResponse.Merge(m, src)
}
func (m *ImportOldAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImportOldAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportOldAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportOldAddressResponse proto.InternalMessageInfo

func (m *ImportOldAddressResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetWalletAssetRequest struct {
	Aid int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
}

func (m *GetWalletAssetRequest) Reset()         { *m = GetWalletAssetRequest{} }
func (m *GetWalletAssetRequest) String() string { return proto.CompactTextString(m) }
func (*GetWalletAssetRequest) ProtoMessage()    {}
func (*GetWalletAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{48}
}
func (m *GetWalletAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWalletAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWalletAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWalletAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWalletAssetRequest.Merge(m, src)
}
func (m *GetWalletAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWalletAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWalletAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWalletAssetRequest proto.InternalMessageInfo

func (m *GetWalletAssetRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *GetWalletAssetRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *GetWalletAssetRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type GetWalletAssetResponse struct {
	Item *shared_gogo.WalletAsset `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *GetWalletAssetResponse) Reset()         { *m = GetWalletAssetResponse{} }
func (m *GetWalletAssetResponse) String() string { return proto.CompactTextString(m) }
func (*GetWalletAssetResponse) ProtoMessage()    {}
func (*GetWalletAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{49}
}
func (m *GetWalletAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWalletAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWalletAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWalletAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWalletAssetResponse.Merge(m, src)
}
func (m *GetWalletAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWalletAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWalletAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWalletAssetResponse proto.InternalMessageInfo

func (m *GetWalletAssetResponse) GetItem() *shared_gogo.WalletAsset {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListWalletAssetRequest struct {
	Aid int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
}

func (m *ListWalletAssetRequest) Reset()         { *m = ListWalletAssetRequest{} }
func (m *ListWalletAssetRequest) String() string { return proto.CompactTextString(m) }
func (*ListWalletAssetRequest) ProtoMessage()    {}
func (*ListWalletAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{50}
}
func (m *ListWalletAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletAssetRequest.Merge(m, src)
}
func (m *ListWalletAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletAssetRequest proto.InternalMessageInfo

func (m *ListWalletAssetRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ListWalletAssetRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

type ListWalletAssetResponse struct {
	Items []*shared_gogo.WalletAsset `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
}

func (m *ListWalletAssetResponse) Reset()         { *m = ListWalletAssetResponse{} }
func (m *ListWalletAssetResponse) String() string { return proto.CompactTextString(m) }
func (*ListWalletAssetResponse) ProtoMessage()    {}
func (*ListWalletAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{51}
}
func (m *ListWalletAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWalletAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWalletAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWalletAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWalletAssetResponse.Merge(m, src)
}
func (m *ListWalletAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWalletAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWalletAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWalletAssetResponse proto.InternalMessageInfo

func (m *ListWalletAssetResponse) GetItems() []*shared_gogo.WalletAsset {
	if m != nil {
		return m.Items
	}
	return nil
}

type AddWithdrawSettingRequest struct {
	Item *shared_gogo.WithdrawSetting `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *AddWithdrawSettingRequest) Reset()         { *m = AddWithdrawSettingRequest{} }
func (m *AddWithdrawSettingRequest) String() string { return proto.CompactTextString(m) }
func (*AddWithdrawSettingRequest) ProtoMessage()    {}
func (*AddWithdrawSettingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{52}
}
func (m *AddWithdrawSettingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWithdrawSettingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWithdrawSettingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWithdrawSettingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWithdrawSettingRequest.Merge(m, src)
}
func (m *AddWithdrawSettingRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddWithdrawSettingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWithdrawSettingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWithdrawSettingRequest proto.InternalMessageInfo

func (m *AddWithdrawSettingRequest) GetItem() *shared_gogo.WithdrawSetting {
	if m != nil {
		return m.Item
	}
	return nil
}

type AddWithdrawSettingResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *AddWithdrawSettingResponse) Reset()         { *m = AddWithdrawSettingResponse{} }
func (m *AddWithdrawSettingResponse) String() string { return proto.CompactTextString(m) }
func (*AddWithdrawSettingResponse) ProtoMessage()    {}
func (*AddWithdrawSettingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{53}
}
func (m *AddWithdrawSettingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWithdrawSettingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWithdrawSettingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWithdrawSettingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWithdrawSettingResponse.Merge(m, src)
}
func (m *AddWithdrawSettingResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddWithdrawSettingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWithdrawSettingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddWithdrawSettingResponse proto.InternalMessageInfo

func (m *AddWithdrawSettingResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateWithdrawSettingRequest struct {
	Item *shared_gogo.WithdrawSetting `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *UpdateWithdrawSettingRequest) Reset()         { *m = UpdateWithdrawSettingRequest{} }
func (m *UpdateWithdrawSettingRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateWithdrawSettingRequest) ProtoMessage()    {}
func (*UpdateWithdrawSettingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{54}
}
func (m *UpdateWithdrawSettingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWithdrawSettingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWithdrawSettingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWithdrawSettingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWithdrawSettingRequest.Merge(m, src)
}
func (m *UpdateWithdrawSettingRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWithdrawSettingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWithdrawSettingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWithdrawSettingRequest proto.InternalMessageInfo

func (m *UpdateWithdrawSettingRequest) GetItem() *shared_gogo.WithdrawSetting {
	if m != nil {
		return m.Item
	}
	return nil
}

type UpdateWithdrawSettingResponse struct {
}

func (m *UpdateWithdrawSettingResponse) Reset()         { *m = UpdateWithdrawSettingResponse{} }
func (m *UpdateWithdrawSettingResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateWithdrawSettingResponse) ProtoMessage()    {}
func (*UpdateWithdrawSettingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{55}
}
func (m *UpdateWithdrawSettingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWithdrawSettingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWithdrawSettingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWithdrawSettingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWithdrawSettingResponse.Merge(m, src)
}
func (m *UpdateWithdrawSettingResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWithdrawSettingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWithdrawSettingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWithdrawSettingResponse proto.InternalMessageInfo

type RemoveWithdrawSettingRequest struct {
	Id  int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Aid int64 `protobuf:"varint,2,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid int64 `protobuf:"varint,3,opt,name=Wid,proto3" json:"Wid,omitempty"`
}

func (m *RemoveWithdrawSettingRequest) Reset()         { *m = RemoveWithdrawSettingRequest{} }
func (m *RemoveWithdrawSettingRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveWithdrawSettingRequest) ProtoMessage()    {}
func (*RemoveWithdrawSettingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{56}
}
func (m *RemoveWithdrawSettingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWithdrawSettingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWithdrawSettingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWithdrawSettingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWithdrawSettingRequest.Merge(m, src)
}
func (m *RemoveWithdrawSettingRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWithdrawSettingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWithdrawSettingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWithdrawSettingRequest proto.InternalMessageInfo

func (m *RemoveWithdrawSettingRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RemoveWithdrawSettingRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *RemoveWithdrawSettingRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

type RemoveWithdrawSettingResponse struct {
}

func (m *RemoveWithdrawSettingResponse) Reset()         { *m = RemoveWithdrawSettingResponse{} }
func (m *RemoveWithdrawSettingResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveWithdrawSettingResponse) ProtoMessage()    {}
func (*RemoveWithdrawSettingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{57}
}
func (m *RemoveWithdrawSettingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWithdrawSettingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWithdrawSettingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWithdrawSettingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWithdrawSettingResponse.Merge(m, src)
}
func (m *RemoveWithdrawSettingResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWithdrawSettingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWithdrawSettingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWithdrawSettingResponse proto.InternalMessageInfo

type GetWithdrawSettingRequest struct {
	Aid int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
}

func (m *GetWithdrawSettingRequest) Reset()         { *m = GetWithdrawSettingRequest{} }
func (m *GetWithdrawSettingRequest) String() string { return proto.CompactTextString(m) }
func (*GetWithdrawSettingRequest) ProtoMessage()    {}
func (*GetWithdrawSettingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{58}
}
func (m *GetWithdrawSettingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWithdrawSettingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWithdrawSettingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWithdrawSettingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWithdrawSettingRequest.Merge(m, src)
}
func (m *GetWithdrawSettingRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWithdrawSettingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWithdrawSettingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWithdrawSettingRequest proto.InternalMessageInfo

func (m *GetWithdrawSettingRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *GetWithdrawSettingRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

type GetWithdrawSettingResponse struct {
	Item *shared_gogo.WithdrawSetting `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *GetWithdrawSettingResponse) Reset()         { *m = GetWithdrawSettingResponse{} }
func (m *GetWithdrawSettingResponse) String() string { return proto.CompactTextString(m) }
func (*GetWithdrawSettingResponse) ProtoMessage()    {}
func (*GetWithdrawSettingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{59}
}
func (m *GetWithdrawSettingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWithdrawSettingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWithdrawSettingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWithdrawSettingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWithdrawSettingResponse.Merge(m, src)
}
func (m *GetWithdrawSettingResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWithdrawSettingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWithdrawSettingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWithdrawSettingResponse proto.InternalMessageInfo

func (m *GetWithdrawSettingResponse) GetItem() *shared_gogo.WithdrawSetting {
	if m != nil {
		return m.Item
	}
	return nil
}

type AddWithdrawQuotaRequest struct {
	Item *shared_gogo.CoinWithdrawQuota `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *AddWithdrawQuotaRequest) Reset()         { *m = AddWithdrawQuotaRequest{} }
func (m *AddWithdrawQuotaRequest) String() string { return proto.CompactTextString(m) }
func (*AddWithdrawQuotaRequest) ProtoMessage()    {}
func (*AddWithdrawQuotaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{60}
}
func (m *AddWithdrawQuotaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWithdrawQuotaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWithdrawQuotaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWithdrawQuotaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWithdrawQuotaRequest.Merge(m, src)
}
func (m *AddWithdrawQuotaRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddWithdrawQuotaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWithdrawQuotaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWithdrawQuotaRequest proto.InternalMessageInfo

func (m *AddWithdrawQuotaRequest) GetItem() *shared_gogo.CoinWithdrawQuota {
	if m != nil {
		return m.Item
	}
	return nil
}

type AddWithdrawQuotaResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *AddWithdrawQuotaResponse) Reset()         { *m = AddWithdrawQuotaResponse{} }
func (m *AddWithdrawQuotaResponse) String() string { return proto.CompactTextString(m) }
func (*AddWithdrawQuotaResponse) ProtoMessage()    {}
func (*AddWithdrawQuotaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{61}
}
func (m *AddWithdrawQuotaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWithdrawQuotaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWithdrawQuotaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWithdrawQuotaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWithdrawQuotaResponse.Merge(m, src)
}
func (m *AddWithdrawQuotaResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddWithdrawQuotaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWithdrawQuotaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddWithdrawQuotaResponse proto.InternalMessageInfo

func (m *AddWithdrawQuotaResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveWithdrawQuotaRequest struct {
	Id  int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Aid int64 `protobuf:"varint,2,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid int64 `protobuf:"varint,3,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid int64 `protobuf:"varint,4,opt,name=Cid,proto3" json:"Cid,omitempty"`
}

func (m *RemoveWithdrawQuotaRequest) Reset()         { *m = RemoveWithdrawQuotaRequest{} }
func (m *RemoveWithdrawQuotaRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveWithdrawQuotaRequest) ProtoMessage()    {}
func (*RemoveWithdrawQuotaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{62}
}
func (m *RemoveWithdrawQuotaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWithdrawQuotaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWithdrawQuotaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWithdrawQuotaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWithdrawQuotaRequest.Merge(m, src)
}
func (m *RemoveWithdrawQuotaRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWithdrawQuotaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWithdrawQuotaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWithdrawQuotaRequest proto.InternalMessageInfo

func (m *RemoveWithdrawQuotaRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RemoveWithdrawQuotaRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *RemoveWithdrawQuotaRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *RemoveWithdrawQuotaRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type RemoveWithdrawQuotaResponse struct {
}

func (m *RemoveWithdrawQuotaResponse) Reset()         { *m = RemoveWithdrawQuotaResponse{} }
func (m *RemoveWithdrawQuotaResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveWithdrawQuotaResponse) ProtoMessage()    {}
func (*RemoveWithdrawQuotaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{63}
}
func (m *RemoveWithdrawQuotaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWithdrawQuotaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWithdrawQuotaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWithdrawQuotaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWithdrawQuotaResponse.Merge(m, src)
}
func (m *RemoveWithdrawQuotaResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWithdrawQuotaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWithdrawQuotaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWithdrawQuotaResponse proto.InternalMessageInfo

type ListWithdrawQuotaRequest struct {
	Aid int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
}

func (m *ListWithdrawQuotaRequest) Reset()         { *m = ListWithdrawQuotaRequest{} }
func (m *ListWithdrawQuotaRequest) String() string { return proto.CompactTextString(m) }
func (*ListWithdrawQuotaRequest) ProtoMessage()    {}
func (*ListWithdrawQuotaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{64}
}
func (m *ListWithdrawQuotaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWithdrawQuotaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWithdrawQuotaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWithdrawQuotaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWithdrawQuotaRequest.Merge(m, src)
}
func (m *ListWithdrawQuotaRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWithdrawQuotaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWithdrawQuotaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWithdrawQuotaRequest proto.InternalMessageInfo

func (m *ListWithdrawQuotaRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ListWithdrawQuotaRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListWithdrawQuotaRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type ListWithdrawQuotaResponse struct {
	Items []*shared_gogo.CoinWithdrawQuota `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
}

func (m *ListWithdrawQuotaResponse) Reset()         { *m = ListWithdrawQuotaResponse{} }
func (m *ListWithdrawQuotaResponse) String() string { return proto.CompactTextString(m) }
func (*ListWithdrawQuotaResponse) ProtoMessage()    {}
func (*ListWithdrawQuotaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{65}
}
func (m *ListWithdrawQuotaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWithdrawQuotaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWithdrawQuotaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWithdrawQuotaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWithdrawQuotaResponse.Merge(m, src)
}
func (m *ListWithdrawQuotaResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWithdrawQuotaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWithdrawQuotaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWithdrawQuotaResponse proto.InternalMessageInfo

func (m *ListWithdrawQuotaResponse) GetItems() []*shared_gogo.CoinWithdrawQuota {
	if m != nil {
		return m.Items
	}
	return nil
}

type AddWithdrawWhitelistRequest struct {
	Item *shared_gogo.CoinWithdrawWhitelist `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *AddWithdrawWhitelistRequest) Reset()         { *m = AddWithdrawWhitelistRequest{} }
func (m *AddWithdrawWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*AddWithdrawWhitelistRequest) ProtoMessage()    {}
func (*AddWithdrawWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{66}
}
func (m *AddWithdrawWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWithdrawWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWithdrawWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWithdrawWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWithdrawWhitelistRequest.Merge(m, src)
}
func (m *AddWithdrawWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddWithdrawWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWithdrawWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWithdrawWhitelistRequest proto.InternalMessageInfo

func (m *AddWithdrawWhitelistRequest) GetItem() *shared_gogo.CoinWithdrawWhitelist {
	if m != nil {
		return m.Item
	}
	return nil
}

type AddWithdrawWhitelistResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *AddWithdrawWhitelistResponse) Reset()         { *m = AddWithdrawWhitelistResponse{} }
func (m *AddWithdrawWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*AddWithdrawWhitelistResponse) ProtoMessage()    {}
func (*AddWithdrawWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{67}
}
func (m *AddWithdrawWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWithdrawWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWithdrawWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWithdrawWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWithdrawWhitelistResponse.Merge(m, src)
}
func (m *AddWithdrawWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddWithdrawWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWithdrawWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddWithdrawWhitelistResponse proto.InternalMessageInfo

func (m *AddWithdrawWhitelistResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveWithdrawWhitelistRequest struct {
	Id  int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Aid int64 `protobuf:"varint,2,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid int64 `protobuf:"varint,3,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid int64 `protobuf:"varint,4,opt,name=Cid,proto3" json:"Cid,omitempty"`
}

func (m *RemoveWithdrawWhitelistRequest) Reset()         { *m = RemoveWithdrawWhitelistRequest{} }
func (m *RemoveWithdrawWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveWithdrawWhitelistRequest) ProtoMessage()    {}
func (*RemoveWithdrawWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{68}
}
func (m *RemoveWithdrawWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWithdrawWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWithdrawWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWithdrawWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWithdrawWhitelistRequest.Merge(m, src)
}
func (m *RemoveWithdrawWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWithdrawWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWithdrawWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWithdrawWhitelistRequest proto.InternalMessageInfo

func (m *RemoveWithdrawWhitelistRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RemoveWithdrawWhitelistRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *RemoveWithdrawWhitelistRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *RemoveWithdrawWhitelistRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type RemoveWithdrawWhitelistResponse struct {
}

func (m *RemoveWithdrawWhitelistResponse) Reset()         { *m = RemoveWithdrawWhitelistResponse{} }
func (m *RemoveWithdrawWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveWithdrawWhitelistResponse) ProtoMessage()    {}
func (*RemoveWithdrawWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{69}
}
func (m *RemoveWithdrawWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWithdrawWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWithdrawWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWithdrawWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWithdrawWhitelistResponse.Merge(m, src)
}
func (m *RemoveWithdrawWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWithdrawWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWithdrawWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWithdrawWhitelistResponse proto.InternalMessageInfo

type ListWithdrawWhitelistRequest struct {
	Aid int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
}

func (m *ListWithdrawWhitelistRequest) Reset()         { *m = ListWithdrawWhitelistRequest{} }
func (m *ListWithdrawWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*ListWithdrawWhitelistRequest) ProtoMessage()    {}
func (*ListWithdrawWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{70}
}
func (m *ListWithdrawWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWithdrawWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWithdrawWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWithdrawWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWithdrawWhitelistRequest.Merge(m, src)
}
func (m *ListWithdrawWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWithdrawWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWithdrawWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWithdrawWhitelistRequest proto.InternalMessageInfo

func (m *ListWithdrawWhitelistRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ListWithdrawWhitelistRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListWithdrawWhitelistRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type ListWithdrawWhitelistResponse struct {
	Items []*shared_gogo.CoinWithdrawWhitelist `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
}

func (m *ListWithdrawWhitelistResponse) Reset()         { *m = ListWithdrawWhitelistResponse{} }
func (m *ListWithdrawWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*ListWithdrawWhitelistResponse) ProtoMessage()    {}
func (*ListWithdrawWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{71}
}
func (m *ListWithdrawWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWithdrawWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWithdrawWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWithdrawWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWithdrawWhitelistResponse.Merge(m, src)
}
func (m *ListWithdrawWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWithdrawWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWithdrawWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWithdrawWhitelistResponse proto.InternalMessageInfo

func (m *ListWithdrawWhitelistResponse) GetItems() []*shared_gogo.CoinWithdrawWhitelist {
	if m != nil {
		return m.Items
	}
	return nil
}

type AddWithdrawPolicyRequest struct {
	//策略参数
	Item *shared_gogo.WithdrawPolicy `protobuf:"bytes,1,opt,name=Item,proto3" json:"item"`
}

func (m *AddWithdrawPolicyRequest) Reset()         { *m = AddWithdrawPolicyRequest{} }
func (m *AddWithdrawPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*AddWithdrawPolicyRequest) ProtoMessage()    {}
func (*AddWithdrawPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{72}
}
func (m *AddWithdrawPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWithdrawPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWithdrawPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWithdrawPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWithdrawPolicyRequest.Merge(m, src)
}
func (m *AddWithdrawPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddWithdrawPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWithdrawPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWithdrawPolicyRequest proto.InternalMessageInfo

func (m *AddWithdrawPolicyRequest) GetItem() *shared_gogo.WithdrawPolicy {
	if m != nil {
		return m.Item
	}
	return nil
}

type AddWithdrawPolicyResponse struct {
}

func (m *AddWithdrawPolicyResponse) Reset()         { *m = AddWithdrawPolicyResponse{} }
func (m *AddWithdrawPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*AddWithdrawPolicyResponse) ProtoMessage()    {}
func (*AddWithdrawPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{73}
}
func (m *AddWithdrawPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWithdrawPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWithdrawPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWithdrawPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWithdrawPolicyResponse.Merge(m, src)
}
func (m *AddWithdrawPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddWithdrawPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWithdrawPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddWithdrawPolicyResponse proto.InternalMessageInfo

type UpdateWithdrawPolicyRequest struct {
	//新增的策略参数
	AddItem *shared_gogo.WithdrawPolicy `protobuf:"bytes,1,opt,name=AddItem,proto3" json:"add_item"`
	//删除的策略参数
	DelItem *shared_gogo.WithdrawPolicy `protobuf:"bytes,2,opt,name=DelItem,proto3" json:"del_item"`
	//更新的策略参数
	UpdateItem *shared_gogo.WithdrawPolicy `protobuf:"bytes,3,opt,name=UpdateItem,proto3" json:"update_item"`
}

func (m *UpdateWithdrawPolicyRequest) Reset()         { *m = UpdateWithdrawPolicyRequest{} }
func (m *UpdateWithdrawPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateWithdrawPolicyRequest) ProtoMessage()    {}
func (*UpdateWithdrawPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{74}
}
func (m *UpdateWithdrawPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWithdrawPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWithdrawPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWithdrawPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWithdrawPolicyRequest.Merge(m, src)
}
func (m *UpdateWithdrawPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWithdrawPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWithdrawPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWithdrawPolicyRequest proto.InternalMessageInfo

func (m *UpdateWithdrawPolicyRequest) GetAddItem() *shared_gogo.WithdrawPolicy {
	if m != nil {
		return m.AddItem
	}
	return nil
}

func (m *UpdateWithdrawPolicyRequest) GetDelItem() *shared_gogo.WithdrawPolicy {
	if m != nil {
		return m.DelItem
	}
	return nil
}

func (m *UpdateWithdrawPolicyRequest) GetUpdateItem() *shared_gogo.WithdrawPolicy {
	if m != nil {
		return m.UpdateItem
	}
	return nil
}

type UpdateWithdrawPolicyResponse struct {
}

func (m *UpdateWithdrawPolicyResponse) Reset()         { *m = UpdateWithdrawPolicyResponse{} }
func (m *UpdateWithdrawPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateWithdrawPolicyResponse) ProtoMessage()    {}
func (*UpdateWithdrawPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{75}
}
func (m *UpdateWithdrawPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWithdrawPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWithdrawPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWithdrawPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWithdrawPolicyResponse.Merge(m, src)
}
func (m *UpdateWithdrawPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWithdrawPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWithdrawPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWithdrawPolicyResponse proto.InternalMessageInfo

type ListWithdrawPolicyRequest struct {
	Aid int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
}

func (m *ListWithdrawPolicyRequest) Reset()         { *m = ListWithdrawPolicyRequest{} }
func (m *ListWithdrawPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*ListWithdrawPolicyRequest) ProtoMessage()    {}
func (*ListWithdrawPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{76}
}
func (m *ListWithdrawPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWithdrawPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWithdrawPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWithdrawPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWithdrawPolicyRequest.Merge(m, src)
}
func (m *ListWithdrawPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWithdrawPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWithdrawPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWithdrawPolicyRequest proto.InternalMessageInfo

func (m *ListWithdrawPolicyRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ListWithdrawPolicyRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListWithdrawPolicyRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type ListWithdrawPolicyResponse struct {
	Item *shared_gogo.WithdrawPolicy `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *ListWithdrawPolicyResponse) Reset()         { *m = ListWithdrawPolicyResponse{} }
func (m *ListWithdrawPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*ListWithdrawPolicyResponse) ProtoMessage()    {}
func (*ListWithdrawPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{77}
}
func (m *ListWithdrawPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWithdrawPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWithdrawPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWithdrawPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWithdrawPolicyResponse.Merge(m, src)
}
func (m *ListWithdrawPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWithdrawPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWithdrawPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWithdrawPolicyResponse proto.InternalMessageInfo

func (m *ListWithdrawPolicyResponse) GetItem() *shared_gogo.WithdrawPolicy {
	if m != nil {
		return m.Item
	}
	return nil
}

type GetWithdrawPolicyRequest struct {
	Aid int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
}

func (m *GetWithdrawPolicyRequest) Reset()         { *m = GetWithdrawPolicyRequest{} }
func (m *GetWithdrawPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*GetWithdrawPolicyRequest) ProtoMessage()    {}
func (*GetWithdrawPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{78}
}
func (m *GetWithdrawPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWithdrawPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWithdrawPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWithdrawPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWithdrawPolicyRequest.Merge(m, src)
}
func (m *GetWithdrawPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWithdrawPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWithdrawPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWithdrawPolicyRequest proto.InternalMessageInfo

func (m *GetWithdrawPolicyRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *GetWithdrawPolicyRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *GetWithdrawPolicyRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

type GetWithdrawPolicyResponse struct {
	Item *shared_gogo.WithdrawPolicy `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *GetWithdrawPolicyResponse) Reset()         { *m = GetWithdrawPolicyResponse{} }
func (m *GetWithdrawPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*GetWithdrawPolicyResponse) ProtoMessage()    {}
func (*GetWithdrawPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{79}
}
func (m *GetWithdrawPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWithdrawPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWithdrawPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWithdrawPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWithdrawPolicyResponse.Merge(m, src)
}
func (m *GetWithdrawPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWithdrawPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWithdrawPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWithdrawPolicyResponse proto.InternalMessageInfo

func (m *GetWithdrawPolicyResponse) GetItem() *shared_gogo.WithdrawPolicy {
	if m != nil {
		return m.Item
	}
	return nil
}

type AddMessageRequest struct {
	Item *shared_gogo.Message `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *AddMessageRequest) Reset()         { *m = AddMessageRequest{} }
func (m *AddMessageRequest) String() string { return proto.CompactTextString(m) }
func (*AddMessageRequest) ProtoMessage()    {}
func (*AddMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{80}
}
func (m *AddMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMessageRequest.Merge(m, src)
}
func (m *AddMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddMessageRequest proto.InternalMessageInfo

func (m *AddMessageRequest) GetItem() *shared_gogo.Message {
	if m != nil {
		return m.Item
	}
	return nil
}

type AddMessageResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *AddMessageResponse) Reset()         { *m = AddMessageResponse{} }
func (m *AddMessageResponse) String() string { return proto.CompactTextString(m) }
func (*AddMessageResponse) ProtoMessage()    {}
func (*AddMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{81}
}
func (m *AddMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMessageResponse.Merge(m, src)
}
func (m *AddMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddMessageResponse proto.InternalMessageInfo

func (m *AddMessageResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateMessageRequest struct {
	Item *shared_gogo.Message `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *UpdateMessageRequest) Reset()         { *m = UpdateMessageRequest{} }
func (m *UpdateMessageRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMessageRequest) ProtoMessage()    {}
func (*UpdateMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{82}
}
func (m *UpdateMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageRequest.Merge(m, src)
}
func (m *UpdateMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageRequest proto.InternalMessageInfo

func (m *UpdateMessageRequest) GetItem() *shared_gogo.Message {
	if m != nil {
		return m.Item
	}
	return nil
}

type UpdateMessageResponse struct {
}

func (m *UpdateMessageResponse) Reset()         { *m = UpdateMessageResponse{} }
func (m *UpdateMessageResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateMessageResponse) ProtoMessage()    {}
func (*UpdateMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{83}
}
func (m *UpdateMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageResponse.Merge(m, src)
}
func (m *UpdateMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageResponse proto.InternalMessageInfo

type ListMessageRequest struct {
	Aid      int64 `protobuf:"varint,1,opt,name=Aid,proto3" json:"Aid,omitempty"`
	Wid      int64 `protobuf:"varint,2,opt,name=Wid,proto3" json:"Wid,omitempty"`
	Cid      int64 `protobuf:"varint,3,opt,name=Cid,proto3" json:"Cid,omitempty"`
	Page     int32 `protobuf:"varint,10,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize int32 `protobuf:"varint,11,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (m *ListMessageRequest) Reset()         { *m = ListMessageRequest{} }
func (m *ListMessageRequest) String() string { return proto.CompactTextString(m) }
func (*ListMessageRequest) ProtoMessage()    {}
func (*ListMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{84}
}
func (m *ListMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMessageRequest.Merge(m, src)
}
func (m *ListMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMessageRequest proto.InternalMessageInfo

func (m *ListMessageRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ListMessageRequest) GetWid() int64 {
	if m != nil {
		return m.Wid
	}
	return 0
}

func (m *ListMessageRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ListMessageRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListMessageRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListMessageResponse struct {
	Items    []*shared_gogo.Message `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	TotalNum int32                  `protobuf:"varint,10,opt,name=TotalNum,proto3" json:"TotalNum,omitempty"`
	Page     int32                  `protobuf:"varint,11,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (m *ListMessageResponse) Reset()         { *m = ListMessageResponse{} }
func (m *ListMessageResponse) String() string { return proto.CompactTextString(m) }
func (*ListMessageResponse) ProtoMessage()    {}
func (*ListMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{85}
}
func (m *ListMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMessageResponse.Merge(m, src)
}
func (m *ListMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMessageResponse proto.InternalMessageInfo

func (m *ListMessageResponse) GetItems() []*shared_gogo.Message {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListMessageResponse) GetTotalNum() int32 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

func (m *ListMessageResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func init() {
	proto.RegisterEnum("wallet.api.GenBillStatus", GenBillStatus_name, GenBillStatus_value)
	proto.RegisterType((*AddWalletRequest)(nil), "wallet.api.AddWalletRequest")
	proto.RegisterType((*AddWalletResponse)(nil), "wallet.api.AddWalletResponse")
	proto.RegisterType((*GetWalletRequest)(nil), "wallet.api.GetWalletRequest")
	proto.RegisterType((*GetWalletResponse)(nil), "wallet.api.GetWalletResponse")
	proto.RegisterType((*UpdateWalletRequest)(nil), "wallet.api.UpdateWalletRequest")
	proto.RegisterType((*UpdateWalletResponse)(nil), "wallet.api.UpdateWalletResponse")
	proto.RegisterType((*RemoveWalletRequest)(nil), "wallet.api.RemoveWalletRequest")
	proto.RegisterType((*RemoveWalletResponse)(nil), "wallet.api.RemoveWalletResponse")
	proto.RegisterType((*ListWalletRequest)(nil), "wallet.api.ListWalletRequest")
	proto.RegisterType((*ListWalletResponse)(nil), "wallet.api.ListWalletResponse")
	proto.RegisterType((*ListCoinInfoRequest)(nil), "wallet.api.ListCoinInfoRequest")
	proto.RegisterType((*ListCoinInfoResponse)(nil), "wallet.api.ListCoinInfoResponse")
	proto.RegisterType((*AddWalletCoinRequest)(nil), "wallet.api.AddWalletCoinRequest")
	proto.RegisterType((*AddWalletCoinResponse)(nil), "wallet.api.AddWalletCoinResponse")
	proto.RegisterType((*RemoveWalletCoinRequest)(nil), "wallet.api.RemoveWalletCoinRequest")
	proto.RegisterType((*RemoveWalletCoinResponse)(nil), "wallet.api.RemoveWalletCoinResponse")
	proto.RegisterType((*ListWalletCoinRequest)(nil), "wallet.api.ListWalletCoinRequest")
	proto.RegisterType((*ListWalletCoinResponse)(nil), "wallet.api.ListWalletCoinResponse")
	proto.RegisterType((*ListWalletDetailRequest)(nil), "wallet.api.ListWalletDetailRequest")
	proto.RegisterType((*ListWalletDetailResponse)(nil), "wallet.api.ListWalletDetailResponse")
	proto.RegisterType((*ListWalletCoinDetailRequest)(nil), "wallet.api.ListWalletCoinDetailRequest")
	proto.RegisterType((*ListWalletCoinDetailResponse)(nil), "wallet.api.ListWalletCoinDetailResponse")
	proto.RegisterType((*GetWalletCoinRequest)(nil), "wallet.api.GetWalletCoinRequest")
	proto.RegisterType((*GetWalletCoinResponse)(nil), "wallet.api.GetWalletCoinResponse")
	proto.RegisterType((*ListAddressRequest)(nil), "wallet.api.ListAddressRequest")
	proto.RegisterType((*ListAddressResponse)(nil), "wallet.api.ListAddressResponse")
	proto.RegisterType((*GetNewAddressRequest)(nil), "wallet.api.GetNewAddressRequest")
	proto.RegisterType((*GetNewAddressResponse)(nil), "wallet.api.GetNewAddressResponse")
	proto.RegisterType((*HideAddressRequest)(nil), "wallet.api.HideAddressRequest")
	proto.RegisterType((*HideAddressResponse)(nil), "wallet.api.HideAddressResponse")
	proto.RegisterType((*HasAddressRequest)(nil), "wallet.api.HasAddressRequest")
	proto.RegisterType((*HasAddressResponse)(nil), "wallet.api.HasAddressResponse")
	proto.RegisterType((*CheckAddressRequest)(nil), "wallet.api.CheckAddressRequest")
	proto.RegisterType((*CheckAddressResponse)(nil), "wallet.api.CheckAddressResponse")
	proto.RegisterType((*GetCoinFeeRequest)(nil), "wallet.api.GetCoinFeeRequest")
	proto.RegisterType((*GetCoinFeeResponse)(nil), "wallet.api.GetCoinFeeResponse")
	proto.RegisterType((*ListCoinTxRequest)(nil), "wallet.api.ListCoinTxRequest")
	proto.RegisterType((*ListCoinTxResponse)(nil), "wallet.api.ListCoinTxResponse")
	proto.RegisterType((*QueryCoinTxRequest)(nil), "wallet.api.QueryCoinTxRequest")
	proto.RegisterType((*QueryCoinTxResponse)(nil), "wallet.api.QueryCoinTxResponse")
	proto.RegisterType((*NewWithdrawRequest)(nil), "wallet.api.NewWithdrawRequest")
	proto.RegisterType((*NewWithdrawResponse)(nil), "wallet.api.NewWithdrawResponse")
	proto.RegisterType((*GetWithdrawDetailRequest)(nil), "wallet.api.GetWithdrawDetailRequest")
	proto.RegisterType((*GetWithdrawDetailResponse)(nil), "wallet.api.GetWithdrawDetailResponse")
	proto.RegisterType((*CollectCallbackRequest)(nil), "wallet.api.CollectCallbackRequest")
	proto.RegisterType((*CollectCallbackResponse)(nil), "wallet.api.CollectCallbackResponse")
	proto.RegisterType((*ImportOldAddressRequest)(nil), "wallet.api.ImportOldAddressRequest")
	proto.RegisterType((*ImportOldAddressResponse)(nil), "wallet.api.ImportOldAddressResponse")
	proto.RegisterType((*GetWalletAssetRequest)(nil), "wallet.api.GetWalletAssetRequest")
	proto.RegisterType((*GetWalletAssetResponse)(nil), "wallet.api.GetWalletAssetResponse")
	proto.RegisterType((*ListWalletAssetRequest)(nil), "wallet.api.ListWalletAssetRequest")
	proto.RegisterType((*ListWalletAssetResponse)(nil), "wallet.api.ListWalletAssetResponse")
	proto.RegisterType((*AddWithdrawSettingRequest)(nil), "wallet.api.AddWithdrawSettingRequest")
	proto.RegisterType((*AddWithdrawSettingResponse)(nil), "wallet.api.AddWithdrawSettingResponse")
	proto.RegisterType((*UpdateWithdrawSettingRequest)(nil), "wallet.api.UpdateWithdrawSettingRequest")
	proto.RegisterType((*UpdateWithdrawSettingResponse)(nil), "wallet.api.UpdateWithdrawSettingResponse")
	proto.RegisterType((*RemoveWithdrawSettingRequest)(nil), "wallet.api.RemoveWithdrawSettingRequest")
	proto.RegisterType((*RemoveWithdrawSettingResponse)(nil), "wallet.api.RemoveWithdrawSettingResponse")
	proto.RegisterType((*GetWithdrawSettingRequest)(nil), "wallet.api.GetWithdrawSettingRequest")
	proto.RegisterType((*GetWithdrawSettingResponse)(nil), "wallet.api.GetWithdrawSettingResponse")
	proto.RegisterType((*AddWithdrawQuotaRequest)(nil), "wallet.api.AddWithdrawQuotaRequest")
	proto.RegisterType((*AddWithdrawQuotaResponse)(nil), "wallet.api.AddWithdrawQuotaResponse")
	proto.RegisterType((*RemoveWithdrawQuotaRequest)(nil), "wallet.api.RemoveWithdrawQuotaRequest")
	proto.RegisterType((*RemoveWithdrawQuotaResponse)(nil), "wallet.api.RemoveWithdrawQuotaResponse")
	proto.RegisterType((*ListWithdrawQuotaRequest)(nil), "wallet.api.ListWithdrawQuotaRequest")
	proto.RegisterType((*ListWithdrawQuotaResponse)(nil), "wallet.api.ListWithdrawQuotaResponse")
	proto.RegisterType((*AddWithdrawWhitelistRequest)(nil), "wallet.api.AddWithdrawWhitelistRequest")
	proto.RegisterType((*AddWithdrawWhitelistResponse)(nil), "wallet.api.AddWithdrawWhitelistResponse")
	proto.RegisterType((*RemoveWithdrawWhitelistRequest)(nil), "wallet.api.RemoveWithdrawWhitelistRequest")
	proto.RegisterType((*RemoveWithdrawWhitelistResponse)(nil), "wallet.api.RemoveWithdrawWhitelistResponse")
	proto.RegisterType((*ListWithdrawWhitelistRequest)(nil), "wallet.api.ListWithdrawWhitelistRequest")
	proto.RegisterType((*ListWithdrawWhitelistResponse)(nil), "wallet.api.ListWithdrawWhitelistResponse")
	proto.RegisterType((*AddWithdrawPolicyRequest)(nil), "wallet.api.AddWithdrawPolicyRequest")
	proto.RegisterType((*AddWithdrawPolicyResponse)(nil), "wallet.api.AddWithdrawPolicyResponse")
	proto.RegisterType((*UpdateWithdrawPolicyRequest)(nil), "wallet.api.UpdateWithdrawPolicyRequest")
	proto.RegisterType((*UpdateWithdrawPolicyResponse)(nil), "wallet.api.UpdateWithdrawPolicyResponse")
	proto.RegisterType((*ListWithdrawPolicyRequest)(nil), "wallet.api.ListWithdrawPolicyRequest")
	proto.RegisterType((*ListWithdrawPolicyResponse)(nil), "wallet.api.ListWithdrawPolicyResponse")
	proto.RegisterType((*GetWithdrawPolicyRequest)(nil), "wallet.api.GetWithdrawPolicyRequest")
	proto.RegisterType((*GetWithdrawPolicyResponse)(nil), "wallet.api.GetWithdrawPolicyResponse")
	proto.RegisterType((*AddMessageRequest)(nil), "wallet.api.AddMessageRequest")
	proto.RegisterType((*AddMessageResponse)(nil), "wallet.api.AddMessageResponse")
	proto.RegisterType((*UpdateMessageRequest)(nil), "wallet.api.UpdateMessageRequest")
	proto.RegisterType((*UpdateMessageResponse)(nil), "wallet.api.UpdateMessageResponse")
	proto.RegisterType((*ListMessageRequest)(nil), "wallet.api.ListMessageRequest")
	proto.RegisterType((*ListMessageResponse)(nil), "wallet.api.ListMessageResponse")
}

func init() { proto.RegisterFile("wallet.proto", fileDescriptor_b88fd140af4deb6f) }

var fileDescriptor_b88fd140af4deb6f = []byte{
	// 2930 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5b, 0x4b, 0x6f, 0x1b, 0xc9,
	0x11, 0x26, 0x45, 0x51, 0x8f, 0xd2, 0xc3, 0x52, 0xeb, 0x45, 0x51, 0x0f, 0xca, 0xb3, 0x6b, 0x59,
	0xd2, 0x7a, 0xa5, 0xb5, 0x9d, 0xc0, 0x89, 0x6d, 0xac, 0x23, 0xca, 0x96, 0xad, 0xac, 0xe4, 0x95,
	0x47, 0xf2, 0x3a, 0x59, 0x2c, 0x20, 0x0c, 0x39, 0x2d, 0x6a, 0x22, 0x92, 0xa3, 0x25, 0x47, 0x91,
	0x6c, 0x20, 0x08, 0x90, 0x63, 0x80, 0x00, 0x0b, 0x6c, 0xfe, 0x42, 0xfe, 0x40, 0xee, 0x39, 0x27,
	0xc7, 0x45, 0x4e, 0x39, 0x11, 0x81, 0x7d, 0xd3, 0x71, 0x8f, 0x39, 0x05, 0xfd, 0x98, 0x99, 0xae,
	0x79, 0x90, 0xd4, 0x6b, 0x2f, 0x16, 0xbb, 0xbb, 0xfa, 0xab, 0xea, 0xaa, 0xee, 0x9a, 0xea, 0xaa,
	0x36, 0xf4, 0x9f, 0x18, 0xe5, 0x32, 0x75, 0x96, 0x8f, 0x6a, 0xb6, 0x63, 0x13, 0x90, 0x2d, 0xe3,
	0xc8, 0xca, 0x7e, 0x5a, 0xb2, 0x9c, 0x83, 0xe3, 0xc2, 0x72, 0xd1, 0xae, 0xac, 0x94, 0xec, 0x92,
	0xbd, 0xc2, 0x49, 0x0a, 0xc7, 0xfb, 0xbc, 0xc5, 0x1b, 0xfc, 0x97, 0x98, 0x9a, 0x1d, 0xa9, 0x1f,
	0x18, 0x35, 0x6a, 0xae, 0x88, 0x3f, 0xa2, 0x53, 0xab, 0xc1, 0xd0, 0xaa, 0x69, 0xbe, 0xe1, 0xa0,
	0x3a, 0xfd, 0xf6, 0x98, 0xd6, 0x1d, 0x32, 0x0d, 0xbd, 0xab, 0xc5, 0xa2, 0x7d, 0x5c, 0x75, 0x36,
	0xcc, 0x4c, 0x72, 0x2e, 0xb9, 0x90, 0xd2, 0xfd, 0x0e, 0x42, 0xa0, 0xf3, 0xa5, 0x51, 0xa1, 0x99,
	0x8e, 0xb9, 0xe4, 0x42, 0xaf, 0xce, 0x7f, 0x93, 0x3b, 0x90, 0x7e, 0xb3, 0xfb, 0xf6, 0x88, 0x66,
	0x52, 0x73, 0xc9, 0x85, 0xc1, 0x7b, 0xe3, 0xcb, 0x92, 0x87, 0x71, 0x64, 0x2d, 0x0b, 0x6c, 0x36,
	0xaa, 0x0b, 0x22, 0xed, 0x16, 0x0c, 0x2b, 0x3c, 0xeb, 0x47, 0x76, 0xb5, 0x4e, 0xc9, 0x10, 0xa4,
	0xde, 0x58, 0x2e, 0x3b, 0xf6, 0x53, 0x5b, 0x86, 0xa1, 0xe7, 0xd4, 0xc1, 0xa2, 0x65, 0xa1, 0x47,
	0x74, 0x78, 0x92, 0x79, 0x6d, 0xed, 0x09, 0x0c, 0x2b, 0xf4, 0x12, 0x76, 0x09, 0x3a, 0x37, 0x1c,
	0x5a, 0xe1, 0xc4, 0x7d, 0x51, 0x82, 0x6d, 0x54, 0xf7, 0x6d, 0x9d, 0xd3, 0x68, 0x35, 0x18, 0x79,
	0x7d, 0x64, 0x1a, 0x0e, 0x6d, 0x9b, 0x67, 0xa4, 0x32, 0x3e, 0x81, 0xf4, 0x8e, 0x63, 0x38, 0xae,
	0x32, 0xc6, 0x54, 0x9e, 0x7c, 0x40, 0xe8, 0x82, 0xff, 0xd4, 0xc6, 0x61, 0x14, 0xf3, 0x14, 0x72,
	0x6b, 0x77, 0x61, 0x44, 0xa7, 0x15, 0xfb, 0xf7, 0xed, 0xcb, 0xc2, 0xa0, 0xf0, 0x14, 0x09, 0xf5,
	0x07, 0x18, 0xde, 0xb4, 0xea, 0xce, 0x79, 0x6c, 0xac, 0xb2, 0xe9, 0x08, 0x2f, 0x79, 0xdb, 0x28,
	0xd1, 0x0c, 0xcc, 0x25, 0x17, 0xd2, 0x3a, 0xff, 0xcd, 0xe8, 0xd9, 0xdf, 0x1d, 0xeb, 0x1d, 0xcd,
	0xf4, 0xf1, 0x7e, 0xaf, 0xad, 0xd5, 0x80, 0xa8, 0xec, 0xa5, 0x5d, 0xee, 0x40, 0x9a, 0xe9, 0xbc,
	0x9e, 0x49, 0xce, 0xa5, 0x9a, 0x18, 0x46, 0x10, 0x31, 0xfc, 0x5d, 0xdb, 0x31, 0xca, 0x2f, 0x8f,
	0x2b, 0x92, 0xaf, 0xd7, 0xf6, 0xe4, 0xe9, 0xf3, 0xe5, 0xd1, 0x9e, 0xc1, 0x08, 0xe3, 0xb9, 0x66,
	0x5b, 0x55, 0x0e, 0x23, 0x17, 0x7d, 0x7e, 0xd1, 0x47, 0x31, 0x8c, 0xb7, 0xa9, 0x90, 0xf0, 0xa3,
	0xaa, 0xf0, 0x1e, 0xf1, 0x05, 0x45, 0xcf, 0xc3, 0xa8, 0x77, 0x38, 0x18, 0x96, 0x2b, 0x7b, 0xcb,
	0x8d, 0xcc, 0x89, 0xc5, 0x46, 0xbe, 0x0d, 0x63, 0x01, 0x0c, 0x29, 0xf8, 0x20, 0x74, 0x78, 0xe6,
	0xee, 0xd8, 0x30, 0xb5, 0x45, 0x98, 0x50, 0xb7, 0x8c, 0xca, 0x2f, 0x48, 0x9a, 0x85, 0x4c, 0x98,
	0x54, 0xee, 0xb0, 0x2d, 0x18, 0xf3, 0x4d, 0xac, 0x82, 0x0c, 0x41, 0x6a, 0xd5, 0x3f, 0xd4, 0xab,
	0x96, 0xe9, 0x1e, 0xf3, 0x0e, 0xef, 0x98, 0xb3, 0x9e, 0x35, 0xcb, 0xe4, 0x87, 0x25, 0xa5, 0xb3,
	0x9f, 0xda, 0x3a, 0x8c, 0x07, 0xe1, 0x82, 0xbb, 0x26, 0x15, 0xb7, 0x6b, 0x38, 0xb9, 0x20, 0xd2,
	0xfe, 0x08, 0x13, 0x3e, 0xce, 0x53, 0xea, 0x18, 0x56, 0xf9, 0x52, 0x82, 0x9d, 0x7b, 0xff, 0xbc,
	0x83, 0x4c, 0x58, 0x00, 0xb9, 0x94, 0x65, 0xbc, 0x87, 0x32, 0xe1, 0xa5, 0xc8, 0x09, 0x17, 0xdc,
	0x47, 0xdf, 0xc2, 0x14, 0x56, 0xe2, 0xf9, 0x15, 0x70, 0xde, 0xe5, 0xfe, 0x29, 0x09, 0xd3, 0xd1,
	0x3c, 0xe5, 0x9a, 0xef, 0xe1, 0x35, 0x4f, 0x47, 0x9b, 0xef, 0x72, 0xeb, 0x9e, 0x87, 0x51, 0xef,
	0x2b, 0xd0, 0x6c, 0x3f, 0xaf, 0xc1, 0x58, 0x80, 0xae, 0xdd, 0x2f, 0x86, 0x72, 0xd0, 0xfe, 0x9a,
	0x14, 0xce, 0x6d, 0xd5, 0x34, 0x6b, 0xb4, 0x5e, 0xbf, 0xdc, 0xee, 0xca, 0x40, 0xb7, 0xc4, 0xc9,
	0x74, 0xf2, 0xcf, 0x89, 0xdb, 0x3c, 0xb7, 0x21, 0x1c, 0xe1, 0xfe, 0x3c, 0xa9, 0xe4, 0xca, 0x3e,
	0xc5, 0xea, 0x9f, 0x50, 0x97, 0x26, 0x69, 0x2f, 0xe3, 0xb9, 0x1c, 0xae, 0xf9, 0x97, 0xf4, 0xe4,
	0x4a, 0xb4, 0x31, 0x04, 0xa9, 0xd7, 0x96, 0xc9, 0x35, 0x91, 0xd2, 0xd9, 0x4f, 0x32, 0x0a, 0xe9,
	0x4d, 0xa3, 0x40, 0xcb, 0x99, 0x34, 0xd7, 0x8e, 0x68, 0x68, 0x4f, 0xb9, 0x1d, 0x55, 0xae, 0x72,
	0xb5, 0x9f, 0x20, 0x3b, 0xc6, 0x2e, 0x56, 0x18, 0xd2, 0x04, 0xf2, 0xc2, 0x32, 0xe9, 0xf5, 0xda,
	0x51, 0x1b, 0x83, 0x11, 0xc4, 0x45, 0xba, 0xcf, 0x22, 0x0c, 0xbf, 0x30, 0xea, 0xd7, 0xcc, 0x7b,
	0x09, 0x88, 0xca, 0x44, 0x2a, 0x69, 0x14, 0xd2, 0xcf, 0x4e, 0xad, 0xba, 0xc3, 0xf9, 0xf4, 0xe8,
	0xa2, 0xa1, 0xad, 0xc2, 0xc8, 0xda, 0x01, 0x2d, 0x1e, 0x86, 0x45, 0x5a, 0xf3, 0x45, 0x0a, 0xb0,
	0xeb, 0xc0, 0xec, 0xee, 0xc0, 0x28, 0x86, 0xf0, 0x19, 0x7e, 0x65, 0x94, 0x25, 0x4a, 0x8f, 0x2e,
	0x1a, 0xda, 0x06, 0x0f, 0xdd, 0xd8, 0xc1, 0x5a, 0xa7, 0xf4, 0x72, 0x1f, 0x8f, 0x7f, 0x77, 0x00,
	0x51, 0xb1, 0x24, 0xdf, 0x0c, 0x74, 0xaf, 0x53, 0xba, 0x53, 0xb6, 0x4f, 0x38, 0x60, 0x52, 0x77,
	0x9b, 0x2c, 0x12, 0x5a, 0xa7, 0x74, 0xcb, 0x32, 0xcd, 0xb2, 0x88, 0xe3, 0x92, 0xba, 0xdf, 0x21,
	0xe7, 0xad, 0x1b, 0x75, 0x87, 0x33, 0x11, 0xf3, 0x58, 0x93, 0x1d, 0x8f, 0x4d, 0xab, 0x62, 0x39,
	0xeb, 0x94, 0x72, 0x5d, 0x27, 0x75, 0xaf, 0x4d, 0xe6, 0xa0, 0x6f, 0xbb, 0x6c, 0x38, 0xfb, 0x76,
	0xad, 0xc2, 0x86, 0xd3, 0x7c, 0x58, 0xed, 0x22, 0xb3, 0x00, 0x52, 0x80, 0x1d, 0xa7, 0xc6, 0x8f,
	0x51, 0xaf, 0xae, 0xf4, 0x10, 0x0d, 0xfa, 0x3d, 0x21, 0x18, 0x45, 0x3f, 0xa7, 0x40, 0x7d, 0x12,
	0x83, 0x09, 0xc3, 0x28, 0x06, 0x3c, 0x0c, 0xd9, 0xc3, 0xa4, 0x70, 0x25, 0x62, 0x04, 0x83, 0x9c,
	0x40, 0xed, 0x22, 0xf3, 0x30, 0xa8, 0x08, 0xc5, 0x88, 0x6e, 0x70, 0xa2, 0x40, 0xaf, 0xf6, 0xf7,
	0xb4, 0x88, 0x21, 0x99, 0x56, 0x77, 0x4f, 0x5d, 0x03, 0x8d, 0x43, 0x97, 0x4e, 0xf7, 0x7d, 0x1b,
	0xc9, 0x96, 0xec, 0xf7, 0x2d, 0x25, 0x5b, 0xb2, 0xdf, 0xb7, 0x97, 0x6c, 0x31, 0x67, 0xb2, 0x7b,
	0x2a, 0xcf, 0x7a, 0xaf, 0xce, 0x7f, 0x33, 0xd9, 0xd7, 0x6b, 0x76, 0xc5, 0xdd, 0x5d, 0xe2, 0xc8,
	0xab, 0x5d, 0xcc, 0x6e, 0xbb, 0xb6, 0x3b, 0xde, 0xc5, 0xc7, 0xfd, 0x0e, 0x86, 0xb9, 0x45, 0x2b,
	0x76, 0xa6, 0x5b, 0x60, 0xb2, 0xdf, 0x6c, 0x86, 0x14, 0x7d, 0xc3, 0xcc, 0xf4, 0x88, 0x19, 0x5e,
	0x07, 0x1b, 0xdd, 0xa8, 0x56, 0x69, 0x8d, 0x8b, 0xd2, 0x2b, 0x46, 0xbd, 0x0e, 0x2e, 0x23, 0xbb,
	0xe0, 0x00, 0x97, 0x9c, 0xff, 0x26, 0x0b, 0x70, 0x63, 0xcb, 0xaa, 0xae, 0xd9, 0xd5, 0x7d, 0xab,
	0x56, 0xa1, 0x26, 0xf3, 0x93, 0x7d, 0x7c, 0x38, 0xd8, 0xcd, 0x76, 0xfd, 0x96, 0x55, 0xdd, 0x30,
	0xb9, 0x19, 0x53, 0xba, 0x68, 0xf0, 0x5e, 0xe3, 0x74, 0xc3, 0xe4, 0xa6, 0x63, 0xbd, 0xac, 0xc1,
	0xdd, 0x1c, 0x33, 0x11, 0xb7, 0x57, 0x5a, 0x17, 0x0d, 0xb2, 0x0f, 0x83, 0x79, 0x5a, 0xb2, 0xaa,
	0xf9, 0xb2, 0x5d, 0x3c, 0xdc, 0xb5, 0x2a, 0x94, 0x5b, 0x2a, 0x95, 0xff, 0xfc, 0x7f, 0x8d, 0xdc,
	0xc3, 0x82, 0xe5, 0x14, 0x8e, 0x8b, 0x87, 0xd4, 0x59, 0xb6, 0x6b, 0xa5, 0x95, 0x82, 0x65, 0x59,
	0xa5, 0x32, 0x75, 0xff, 0xee, 0x9d, 0x18, 0x9f, 0x7d, 0x76, 0x77, 0xcf, 0x34, 0x2a, 0xf5, 0x95,
	0x7a, 0xad, 0xb8, 0x52, 0xb6, 0x0a, 0x2b, 0x8e, 0x55, 0xa1, 0xcb, 0x0c, 0x45, 0x0f, 0xa0, 0x92,
	0x02, 0xf4, 0x3f, 0xab, 0x9a, 0x3e, 0x97, 0xa1, 0x2b, 0xe1, 0x82, 0x30, 0xc9, 0x2f, 0x01, 0xf2,
	0x56, 0xb9, 0xcc, 0x2e, 0x40, 0xc7, 0xf5, 0xcc, 0x30, 0xbf, 0x25, 0x4d, 0x2e, 0xfb, 0x17, 0xdb,
	0xe5, 0xe7, 0xb4, 0xea, 0x13, 0xe8, 0x0a, 0x31, 0xfb, 0x38, 0xef, 0x58, 0x26, 0xcd, 0x90, 0xf0,
	0x3d, 0x73, 0xf7, 0x94, 0x8d, 0xf0, 0xbb, 0x15, 0xa7, 0xd1, 0x3e, 0x17, 0xdf, 0x66, 0x77, 0xcf,
	0x4a, 0x47, 0xb0, 0x80, 0x3f, 0x82, 0x24, 0x18, 0xbb, 0xef, 0x9e, 0xba, 0xe1, 0xe3, 0x3f, 0x7a,
	0x81, 0xbc, 0x3a, 0xa6, 0xb5, 0xb7, 0x78, 0xd7, 0xe7, 0xf0, 0xae, 0xcf, 0x77, 0x9f, 0x35, 0x72,
	0x29, 0xc3, 0x32, 0xbd, 0xed, 0x3f, 0x09, 0x29, 0xe7, 0xd4, 0x11, 0x0e, 0x51, 0x8c, 0x3a, 0xa7,
	0x8e, 0xce, 0xfe, 0x21, 0x1a, 0x74, 0x8b, 0xb3, 0x20, 0x22, 0xd8, 0x54, 0xbe, 0xe7, 0xac, 0x91,
	0xeb, 0x3c, 0xb1, 0xcc, 0xba, 0xee, 0x0e, 0x48, 0x9a, 0x35, 0x46, 0xd3, 0xe9, 0xd3, 0x14, 0x5d,
	0x1a, 0x36, 0x40, 0x1e, 0x41, 0x17, 0xbf, 0x3e, 0xb2, 0x83, 0x91, 0x5a, 0x18, 0xc4, 0x5f, 0xb7,
	0xdd, 0x53, 0xef, 0x96, 0x99, 0x87, 0xb3, 0x46, 0xae, 0xab, 0xce, 0x49, 0x75, 0x39, 0x85, 0x3c,
	0x80, 0x34, 0xd3, 0x0f, 0x3b, 0x34, 0xa9, 0x78, 0x25, 0xe6, 0x7b, 0xcf, 0x1a, 0xb9, 0x74, 0x9d,
	0x11, 0xea, 0x82, 0x9e, 0x7c, 0x9f, 0x0c, 0x6d, 0xc2, 0x6e, 0xae, 0x82, 0xc3, 0xb3, 0x46, 0x6e,
	0xa8, 0xc0, 0x46, 0xf6, 0x0a, 0x6c, 0x68, 0x8f, 0x59, 0xfe, 0xc7, 0x46, 0x6e, 0xac, 0x64, 0xd7,
	0x2a, 0x0f, 0x35, 0xe7, 0xed, 0x11, 0x7d, 0xc8, 0xee, 0xb8, 0xac, 0xfb, 0x91, 0x76, 0xc5, 0x3b,
	0xf6, 0x2f, 0xc9, 0xc0, 0x96, 0xed, 0xe1, 0x32, 0x59, 0x67, 0x8d, 0xdc, 0x20, 0xad, 0x9a, 0x3f,
	0x81, 0x44, 0x78, 0x77, 0x7f, 0x97, 0x84, 0x01, 0x2e, 0xe2, 0x5a, 0x8d, 0x1a, 0x0e, 0x5d, 0x75,
	0xb8, 0x33, 0x49, 0xe5, 0x7f, 0x77, 0xd6, 0xc8, 0xdd, 0x10, 0x4a, 0x2a, 0xf2, 0x91, 0x3d, 0xc3,
	0xb9, 0x2e, 0x89, 0xb0, 0x00, 0xe4, 0xcf, 0x49, 0xe8, 0x7b, 0x56, 0x35, 0x3d, 0x81, 0xb8, 0x13,
	0xcb, 0x1f, 0x9c, 0x35, 0x72, 0x03, 0x4c, 0x43, 0xd7, 0x2e, 0x8e, 0xca, 0xdc, 0xd7, 0x8f, 0xc8,
	0x7b, 0xac, 0x3a, 0xc2, 0x69, 0xaa, 0xfa, 0x39, 0xe6, 0x23, 0xd7, 0xae, 0x1f, 0x57, 0x00, 0x57,
	0x3f, 0x9e, 0x40, 0xfd, 0x58, 0x3f, 0xd7, 0x2e, 0x8e, 0xca, 0x9c, 0x4c, 0xcb, 0xd0, 0xfa, 0x1e,
	0x73, 0xff, 0xe2, 0xf0, 0x1f, 0x19, 0x25, 0x2a, 0xc3, 0xfe, 0x45, 0x25, 0xec, 0xbf, 0xcf, 0x29,
	0x06, 0xce, 0x1a, 0xb9, 0x5e, 0x46, 0xb1, 0x57, 0xb7, 0xde, 0x51, 0xe5, 0x16, 0xf0, 0x7d, 0x12,
	0x46, 0x90, 0xff, 0x92, 0x1e, 0xf0, 0x7e, 0x4b, 0x0f, 0x28, 0xce, 0xbe, 0xc5, 0x88, 0xdc, 0xcb,
	0xc0, 0xa2, 0x72, 0x19, 0xe8, 0xf0, 0xf9, 0x3a, 0xac, 0x6f, 0xaf, 0x7a, 0x5c, 0x51, 0xee, 0x06,
	0xee, 0x02, 0x52, 0x51, 0x0b, 0xd0, 0x1e, 0x03, 0x79, 0x49, 0x4f, 0xde, 0x58, 0xce, 0x81, 0x59,
	0x33, 0x4e, 0x5c, 0xa7, 0x3a, 0x8f, 0x82, 0xf5, 0x28, 0xa7, 0x2c, 0xe2, 0xf4, 0xfb, 0x30, 0x82,
	0x66, 0xcb, 0x25, 0xa1, 0x6f, 0x77, 0x32, 0xf0, 0xed, 0xd6, 0xaa, 0x90, 0x61, 0x57, 0x3d, 0x39,
	0xe9, 0x2a, 0x12, 0x01, 0x28, 0x92, 0xe8, 0x0c, 0x44, 0x12, 0xda, 0x1a, 0x4c, 0x46, 0xf0, 0x93,
	0xa2, 0xb6, 0xbb, 0xd2, 0x5f, 0xc1, 0xf8, 0x9a, 0x5d, 0x2e, 0xd3, 0xa2, 0xb3, 0x66, 0x94, 0xcb,
	0x05, 0xa3, 0x78, 0x78, 0x5e, 0x5d, 0x3d, 0x80, 0x89, 0x10, 0x42, 0x5b, 0xfa, 0xfa, 0x5b, 0x12,
	0x26, 0x36, 0x2a, 0x47, 0x76, 0xcd, 0xf9, 0xb2, 0x6c, 0x5e, 0xd3, 0x65, 0x4e, 0xb9, 0x39, 0xa4,
	0x43, 0x97, 0x5d, 0x1e, 0xb9, 0x75, 0x29, 0x91, 0x9b, 0x77, 0xf5, 0xeb, 0x56, 0xaf, 0x7e, 0x4b,
	0x90, 0x09, 0x8b, 0x19, 0x93, 0xe9, 0xda, 0x52, 0xae, 0xfb, 0xab, 0xf5, 0xba, 0x9f, 0x08, 0xbd,
	0xd8, 0x2d, 0xe3, 0x19, 0x8c, 0x07, 0xe1, 0x5a, 0x5f, 0x3b, 0x55, 0x72, 0x61, 0xa2, 0xc7, 0x6a,
	0xa6, 0xeb, 0xbc, 0x62, 0x69, 0x2f, 0xd4, 0xfc, 0x16, 0x96, 0xa2, 0xd9, 0x55, 0x5f, 0xa5, 0x97,
	0xa1, 0xce, 0x26, 0x4c, 0xae, 0x9a, 0xa6, 0xbb, 0x63, 0x77, 0xa8, 0xe3, 0x58, 0xd5, 0x92, 0x2b,
	0xca, 0x0a, 0x5a, 0xd1, 0x14, 0x82, 0x0a, 0xcc, 0x10, 0xab, 0xba, 0x03, 0xd9, 0x28, 0xb4, 0x18,
	0xcb, 0x7c, 0x09, 0xd3, 0x32, 0x03, 0x7e, 0x45, 0xec, 0x73, 0x30, 0x13, 0x03, 0x28, 0xef, 0xdb,
	0x3a, 0x4c, 0xcb, 0x54, 0x66, 0x34, 0xc7, 0x80, 0x84, 0xae, 0x2d, 0x3a, 0x42, 0xb6, 0x48, 0xf9,
	0xb6, 0xc8, 0xc1, 0x4c, 0x0c, 0xa6, 0x64, 0xfa, 0x04, 0x39, 0x85, 0x00, 0xc7, 0x76, 0xac, 0xbd,
	0x05, 0xd9, 0x28, 0x00, 0xa9, 0xd5, 0x73, 0x6b, 0x69, 0x13, 0x26, 0x14, 0x23, 0xbd, 0x3a, 0xb6,
	0x1d, 0xc3, 0x95, 0xe6, 0x2e, 0xc2, 0x9a, 0x09, 0x3a, 0x18, 0x3c, 0x47, 0xa0, 0x2d, 0x41, 0x26,
	0x8c, 0x16, 0x63, 0xf0, 0x02, 0x64, 0xb1, 0xaa, 0x10, 0xf3, 0x0b, 0x28, 0xdf, 0x3d, 0x9f, 0x9d,
	0xfe, 0xf9, 0x9c, 0x81, 0xa9, 0x48, 0x1e, 0xd2, 0x18, 0xdb, 0x32, 0x31, 0x1b, 0x25, 0xc0, 0xc5,
	0x1c, 0xc2, 0x36, 0x4c, 0x46, 0x20, 0x46, 0x7f, 0x71, 0x5b, 0x68, 0x54, 0x9e, 0xc9, 0x5d, 0x98,
	0x52, 0x54, 0xfa, 0xe6, 0xc0, 0x72, 0x68, 0xd9, 0xaa, 0x7b, 0x0e, 0xe2, 0xe7, 0xc8, 0x48, 0x37,
	0xe3, 0x20, 0xfd, 0x79, 0xc2, 0x50, 0xcb, 0x30, 0x1d, 0x8d, 0x1a, 0x63, 0xac, 0x7d, 0x98, 0xc5,
	0x8a, 0x0c, 0x09, 0x72, 0x35, 0x06, 0xbb, 0x09, 0xb9, 0x58, 0x3e, 0xd2, 0x68, 0xbb, 0x32, 0xbb,
	0x1c, 0x27, 0xc8, 0xc5, 0x0c, 0xf7, 0x1b, 0x98, 0x89, 0x41, 0x95, 0x1a, 0x79, 0x80, 0x8d, 0xd7,
	0x86, 0xa6, 0x3d, 0x03, 0xaa, 0x67, 0x62, 0xdb, 0x2e, 0x5b, 0xc5, 0xb7, 0xae, 0xac, 0xbf, 0x40,
	0xd6, 0xcb, 0x46, 0x1d, 0x57, 0x31, 0x41, 0xc4, 0x4f, 0x2c, 0x14, 0x93, 0x06, 0x9c, 0x42, 0xae,
	0xda, 0x45, 0x95, 0x2a, 0xfa, 0x31, 0x09, 0x53, 0xd8, 0xf7, 0x61, 0xb6, 0x79, 0xfe, 0xd5, 0x6d,
	0x93, 0x73, 0xff, 0x59, 0x23, 0xd7, 0x63, 0x98, 0xe6, 0x1e, 0xe7, 0xee, 0x4e, 0x64, 0x18, 0x4f,
	0x69, 0x99, 0x63, 0x74, 0xb4, 0x87, 0x61, 0xd2, 0xb2, 0xc4, 0x90, 0x13, 0xc9, 0x17, 0x00, 0x42,
	0x4c, 0x0e, 0x93, 0x6a, 0x09, 0x73, 0xe3, 0xac, 0x91, 0xeb, 0x93, 0x61, 0x38, 0x47, 0x52, 0xa6,
	0x6b, 0xb3, 0xc1, 0x0f, 0x48, 0x40, 0x29, 0xaf, 0xf0, 0xd1, 0xc4, 0x1a, 0xb9, 0xd8, 0xa6, 0xd9,
	0x84, 0x6c, 0x14, 0xa4, 0x57, 0xda, 0x69, 0xd3, 0xb8, 0xd2, 0xa4, 0xdb, 0x28, 0x3e, 0xbd, 0x0a,
	0xf9, 0xbe, 0x40, 0x1f, 0x9b, 0x4b, 0x8a, 0xf7, 0x98, 0x97, 0xeb, 0xb7, 0x68, 0xbd, 0xce, 0xa2,
	0x78, 0x29, 0xd7, 0x6d, 0x04, 0x32, 0xa2, 0x82, 0xb8, 0x94, 0x62, 0xf6, 0xc7, 0x40, 0xd4, 0xd9,
	0x31, 0x6e, 0xe6, 0x89, 0x5b, 0x06, 0xbf, 0x28, 0x9b, 0x09, 0x18, 0x0b, 0x00, 0x48, 0xeb, 0xbf,
	0x13, 0x59, 0xa0, 0x00, 0xee, 0x4f, 0x53, 0xff, 0x3b, 0x12, 0x75, 0x98, 0xe0, 0xe2, 0x17, 0xb1,
	0x47, 0x89, 0x5c, 0xd5, 0xc5, 0x6a, 0x30, 0x4b, 0x5f, 0xc3, 0x00, 0x4a, 0x9e, 0x91, 0x49, 0x16,
	0xf7, 0x2a, 0x1d, 0x7b, 0xaf, 0xab, 0x87, 0x55, 0xfb, 0xa4, 0x3a, 0x94, 0x20, 0x63, 0x30, 0x8c,
	0x87, 0x9e, 0xd3, 0xea, 0x50, 0x92, 0x4c, 0xc0, 0x48, 0x70, 0x06, 0x1b, 0xe8, 0xb8, 0xf7, 0xcf,
	0x59, 0xe8, 0x12, 0xb1, 0x23, 0xf9, 0x35, 0xf4, 0x7a, 0x05, 0x66, 0x32, 0xad, 0xa6, 0xee, 0x82,
	0x8f, 0x49, 0xb2, 0x33, 0x31, 0xa3, 0xd2, 0x3c, 0x09, 0x86, 0xe5, 0x85, 0xd2, 0x18, 0x2b, 0xf8,
	0xfa, 0x03, 0x63, 0x85, 0xde, 0x7a, 0x68, 0x09, 0xb2, 0x03, 0xfd, 0xea, 0x6b, 0x0a, 0x92, 0x53,
	0x27, 0x44, 0xbc, 0xed, 0xc8, 0xce, 0xc5, 0x13, 0xa8, 0xa0, 0x6a, 0xe5, 0x1b, 0x83, 0x46, 0x3c,
	0xd2, 0xc0, 0xa0, 0x91, 0x4f, 0x32, 0x12, 0x64, 0x0b, 0xc0, 0x8f, 0xdd, 0x09, 0x5a, 0x58, 0xe8,
	0xb1, 0x46, 0x76, 0x36, 0x6e, 0x58, 0x95, 0x51, 0x7d, 0xa9, 0x80, 0x65, 0x8c, 0x78, 0x0a, 0x81,
	0x65, 0x8c, 0x7a, 0xe4, 0xa0, 0x25, 0xc8, 0x57, 0x30, 0x80, 0x9e, 0x11, 0x90, 0xb9, 0x48, 0x5b,
	0x2a, 0x55, 0xd6, 0xec, 0xcd, 0x26, 0x14, 0x1e, 0xee, 0x1e, 0x0c, 0x05, 0x9f, 0x12, 0x90, 0x8f,
	0xe2, 0x74, 0xa6, 0xa2, 0x7f, 0xdc, 0x9c, 0xc8, 0x63, 0xf0, 0x5b, 0x18, 0xc4, 0x75, 0x68, 0x72,
	0x33, 0x5a, 0x83, 0x2a, 0xb8, 0xd6, 0x8c, 0x44, 0xd5, 0x09, 0x2a, 0x1b, 0x63, 0x9d, 0x44, 0x55,
	0x9e, 0xb1, 0x4e, 0x22, 0x6b, 0xce, 0x42, 0x27, 0xc1, 0xa7, 0x02, 0x58, 0x27, 0x31, 0x2f, 0x19,
	0xb0, 0x4e, 0xe2, 0x5e, 0x1b, 0x68, 0x09, 0x72, 0x28, 0xde, 0xb2, 0x04, 0xcb, 0xec, 0xe4, 0x76,
	0xfc, 0xb2, 0x31, 0xa3, 0x85, 0xd6, 0x84, 0x01, 0x2d, 0xf9, 0x45, 0xd9, 0x90, 0x96, 0x42, 0x55,
	0xe2, 0x90, 0x96, 0xc2, 0x15, 0x5d, 0x2d, 0x41, 0xb6, 0xa1, 0x4f, 0x29, 0xa0, 0x12, 0x74, 0x2e,
	0xc2, 0xf5, 0xdb, 0x6c, 0x2e, 0x76, 0x5c, 0x45, 0x54, 0x4a, 0xe5, 0x24, 0x74, 0xd2, 0x9a, 0x21,
	0x46, 0xd4, 0xd8, 0xc5, 0xc9, 0xf6, 0x0b, 0xad, 0xf8, 0x64, 0x87, 0xaa, 0xbc, 0xf8, 0x64, 0x87,
	0xeb, 0xb3, 0xe2, 0x64, 0xab, 0x85, 0x54, 0x7c, 0xb2, 0x23, 0xaa, 0xb4, 0xf8, 0x64, 0x47, 0xd5,
	0x60, 0x85, 0x8c, 0x7e, 0x8d, 0x94, 0x04, 0xdd, 0x2a, 0xae, 0xc3, 0x62, 0x19, 0xc3, 0xa5, 0x55,
	0xdf, 0x99, 0x89, 0xec, 0x53, 0xd8, 0x99, 0xa1, 0xfa, 0x49, 0xd8, 0x99, 0xe1, 0xf4, 0xa4, 0xb0,
	0x89, 0x92, 0xb7, 0xc4, 0x36, 0x09, 0x17, 0x64, 0xb0, 0x4d, 0x22, 0x12, 0x9e, 0x02, 0x51, 0x49,
	0x1b, 0x62, 0xc4, 0x70, 0x36, 0x12, 0x23, 0x46, 0xe4, 0x1b, 0xb5, 0x04, 0x29, 0x88, 0xc7, 0x86,
	0x28, 0xc7, 0x47, 0x3e, 0x0e, 0x9e, 0xf4, 0xa8, 0x94, 0x63, 0xf6, 0x56, 0x0b, 0x2a, 0x8f, 0xc7,
	0x37, 0x70, 0x23, 0x90, 0xc0, 0x23, 0xc8, 0x49, 0x45, 0xe7, 0x07, 0xb3, 0x1f, 0x35, 0xa5, 0x51,
	0x3d, 0x4e, 0x30, 0x7b, 0x86, 0x3d, 0x4e, 0x4c, 0x0a, 0x10, 0x7b, 0x9c, 0xb8, 0x04, 0x9c, 0xf0,
	0xc2, 0x38, 0x47, 0x46, 0xa2, 0x3d, 0xa1, 0x9a, 0xf7, 0xc2, 0x5e, 0x38, 0x3a, 0xc5, 0x26, 0x34,
	0x13, 0xc8, 0x7c, 0x91, 0x18, 0xf7, 0x8d, 0xc0, 0x3f, 0x6a, 0x4a, 0xe3, 0xa1, 0x53, 0x1e, 0xb2,
	0x06, 0xd2, 0x26, 0xe4, 0x56, 0xf0, 0xd3, 0x16, 0x99, 0xca, 0xc9, 0xce, 0xb7, 0x22, 0xf3, 0xd8,
	0x54, 0xdd, 0x90, 0x35, 0xc8, 0x69, 0x21, 0x22, 0x28, 0x89, 0x66, 0xb6, 0xd8, 0x06, 0xa5, 0xca,
	0x2f, 0x32, 0x45, 0x85, 0xf9, 0x35, 0xcb, 0x8c, 0x61, 0x7e, 0xcd, 0xf3, 0x5d, 0x5c, 0x8d, 0xe1,
	0x84, 0x15, 0x89, 0xdb, 0xfd, 0xcd, 0xd4, 0x18, 0x9f, 0xf7, 0x12, 0xfb, 0x38, 0x98, 0x7a, 0xc2,
	0xfb, 0x38, 0x26, 0xcd, 0x85, 0xf7, 0x71, 0x5c, 0xf6, 0x4a, 0x4b, 0x90, 0x03, 0xef, 0x29, 0x2e,
	0xe2, 0x31, 0x1f, 0xaf, 0x0b, 0xc4, 0xe6, 0x76, 0x4b, 0x3a, 0xd5, 0xa9, 0x84, 0x92, 0x48, 0x24,
	0xfc, 0x81, 0x8f, 0xe2, 0x72, 0xab, 0x05, 0x95, 0x1a, 0x07, 0x44, 0x25, 0x80, 0x70, 0x1c, 0xd0,
	0x24, 0xf1, 0x84, 0xe3, 0x80, 0x66, 0xb9, 0x24, 0x2d, 0x41, 0x1c, 0xef, 0x7d, 0x69, 0x88, 0xdf,
	0x52, 0xbc, 0x5a, 0x42, 0x2c, 0x3f, 0x69, 0x8b, 0x56, 0xdd, 0xe8, 0x91, 0x29, 0x1d, 0xb2, 0x10,
	0xa7, 0xa4, 0x10, 0xc7, 0xc5, 0x36, 0x28, 0x55, 0x95, 0x46, 0x25, 0x20, 0xb0, 0x4a, 0x9b, 0xa4,
	0x65, 0xb2, 0x0b, 0xad, 0x09, 0xd5, 0x53, 0x15, 0x4e, 0x3d, 0x90, 0x58, 0xf3, 0x63, 0x46, 0xf3,
	0xad, 0xc8, 0x62, 0xbe, 0x6f, 0x92, 0x4b, 0xdc, 0xf7, 0x0d, 0x33, 0xb9, 0xd5, 0x82, 0x4a, 0x0d,
	0x1b, 0xfc, 0xd4, 0x00, 0x09, 0x5e, 0x14, 0xf1, 0x8d, 0x1d, 0x87, 0x0d, 0xe1, 0x8c, 0x82, 0x08,
	0x3a, 0x51, 0x0a, 0x80, 0x44, 0x5c, 0xee, 0x02, 0xa0, 0x37, 0x9b, 0x50, 0x04, 0x43, 0x44, 0x17,
	0x35, 0x14, 0xbf, 0x04, 0x30, 0x73, 0xb1, 0xe3, 0x2e, 0x62, 0xfe, 0x9b, 0x7f, 0xbd, 0x9f, 0x4d,
	0xfe, 0xf0, 0x7e, 0x36, 0xf9, 0xdf, 0xf7, 0xb3, 0xc9, 0xef, 0x3e, 0xcc, 0x26, 0x7e, 0xf8, 0x30,
	0x9b, 0xf8, 0xcf, 0x87, 0xd9, 0xc4, 0xd7, 0xf9, 0xd6, 0x55, 0xe4, 0x9f, 0xed, 0xf1, 0xff, 0xb9,
	0x51, 0xb4, 0x4d, 0xba, 0x22, 0x38, 0x7d, 0x5a, 0xb2, 0x4b, 0xf6, 0xa3, 0xa3, 0x82, 0x68, 0x15,
	0xba, 0xf8, 0xf8, 0xfd, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x3a, 0xec, 0x1e, 0x39, 0x32,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletClient interface {
	//新增钱包
	AddWallet(ctx context.Context, in *AddWalletRequest, opts ...grpc.CallOption) (*AddWalletResponse, error)
	// 根据钱包ID获取钱包信息。
	GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*GetWalletResponse, error)
	//更新钱包
	UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*UpdateWalletResponse, error)
	//移除钱包
	RemoveWallet(ctx context.Context, in *RemoveWalletRequest, opts ...grpc.CallOption) (*RemoveWalletResponse, error)
	//获取钱包信息
	ListWallet(ctx context.Context, in *ListWalletRequest, opts ...grpc.CallOption) (*ListWalletResponse, error)
	//获取支持的钱包
	ListCoinInfo(ctx context.Context, in *ListCoinInfoRequest, opts ...grpc.CallOption) (*ListCoinInfoResponse, error)
	//添加coin钱包
	AddWalletCoin(ctx context.Context, in *AddWalletCoinRequest, opts ...grpc.CallOption) (*AddWalletCoinResponse, error)
	//删除Coin钱包
	RemoveWalletCoin(ctx context.Context, in *RemoveWalletCoinRequest, opts ...grpc.CallOption) (*RemoveWalletCoinResponse, error)
	ListWalletCoin(ctx context.Context, in *ListWalletCoinRequest, opts ...grpc.CallOption) (*ListWalletCoinResponse, error)
	// 根据ID获取WalletCoin信息。
	GetWalletCoin(ctx context.Context, in *GetWalletCoinRequest, opts ...grpc.CallOption) (*GetWalletCoinResponse, error)
	//获取钱包的详情，包括添加的币种、资产情况等
	ListWalletDetail(ctx context.Context, in *ListWalletDetailRequest, opts ...grpc.CallOption) (*ListWalletDetailResponse, error)
	//获取钱包coin及资产列表
	ListWalletCoinDetail(ctx context.Context, in *ListWalletCoinDetailRequest, opts ...grpc.CallOption) (*ListWalletCoinDetailResponse, error)
	//增加新地址并加入扫块监控
	GetNewAddress(ctx context.Context, in *GetNewAddressRequest, opts ...grpc.CallOption) (*GetNewAddressResponse, error)
	//隐藏地址
	HideAddress(ctx context.Context, in *HideAddressRequest, opts ...grpc.CallOption) (*HideAddressResponse, error)
	//获取指定钱包coin的所有地址
	ListAddress(ctx context.Context, in *ListAddressRequest, opts ...grpc.CallOption) (*ListAddressResponse, error)
	//验证地址归属 即地址存在否
	HasAddress(ctx context.Context, in *HasAddressRequest, opts ...grpc.CallOption) (*HasAddressResponse, error)
	//验证地址合法性
	CheckAddress(ctx context.Context, in *CheckAddressRequest, opts ...grpc.CallOption) (*CheckAddressResponse, error)
	//获取coin当前的最佳手续费率
	GetCoinFee(ctx context.Context, in *GetCoinFeeRequest, opts ...grpc.CallOption) (*GetCoinFeeResponse, error)
	//获取CoinTx列表
	ListCoinTx(ctx context.Context, in *ListCoinTxRequest, opts ...grpc.CallOption) (*ListCoinTxResponse, error)
	//查询CoinTx
	QueryCoinTx(ctx context.Context, in *QueryCoinTxRequest, opts ...grpc.CallOption) (*QueryCoinTxResponse, error)
	//申请提现
	NewWithdraw(ctx context.Context, in *NewWithdrawRequest, opts ...grpc.CallOption) (*NewWithdrawResponse, error)
	//获取交易详细信息
	GetWithdrawDetail(ctx context.Context, in *GetWithdrawDetailRequest, opts ...grpc.CallOption) (*GetWithdrawDetailResponse, error)
	//外部做归集时，提现完成回调通知
	CollectCallback(ctx context.Context, in *CollectCallbackRequest, opts ...grpc.CallOption) (*CollectCallbackResponse, error)
	//导入老地址
	ImportOldAddress(ctx context.Context, in *ImportOldAddressRequest, opts ...grpc.CallOption) (*ImportOldAddressResponse, error)
	//获取指定coin钱包信息及余额
	GetWalletAsset(ctx context.Context, in *GetWalletAssetRequest, opts ...grpc.CallOption) (*GetWalletAssetResponse, error)
	//获取账户指定钱包所有coin的信息及余额
	ListWalletAsset(ctx context.Context, in *ListWalletAssetRequest, opts ...grpc.CallOption) (*ListWalletAssetResponse, error)
	//提现策略设置
	AddWithdrawSetting(ctx context.Context, in *AddWithdrawSettingRequest, opts ...grpc.CallOption) (*AddWithdrawSettingResponse, error)
	UpdateWithdrawSetting(ctx context.Context, in *UpdateWithdrawSettingRequest, opts ...grpc.CallOption) (*UpdateWithdrawSettingResponse, error)
	RemoveWithdrawSetting(ctx context.Context, in *RemoveWithdrawSettingRequest, opts ...grpc.CallOption) (*RemoveWithdrawSettingResponse, error)
	GetWithdrawSetting(ctx context.Context, in *GetWithdrawSettingRequest, opts ...grpc.CallOption) (*GetWithdrawSettingResponse, error)
	//提现限额
	AddWithdrawQuota(ctx context.Context, in *AddWithdrawQuotaRequest, opts ...grpc.CallOption) (*AddWithdrawQuotaResponse, error)
	RemoveWithdrawQuota(ctx context.Context, in *RemoveWithdrawQuotaRequest, opts ...grpc.CallOption) (*RemoveWithdrawQuotaResponse, error)
	ListWithdrawQuota(ctx context.Context, in *ListWithdrawQuotaRequest, opts ...grpc.CallOption) (*ListWithdrawQuotaResponse, error)
	//提现白名单
	AddWithdrawWhitelist(ctx context.Context, in *AddWithdrawWhitelistRequest, opts ...grpc.CallOption) (*AddWithdrawWhitelistResponse, error)
	RemoveWithdrawWhitelist(ctx context.Context, in *RemoveWithdrawWhitelistRequest, opts ...grpc.CallOption) (*RemoveWithdrawWhitelistResponse, error)
	ListWithdrawWhitelist(ctx context.Context, in *ListWithdrawWhitelistRequest, opts ...grpc.CallOption) (*ListWithdrawWhitelistResponse, error)
	UpdateWithdrawPolicy(ctx context.Context, in *UpdateWithdrawPolicyRequest, opts ...grpc.CallOption) (*UpdateWithdrawPolicyResponse, error)
	ListWithdrawPolicy(ctx context.Context, in *ListWithdrawPolicyRequest, opts ...grpc.CallOption) (*ListWithdrawPolicyResponse, error)
	GetWithdrawPolicy(ctx context.Context, in *GetWithdrawPolicyRequest, opts ...grpc.CallOption) (*GetWithdrawPolicyResponse, error)
	//推送历史记录
	AddMessage(ctx context.Context, in *AddMessageRequest, opts ...grpc.CallOption) (*AddMessageResponse, error)
	UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error)
	ListMessage(ctx context.Context, in *ListMessageRequest, opts ...grpc.CallOption) (*ListMessageResponse, error)
}

type walletClient struct {
	cc *grpc.ClientConn
}

func NewWalletClient(cc *grpc.ClientConn) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) AddWallet(ctx context.Context, in *AddWalletRequest, opts ...grpc.CallOption) (*AddWalletResponse, error) {
	out := new(AddWalletResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/AddWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*GetWalletResponse, error) {
	out := new(GetWalletResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/GetWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*UpdateWalletResponse, error) {
	out := new(UpdateWalletResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/UpdateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) RemoveWallet(ctx context.Context, in *RemoveWalletRequest, opts ...grpc.CallOption) (*RemoveWalletResponse, error) {
	out := new(RemoveWalletResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/RemoveWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListWallet(ctx context.Context, in *ListWalletRequest, opts ...grpc.CallOption) (*ListWalletResponse, error) {
	out := new(ListWalletResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/ListWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListCoinInfo(ctx context.Context, in *ListCoinInfoRequest, opts ...grpc.CallOption) (*ListCoinInfoResponse, error) {
	out := new(ListCoinInfoResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/ListCoinInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AddWalletCoin(ctx context.Context, in *AddWalletCoinRequest, opts ...grpc.CallOption) (*AddWalletCoinResponse, error) {
	out := new(AddWalletCoinResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/AddWalletCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) RemoveWalletCoin(ctx context.Context, in *RemoveWalletCoinRequest, opts ...grpc.CallOption) (*RemoveWalletCoinResponse, error) {
	out := new(RemoveWalletCoinResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/RemoveWalletCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListWalletCoin(ctx context.Context, in *ListWalletCoinRequest, opts ...grpc.CallOption) (*ListWalletCoinResponse, error) {
	out := new(ListWalletCoinResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/ListWalletCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetWalletCoin(ctx context.Context, in *GetWalletCoinRequest, opts ...grpc.CallOption) (*GetWalletCoinResponse, error) {
	out := new(GetWalletCoinResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/GetWalletCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListWalletDetail(ctx context.Context, in *ListWalletDetailRequest, opts ...grpc.CallOption) (*ListWalletDetailResponse, error) {
	out := new(ListWalletDetailResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/ListWalletDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListWalletCoinDetail(ctx context.Context, in *ListWalletCoinDetailRequest, opts ...grpc.CallOption) (*ListWalletCoinDetailResponse, error) {
	out := new(ListWalletCoinDetailResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/ListWalletCoinDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNewAddress(ctx context.Context, in *GetNewAddressRequest, opts ...grpc.CallOption) (*GetNewAddressResponse, error) {
	out := new(GetNewAddressResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/GetNewAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) HideAddress(ctx context.Context, in *HideAddressRequest, opts ...grpc.CallOption) (*HideAddressResponse, error) {
	out := new(HideAddressResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/HideAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListAddress(ctx context.Context, in *ListAddressRequest, opts ...grpc.CallOption) (*ListAddressResponse, error) {
	out := new(ListAddressResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/ListAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) HasAddress(ctx context.Context, in *HasAddressRequest, opts ...grpc.CallOption) (*HasAddressResponse, error) {
	out := new(HasAddressResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/HasAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CheckAddress(ctx context.Context, in *CheckAddressRequest, opts ...grpc.CallOption) (*CheckAddressResponse, error) {
	out := new(CheckAddressResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/CheckAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetCoinFee(ctx context.Context, in *GetCoinFeeRequest, opts ...grpc.CallOption) (*GetCoinFeeResponse, error) {
	out := new(GetCoinFeeResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/GetCoinFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListCoinTx(ctx context.Context, in *ListCoinTxRequest, opts ...grpc.CallOption) (*ListCoinTxResponse, error) {
	out := new(ListCoinTxResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/ListCoinTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) QueryCoinTx(ctx context.Context, in *QueryCoinTxRequest, opts ...grpc.CallOption) (*QueryCoinTxResponse, error) {
	out := new(QueryCoinTxResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/QueryCoinTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) NewWithdraw(ctx context.Context, in *NewWithdrawRequest, opts ...grpc.CallOption) (*NewWithdrawResponse, error) {
	out := new(NewWithdrawResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/NewWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetWithdrawDetail(ctx context.Context, in *GetWithdrawDetailRequest, opts ...grpc.CallOption) (*GetWithdrawDetailResponse, error) {
	out := new(GetWithdrawDetailResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/GetWithdrawDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CollectCallback(ctx context.Context, in *CollectCallbackRequest, opts ...grpc.CallOption) (*CollectCallbackResponse, error) {
	out := new(CollectCallbackResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/CollectCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ImportOldAddress(ctx context.Context, in *ImportOldAddressRequest, opts ...grpc.CallOption) (*ImportOldAddressResponse, error) {
	out := new(ImportOldAddressResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/ImportOldAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetWalletAsset(ctx context.Context, in *GetWalletAssetRequest, opts ...grpc.CallOption) (*GetWalletAssetResponse, error) {
	out := new(GetWalletAssetResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/GetWalletAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListWalletAsset(ctx context.Context, in *ListWalletAssetRequest, opts ...grpc.CallOption) (*ListWalletAssetResponse, error) {
	out := new(ListWalletAssetResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/ListWalletAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AddWithdrawSetting(ctx context.Context, in *AddWithdrawSettingRequest, opts ...grpc.CallOption) (*AddWithdrawSettingResponse, error) {
	out := new(AddWithdrawSettingResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/AddWithdrawSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateWithdrawSetting(ctx context.Context, in *UpdateWithdrawSettingRequest, opts ...grpc.CallOption) (*UpdateWithdrawSettingResponse, error) {
	out := new(UpdateWithdrawSettingResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/UpdateWithdrawSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) RemoveWithdrawSetting(ctx context.Context, in *RemoveWithdrawSettingRequest, opts ...grpc.CallOption) (*RemoveWithdrawSettingResponse, error) {
	out := new(RemoveWithdrawSettingResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/RemoveWithdrawSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetWithdrawSetting(ctx context.Context, in *GetWithdrawSettingRequest, opts ...grpc.CallOption) (*GetWithdrawSettingResponse, error) {
	out := new(GetWithdrawSettingResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/GetWithdrawSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AddWithdrawQuota(ctx context.Context, in *AddWithdrawQuotaRequest, opts ...grpc.CallOption) (*AddWithdrawQuotaResponse, error) {
	out := new(AddWithdrawQuotaResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/AddWithdrawQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) RemoveWithdrawQuota(ctx context.Context, in *RemoveWithdrawQuotaRequest, opts ...grpc.CallOption) (*RemoveWithdrawQuotaResponse, error) {
	out := new(RemoveWithdrawQuotaResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/RemoveWithdrawQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListWithdrawQuota(ctx context.Context, in *ListWithdrawQuotaRequest, opts ...grpc.CallOption) (*ListWithdrawQuotaResponse, error) {
	out := new(ListWithdrawQuotaResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/ListWithdrawQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AddWithdrawWhitelist(ctx context.Context, in *AddWithdrawWhitelistRequest, opts ...grpc.CallOption) (*AddWithdrawWhitelistResponse, error) {
	out := new(AddWithdrawWhitelistResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/AddWithdrawWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) RemoveWithdrawWhitelist(ctx context.Context, in *RemoveWithdrawWhitelistRequest, opts ...grpc.CallOption) (*RemoveWithdrawWhitelistResponse, error) {
	out := new(RemoveWithdrawWhitelistResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/RemoveWithdrawWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListWithdrawWhitelist(ctx context.Context, in *ListWithdrawWhitelistRequest, opts ...grpc.CallOption) (*ListWithdrawWhitelistResponse, error) {
	out := new(ListWithdrawWhitelistResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/ListWithdrawWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateWithdrawPolicy(ctx context.Context, in *UpdateWithdrawPolicyRequest, opts ...grpc.CallOption) (*UpdateWithdrawPolicyResponse, error) {
	out := new(UpdateWithdrawPolicyResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/UpdateWithdrawPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListWithdrawPolicy(ctx context.Context, in *ListWithdrawPolicyRequest, opts ...grpc.CallOption) (*ListWithdrawPolicyResponse, error) {
	out := new(ListWithdrawPolicyResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/ListWithdrawPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetWithdrawPolicy(ctx context.Context, in *GetWithdrawPolicyRequest, opts ...grpc.CallOption) (*GetWithdrawPolicyResponse, error) {
	out := new(GetWithdrawPolicyResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/GetWithdrawPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AddMessage(ctx context.Context, in *AddMessageRequest, opts ...grpc.CallOption) (*AddMessageResponse, error) {
	out := new(AddMessageResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/AddMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error) {
	out := new(UpdateMessageResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/UpdateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListMessage(ctx context.Context, in *ListMessageRequest, opts ...grpc.CallOption) (*ListMessageResponse, error) {
	out := new(ListMessageResponse)
	err := c.cc.Invoke(ctx, "/wallet.api.Wallet/ListMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
type WalletServer interface {
	//新增钱包
	AddWallet(context.Context, *AddWalletRequest) (*AddWalletResponse, error)
	// 根据钱包ID获取钱包信息。
	GetWallet(context.Context, *GetWalletRequest) (*GetWalletResponse, error)
	//更新钱包
	UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletResponse, error)
	//移除钱包
	RemoveWallet(context.Context, *RemoveWalletRequest) (*RemoveWalletResponse, error)
	//获取钱包信息
	ListWallet(context.Context, *ListWalletRequest) (*ListWalletResponse, error)
	//获取支持的钱包
	ListCoinInfo(context.Context, *ListCoinInfoRequest) (*ListCoinInfoResponse, error)
	//添加coin钱包
	AddWalletCoin(context.Context, *AddWalletCoinRequest) (*AddWalletCoinResponse, error)
	//删除Coin钱包
	RemoveWalletCoin(context.Context, *RemoveWalletCoinRequest) (*RemoveWalletCoinResponse, error)
	ListWalletCoin(context.Context, *ListWalletCoinRequest) (*ListWalletCoinResponse, error)
	// 根据ID获取WalletCoin信息。
	GetWalletCoin(context.Context, *GetWalletCoinRequest) (*GetWalletCoinResponse, error)
	//获取钱包的详情，包括添加的币种、资产情况等
	ListWalletDetail(context.Context, *ListWalletDetailRequest) (*ListWalletDetailResponse, error)
	//获取钱包coin及资产列表
	ListWalletCoinDetail(context.Context, *ListWalletCoinDetailRequest) (*ListWalletCoinDetailResponse, error)
	//增加新地址并加入扫块监控
	GetNewAddress(context.Context, *GetNewAddressRequest) (*GetNewAddressResponse, error)
	//隐藏地址
	HideAddress(context.Context, *HideAddressRequest) (*HideAddressResponse, error)
	//获取指定钱包coin的所有地址
	ListAddress(context.Context, *ListAddressRequest) (*ListAddressResponse, error)
	//验证地址归属 即地址存在否
	HasAddress(context.Context, *HasAddressRequest) (*HasAddressResponse, error)
	//验证地址合法性
	CheckAddress(context.Context, *CheckAddressRequest) (*CheckAddressResponse, error)
	//获取coin当前的最佳手续费率
	GetCoinFee(context.Context, *GetCoinFeeRequest) (*GetCoinFeeResponse, error)
	//获取CoinTx列表
	ListCoinTx(context.Context, *ListCoinTxRequest) (*ListCoinTxResponse, error)
	//查询CoinTx
	QueryCoinTx(context.Context, *QueryCoinTxRequest) (*QueryCoinTxResponse, error)
	//申请提现
	NewWithdraw(context.Context, *NewWithdrawRequest) (*NewWithdrawResponse, error)
	//获取交易详细信息
	GetWithdrawDetail(context.Context, *GetWithdrawDetailRequest) (*GetWithdrawDetailResponse, error)
	//外部做归集时，提现完成回调通知
	CollectCallback(context.Context, *CollectCallbackRequest) (*CollectCallbackResponse, error)
	//导入老地址
	ImportOldAddress(context.Context, *ImportOldAddressRequest) (*ImportOldAddressResponse, error)
	//获取指定coin钱包信息及余额
	GetWalletAsset(context.Context, *GetWalletAssetRequest) (*GetWalletAssetResponse, error)
	//获取账户指定钱包所有coin的信息及余额
	ListWalletAsset(context.Context, *ListWalletAssetRequest) (*ListWalletAssetResponse, error)
	//提现策略设置
	AddWithdrawSetting(context.Context, *AddWithdrawSettingRequest) (*AddWithdrawSettingResponse, error)
	UpdateWithdrawSetting(context.Context, *UpdateWithdrawSettingRequest) (*UpdateWithdrawSettingResponse, error)
	RemoveWithdrawSetting(context.Context, *RemoveWithdrawSettingRequest) (*RemoveWithdrawSettingResponse, error)
	GetWithdrawSetting(context.Context, *GetWithdrawSettingRequest) (*GetWithdrawSettingResponse, error)
	//提现限额
	AddWithdrawQuota(context.Context, *AddWithdrawQuotaRequest) (*AddWithdrawQuotaResponse, error)
	RemoveWithdrawQuota(context.Context, *RemoveWithdrawQuotaRequest) (*RemoveWithdrawQuotaResponse, error)
	ListWithdrawQuota(context.Context, *ListWithdrawQuotaRequest) (*ListWithdrawQuotaResponse, error)
	//提现白名单
	AddWithdrawWhitelist(context.Context, *AddWithdrawWhitelistRequest) (*AddWithdrawWhitelistResponse, error)
	RemoveWithdrawWhitelist(context.Context, *RemoveWithdrawWhitelistRequest) (*RemoveWithdrawWhitelistResponse, error)
	ListWithdrawWhitelist(context.Context, *ListWithdrawWhitelistRequest) (*ListWithdrawWhitelistResponse, error)
	UpdateWithdrawPolicy(context.Context, *UpdateWithdrawPolicyRequest) (*UpdateWithdrawPolicyResponse, error)
	ListWithdrawPolicy(context.Context, *ListWithdrawPolicyRequest) (*ListWithdrawPolicyResponse, error)
	GetWithdrawPolicy(context.Context, *GetWithdrawPolicyRequest) (*GetWithdrawPolicyResponse, error)
	//推送历史记录
	AddMessage(context.Context, *AddMessageRequest) (*AddMessageResponse, error)
	UpdateMessage(context.Context, *UpdateMessageRequest) (*UpdateMessageResponse, error)
	ListMessage(context.Context, *ListMessageRequest) (*ListMessageResponse, error)
}

// UnimplementedWalletServer can be embedded to have forward compatible implementations.
type UnimplementedWalletServer struct {
}

func (*UnimplementedWalletServer) AddWallet(ctx context.Context, req *AddWalletRequest) (*AddWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWallet not implemented")
}
func (*UnimplementedWalletServer) GetWallet(ctx context.Context, req *GetWalletRequest) (*GetWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (*UnimplementedWalletServer) UpdateWallet(ctx context.Context, req *UpdateWalletRequest) (*UpdateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWallet not implemented")
}
func (*UnimplementedWalletServer) RemoveWallet(ctx context.Context, req *RemoveWalletRequest) (*RemoveWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWallet not implemented")
}
func (*UnimplementedWalletServer) ListWallet(ctx context.Context, req *ListWalletRequest) (*ListWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWallet not implemented")
}
func (*UnimplementedWalletServer) ListCoinInfo(ctx context.Context, req *ListCoinInfoRequest) (*ListCoinInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoinInfo not implemented")
}
func (*UnimplementedWalletServer) AddWalletCoin(ctx context.Context, req *AddWalletCoinRequest) (*AddWalletCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWalletCoin not implemented")
}
func (*UnimplementedWalletServer) RemoveWalletCoin(ctx context.Context, req *RemoveWalletCoinRequest) (*RemoveWalletCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWalletCoin not implemented")
}
func (*UnimplementedWalletServer) ListWalletCoin(ctx context.Context, req *ListWalletCoinRequest) (*ListWalletCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletCoin not implemented")
}
func (*UnimplementedWalletServer) GetWalletCoin(ctx context.Context, req *GetWalletCoinRequest) (*GetWalletCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletCoin not implemented")
}
func (*UnimplementedWalletServer) ListWalletDetail(ctx context.Context, req *ListWalletDetailRequest) (*ListWalletDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletDetail not implemented")
}
func (*UnimplementedWalletServer) ListWalletCoinDetail(ctx context.Context, req *ListWalletCoinDetailRequest) (*ListWalletCoinDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletCoinDetail not implemented")
}
func (*UnimplementedWalletServer) GetNewAddress(ctx context.Context, req *GetNewAddressRequest) (*GetNewAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewAddress not implemented")
}
func (*UnimplementedWalletServer) HideAddress(ctx context.Context, req *HideAddressRequest) (*HideAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HideAddress not implemented")
}
func (*UnimplementedWalletServer) ListAddress(ctx context.Context, req *ListAddressRequest) (*ListAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddress not implemented")
}
func (*UnimplementedWalletServer) HasAddress(ctx context.Context, req *HasAddressRequest) (*HasAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasAddress not implemented")
}
func (*UnimplementedWalletServer) CheckAddress(ctx context.Context, req *CheckAddressRequest) (*CheckAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAddress not implemented")
}
func (*UnimplementedWalletServer) GetCoinFee(ctx context.Context, req *GetCoinFeeRequest) (*GetCoinFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinFee not implemented")
}
func (*UnimplementedWalletServer) ListCoinTx(ctx context.Context, req *ListCoinTxRequest) (*ListCoinTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoinTx not implemented")
}
func (*UnimplementedWalletServer) QueryCoinTx(ctx context.Context, req *QueryCoinTxRequest) (*QueryCoinTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCoinTx not implemented")
}
func (*UnimplementedWalletServer) NewWithdraw(ctx context.Context, req *NewWithdrawRequest) (*NewWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewWithdraw not implemented")
}
func (*UnimplementedWalletServer) GetWithdrawDetail(ctx context.Context, req *GetWithdrawDetailRequest) (*GetWithdrawDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawDetail not implemented")
}
func (*UnimplementedWalletServer) CollectCallback(ctx context.Context, req *CollectCallbackRequest) (*CollectCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectCallback not implemented")
}
func (*UnimplementedWalletServer) ImportOldAddress(ctx context.Context, req *ImportOldAddressRequest) (*ImportOldAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportOldAddress not implemented")
}
func (*UnimplementedWalletServer) GetWalletAsset(ctx context.Context, req *GetWalletAssetRequest) (*GetWalletAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletAsset not implemented")
}
func (*UnimplementedWalletServer) ListWalletAsset(ctx context.Context, req *ListWalletAssetRequest) (*ListWalletAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletAsset not implemented")
}
func (*UnimplementedWalletServer) AddWithdrawSetting(ctx context.Context, req *AddWithdrawSettingRequest) (*AddWithdrawSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWithdrawSetting not implemented")
}
func (*UnimplementedWalletServer) UpdateWithdrawSetting(ctx context.Context, req *UpdateWithdrawSettingRequest) (*UpdateWithdrawSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWithdrawSetting not implemented")
}
func (*UnimplementedWalletServer) RemoveWithdrawSetting(ctx context.Context, req *RemoveWithdrawSettingRequest) (*RemoveWithdrawSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWithdrawSetting not implemented")
}
func (*UnimplementedWalletServer) GetWithdrawSetting(ctx context.Context, req *GetWithdrawSettingRequest) (*GetWithdrawSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawSetting not implemented")
}
func (*UnimplementedWalletServer) AddWithdrawQuota(ctx context.Context, req *AddWithdrawQuotaRequest) (*AddWithdrawQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWithdrawQuota not implemented")
}
func (*UnimplementedWalletServer) RemoveWithdrawQuota(ctx context.Context, req *RemoveWithdrawQuotaRequest) (*RemoveWithdrawQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWithdrawQuota not implemented")
}
func (*UnimplementedWalletServer) ListWithdrawQuota(ctx context.Context, req *ListWithdrawQuotaRequest) (*ListWithdrawQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawQuota not implemented")
}
func (*UnimplementedWalletServer) AddWithdrawWhitelist(ctx context.Context, req *AddWithdrawWhitelistRequest) (*AddWithdrawWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWithdrawWhitelist not implemented")
}
func (*UnimplementedWalletServer) RemoveWithdrawWhitelist(ctx context.Context, req *RemoveWithdrawWhitelistRequest) (*RemoveWithdrawWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWithdrawWhitelist not implemented")
}
func (*UnimplementedWalletServer) ListWithdrawWhitelist(ctx context.Context, req *ListWithdrawWhitelistRequest) (*ListWithdrawWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawWhitelist not implemented")
}
func (*UnimplementedWalletServer) UpdateWithdrawPolicy(ctx context.Context, req *UpdateWithdrawPolicyRequest) (*UpdateWithdrawPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWithdrawPolicy not implemented")
}
func (*UnimplementedWalletServer) ListWithdrawPolicy(ctx context.Context, req *ListWithdrawPolicyRequest) (*ListWithdrawPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawPolicy not implemented")
}
func (*UnimplementedWalletServer) GetWithdrawPolicy(ctx context.Context, req *GetWithdrawPolicyRequest) (*GetWithdrawPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawPolicy not implemented")
}
func (*UnimplementedWalletServer) AddMessage(ctx context.Context, req *AddMessageRequest) (*AddMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMessage not implemented")
}
func (*UnimplementedWalletServer) UpdateMessage(ctx context.Context, req *UpdateMessageRequest) (*UpdateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (*UnimplementedWalletServer) ListMessage(ctx context.Context, req *ListMessageRequest) (*ListMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessage not implemented")
}

func RegisterWalletServer(s *grpc.Server, srv WalletServer) {
	s.RegisterService(&_Wallet_serviceDesc, srv)
}

func _Wallet_AddWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AddWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/AddWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AddWallet(ctx, req.(*AddWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/GetWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetWallet(ctx, req.(*GetWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/UpdateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateWallet(ctx, req.(*UpdateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_RemoveWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).RemoveWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/RemoveWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).RemoveWallet(ctx, req.(*RemoveWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/ListWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListWallet(ctx, req.(*ListWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListCoinInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoinInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListCoinInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/ListCoinInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListCoinInfo(ctx, req.(*ListCoinInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AddWalletCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWalletCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AddWalletCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/AddWalletCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AddWalletCoin(ctx, req.(*AddWalletCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_RemoveWalletCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWalletCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).RemoveWalletCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/RemoveWalletCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).RemoveWalletCoin(ctx, req.(*RemoveWalletCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListWalletCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListWalletCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/ListWalletCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListWalletCoin(ctx, req.(*ListWalletCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetWalletCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetWalletCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/GetWalletCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetWalletCoin(ctx, req.(*GetWalletCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListWalletDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListWalletDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/ListWalletDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListWalletDetail(ctx, req.(*ListWalletDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListWalletCoinDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletCoinDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListWalletCoinDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/ListWalletCoinDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListWalletCoinDetail(ctx, req.(*ListWalletCoinDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/GetNewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNewAddress(ctx, req.(*GetNewAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_HideAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HideAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).HideAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/HideAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).HideAddress(ctx, req.(*HideAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/ListAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListAddress(ctx, req.(*ListAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_HasAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).HasAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/HasAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).HasAddress(ctx, req.(*HasAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CheckAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CheckAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/CheckAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CheckAddress(ctx, req.(*CheckAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetCoinFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetCoinFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/GetCoinFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetCoinFee(ctx, req.(*GetCoinFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListCoinTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoinTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListCoinTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/ListCoinTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListCoinTx(ctx, req.(*ListCoinTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_QueryCoinTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCoinTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).QueryCoinTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/QueryCoinTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).QueryCoinTx(ctx, req.(*QueryCoinTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_NewWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).NewWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/NewWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).NewWithdraw(ctx, req.(*NewWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetWithdrawDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetWithdrawDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/GetWithdrawDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetWithdrawDetail(ctx, req.(*GetWithdrawDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CollectCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CollectCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/CollectCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CollectCallback(ctx, req.(*CollectCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ImportOldAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportOldAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ImportOldAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/ImportOldAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ImportOldAddress(ctx, req.(*ImportOldAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetWalletAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetWalletAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/GetWalletAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetWalletAsset(ctx, req.(*GetWalletAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListWalletAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListWalletAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/ListWalletAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListWalletAsset(ctx, req.(*ListWalletAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AddWithdrawSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWithdrawSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AddWithdrawSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/AddWithdrawSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AddWithdrawSetting(ctx, req.(*AddWithdrawSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateWithdrawSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWithdrawSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateWithdrawSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/UpdateWithdrawSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateWithdrawSetting(ctx, req.(*UpdateWithdrawSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_RemoveWithdrawSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWithdrawSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).RemoveWithdrawSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/RemoveWithdrawSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).RemoveWithdrawSetting(ctx, req.(*RemoveWithdrawSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetWithdrawSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetWithdrawSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/GetWithdrawSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetWithdrawSetting(ctx, req.(*GetWithdrawSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AddWithdrawQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWithdrawQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AddWithdrawQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/AddWithdrawQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AddWithdrawQuota(ctx, req.(*AddWithdrawQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_RemoveWithdrawQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWithdrawQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).RemoveWithdrawQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/RemoveWithdrawQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).RemoveWithdrawQuota(ctx, req.(*RemoveWithdrawQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListWithdrawQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListWithdrawQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/ListWithdrawQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListWithdrawQuota(ctx, req.(*ListWithdrawQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AddWithdrawWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWithdrawWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AddWithdrawWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/AddWithdrawWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AddWithdrawWhitelist(ctx, req.(*AddWithdrawWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_RemoveWithdrawWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWithdrawWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).RemoveWithdrawWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/RemoveWithdrawWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).RemoveWithdrawWhitelist(ctx, req.(*RemoveWithdrawWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListWithdrawWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListWithdrawWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/ListWithdrawWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListWithdrawWhitelist(ctx, req.(*ListWithdrawWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateWithdrawPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWithdrawPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateWithdrawPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/UpdateWithdrawPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateWithdrawPolicy(ctx, req.(*UpdateWithdrawPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListWithdrawPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListWithdrawPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/ListWithdrawPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListWithdrawPolicy(ctx, req.(*ListWithdrawPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetWithdrawPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetWithdrawPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/GetWithdrawPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetWithdrawPolicy(ctx, req.(*GetWithdrawPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AddMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AddMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/AddMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AddMessage(ctx, req.(*AddMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateMessage(ctx, req.(*UpdateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet.api.Wallet/ListMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListMessage(ctx, req.(*ListMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wallet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.api.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddWallet",
			Handler:    _Wallet_AddWallet_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _Wallet_GetWallet_Handler,
		},
		{
			MethodName: "UpdateWallet",
			Handler:    _Wallet_UpdateWallet_Handler,
		},
		{
			MethodName: "RemoveWallet",
			Handler:    _Wallet_RemoveWallet_Handler,
		},
		{
			MethodName: "ListWallet",
			Handler:    _Wallet_ListWallet_Handler,
		},
		{
			MethodName: "ListCoinInfo",
			Handler:    _Wallet_ListCoinInfo_Handler,
		},
		{
			MethodName: "AddWalletCoin",
			Handler:    _Wallet_AddWalletCoin_Handler,
		},
		{
			MethodName: "RemoveWalletCoin",
			Handler:    _Wallet_RemoveWalletCoin_Handler,
		},
		{
			MethodName: "ListWalletCoin",
			Handler:    _Wallet_ListWalletCoin_Handler,
		},
		{
			MethodName: "GetWalletCoin",
			Handler:    _Wallet_GetWalletCoin_Handler,
		},
		{
			MethodName: "ListWalletDetail",
			Handler:    _Wallet_ListWalletDetail_Handler,
		},
		{
			MethodName: "ListWalletCoinDetail",
			Handler:    _Wallet_ListWalletCoinDetail_Handler,
		},
		{
			MethodName: "GetNewAddress",
			Handler:    _Wallet_GetNewAddress_Handler,
		},
		{
			MethodName: "HideAddress",
			Handler:    _Wallet_HideAddress_Handler,
		},
		{
			MethodName: "ListAddress",
			Handler:    _Wallet_ListAddress_Handler,
		},
		{
			MethodName: "HasAddress",
			Handler:    _Wallet_HasAddress_Handler,
		},
		{
			MethodName: "CheckAddress",
			Handler:    _Wallet_CheckAddress_Handler,
		},
		{
			MethodName: "GetCoinFee",
			Handler:    _Wallet_GetCoinFee_Handler,
		},
		{
			MethodName: "ListCoinTx",
			Handler:    _Wallet_ListCoinTx_Handler,
		},
		{
			MethodName: "QueryCoinTx",
			Handler:    _Wallet_QueryCoinTx_Handler,
		},
		{
			MethodName: "NewWithdraw",
			Handler:    _Wallet_NewWithdraw_Handler,
		},
		{
			MethodName: "GetWithdrawDetail",
			Handler:    _Wallet_GetWithdrawDetail_Handler,
		},
		{
			MethodName: "CollectCallback",
			Handler:    _Wallet_CollectCallback_Handler,
		},
		{
			MethodName: "ImportOldAddress",
			Handler:    _Wallet_ImportOldAddress_Handler,
		},
		{
			MethodName: "GetWalletAsset",
			Handler:    _Wallet_GetWalletAsset_Handler,
		},
		{
			MethodName: "ListWalletAsset",
			Handler:    _Wallet_ListWalletAsset_Handler,
		},
		{
			MethodName: "AddWithdrawSetting",
			Handler:    _Wallet_AddWithdrawSetting_Handler,
		},
		{
			MethodName: "UpdateWithdrawSetting",
			Handler:    _Wallet_UpdateWithdrawSetting_Handler,
		},
		{
			MethodName: "RemoveWithdrawSetting",
			Handler:    _Wallet_RemoveWithdrawSetting_Handler,
		},
		{
			MethodName: "GetWithdrawSetting",
			Handler:    _Wallet_GetWithdrawSetting_Handler,
		},
		{
			MethodName: "AddWithdrawQuota",
			Handler:    _Wallet_AddWithdrawQuota_Handler,
		},
		{
			MethodName: "RemoveWithdrawQuota",
			Handler:    _Wallet_RemoveWithdrawQuota_Handler,
		},
		{
			MethodName: "ListWithdrawQuota",
			Handler:    _Wallet_ListWithdrawQuota_Handler,
		},
		{
			MethodName: "AddWithdrawWhitelist",
			Handler:    _Wallet_AddWithdrawWhitelist_Handler,
		},
		{
			MethodName: "RemoveWithdrawWhitelist",
			Handler:    _Wallet_RemoveWithdrawWhitelist_Handler,
		},
		{
			MethodName: "ListWithdrawWhitelist",
			Handler:    _Wallet_ListWithdrawWhitelist_Handler,
		},
		{
			MethodName: "UpdateWithdrawPolicy",
			Handler:    _Wallet_UpdateWithdrawPolicy_Handler,
		},
		{
			MethodName: "ListWithdrawPolicy",
			Handler:    _Wallet_ListWithdrawPolicy_Handler,
		},
		{
			MethodName: "GetWithdrawPolicy",
			Handler:    _Wallet_GetWithdrawPolicy_Handler,
		},
		{
			MethodName: "AddMessage",
			Handler:    _Wallet_AddMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _Wallet_UpdateMessage_Handler,
		},
		{
			MethodName: "ListMessage",
			Handler:    _Wallet_ListMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet.proto",
}

func (m *AddWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WType != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.WType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.AccountId != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WalletId != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.WalletId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.WalletId != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.WalletId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemoveWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WalletId != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.WalletId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x58
	}
	if m.Page != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x50
	}
	if m.WalletId != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.WalletId))
		i--
		dAtA[i] = 0x10
	}
	if m.AccountId != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalNum != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListCoinInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCoinInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCoinInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x58
	}
	if m.Page != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x50
	}
	return len(dAtA) - i, nil
}

func (m *ListCoinInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCoinInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCoinInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalNum != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddWalletCoinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWalletCoinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWalletCoinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddWalletCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWalletCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWalletCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWalletCoinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWalletCoinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWalletCoinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWalletCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWalletCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWalletCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListWalletCoinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletCoinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletCoinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x58
	}
	if m.Page != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x50
	}
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalNum != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletCoinDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletCoinDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletCoinDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x58
	}
	if m.Page != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x50
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletCoinDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletCoinDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletCoinDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalNum != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetWalletCoinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWalletCoinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWalletCoinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetWalletCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWalletCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWalletCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x58
	}
	if m.Page != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalNum != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetNewAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNewAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNewAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Uid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x20
	}
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetNewAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNewAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNewAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HideAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HideAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HideAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HideAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HideAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HideAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *HasAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HasAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HasAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HasAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HasAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HasAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exist {
		i--
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCoinFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoinFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCoinFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCoinFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoinFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCoinFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlatformFeeStr) > 0 {
		i -= len(m.PlatformFeeStr)
		copy(dAtA[i:], m.PlatformFeeStr)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.PlatformFeeStr)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.LimitFeeStr) > 0 {
		i -= len(m.LimitFeeStr)
		copy(dAtA[i:], m.LimitFeeStr)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.LimitFeeStr)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.FeeFastStr) > 0 {
		i -= len(m.FeeFastStr)
		copy(dAtA[i:], m.FeeFastStr)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.FeeFastStr)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.FeeMiddleStr) > 0 {
		i -= len(m.FeeMiddleStr)
		copy(dAtA[i:], m.FeeMiddleStr)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.FeeMiddleStr)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.FeeSlowStr) > 0 {
		i -= len(m.FeeSlowStr)
		copy(dAtA[i:], m.FeeSlowStr)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.FeeSlowStr)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PlatformFee != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PlatformFee))))
		i--
		dAtA[i] = 0x29
	}
	if m.LimitFee != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LimitFee))))
		i--
		dAtA[i] = 0x21
	}
	if m.FeeFast != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FeeFast))))
		i--
		dAtA[i] = 0x19
	}
	if m.FeeMiddle != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FeeMiddle))))
		i--
		dAtA[i] = 0x11
	}
	if m.FeeSlow != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FeeSlow))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *ListCoinTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCoinTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCoinTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Side != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.BillStatus != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.BillStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.EndBlockTime != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.EndBlockTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.BeginBlockTime != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.BeginBlockTime))
		i--
		dAtA[i] = 0x78
	}
	if m.Limit != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x70
	}
	if m.MaxId != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x68
	}
	if m.MinId != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.MinId))
		i--
		dAtA[i] = 0x60
	}
	if m.MinConfirmedNum != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.MinConfirmedNum))
		i--
		dAtA[i] = 0x58
	}
	if m.Type != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x50
	}
	if len(m.InnerTxid) > 0 {
		i -= len(m.InnerTxid)
		copy(dAtA[i:], m.InnerTxid)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.InnerTxid)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0x22
	}
	if m.RefCid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.RefCid))
		i--
		dAtA[i] = 0x18
	}
	if m.RefWid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.RefWid))
		i--
		dAtA[i] = 0x10
	}
	if m.RefAid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.RefAid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListCoinTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCoinTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCoinTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCoinTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCoinTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCoinTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if m.Page != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	if m.EndUpdateAt != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.EndUpdateAt))
		i--
		dAtA[i] = 0x60
	}
	if m.BeginUpdateAt != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.BeginUpdateAt))
		i--
		dAtA[i] = 0x58
	}
	if m.EndCreateAt != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.EndCreateAt))
		i--
		dAtA[i] = 0x50
	}
	if m.BeginCreateAt != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.BeginCreateAt))
		i--
		dAtA[i] = 0x48
	}
	if m.EndBlockTime != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.EndBlockTime))
		i--
		dAtA[i] = 0x40
	}
	if m.BeginBlockTime != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.BeginBlockTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Sides) > 0 {
		dAtA6 := make([]byte, len(m.Sides)*10)
		var j5 int
		for _, num := range m.Sides {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintWallet(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x32
	}
	if len(m.States) > 0 {
		dAtA8 := make([]byte, len(m.States)*10)
		var j7 int
		for _, num := range m.States {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintWallet(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RefCids) > 0 {
		dAtA10 := make([]byte, len(m.RefCids)*10)
		var j9 int
		for _, num1 := range m.RefCids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintWallet(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RefWids) > 0 {
		dAtA12 := make([]byte, len(m.RefWids)*10)
		var j11 int
		for _, num1 := range m.RefWids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintWallet(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Txt) > 0 {
		i -= len(m.Txt)
		copy(dAtA[i:], m.Txt)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Txt)))
		i--
		dAtA[i] = 0x12
	}
	if m.RefAid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.RefAid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCoinTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCoinTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCoinTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalNum != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InnerTxid) > 0 {
		i -= len(m.InnerTxid)
		copy(dAtA[i:], m.InnerTxid)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.InnerTxid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWithdrawDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWithdrawDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWithdrawDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetWithdrawDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWithdrawDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWithdrawDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CollectCallbackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectCallbackRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectCallbackRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CollectCallbackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectCallbackResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectCallbackResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InnerTxid) > 0 {
		i -= len(m.InnerTxid)
		copy(dAtA[i:], m.InnerTxid)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.InnerTxid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImportOldAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportOldAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportOldAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Uid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x20
	}
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ImportOldAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportOldAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportOldAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetWalletAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWalletAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWalletAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetWalletAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWalletAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWalletAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListWalletAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWalletAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWalletAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddWithdrawSettingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWithdrawSettingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWithdrawSettingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddWithdrawSettingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWithdrawSettingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWithdrawSettingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWithdrawSettingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWithdrawSettingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWithdrawSettingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWithdrawSettingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWithdrawSettingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWithdrawSettingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemoveWithdrawSettingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWithdrawSettingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWithdrawSettingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x18
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWithdrawSettingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWithdrawSettingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWithdrawSettingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetWithdrawSettingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWithdrawSettingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWithdrawSettingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetWithdrawSettingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWithdrawSettingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWithdrawSettingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddWithdrawQuotaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWithdrawQuotaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWithdrawQuotaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddWithdrawQuotaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWithdrawQuotaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWithdrawQuotaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWithdrawQuotaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWithdrawQuotaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWithdrawQuotaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x20
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x18
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWithdrawQuotaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWithdrawQuotaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWithdrawQuotaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListWithdrawQuotaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWithdrawQuotaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWithdrawQuotaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListWithdrawQuotaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWithdrawQuotaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWithdrawQuotaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddWithdrawWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWithdrawWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWithdrawWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddWithdrawWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWithdrawWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWithdrawWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWithdrawWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWithdrawWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWithdrawWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x20
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x18
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWithdrawWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWithdrawWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWithdrawWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListWithdrawWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWithdrawWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWithdrawWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListWithdrawWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWithdrawWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWithdrawWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddWithdrawPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWithdrawPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWithdrawPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddWithdrawPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWithdrawPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWithdrawPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateWithdrawPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWithdrawPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWithdrawPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateItem != nil {
		{
			size, err := m.UpdateItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DelItem != nil {
		{
			size, err := m.DelItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AddItem != nil {
		{
			size, err := m.AddItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWithdrawPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWithdrawPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWithdrawPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListWithdrawPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWithdrawPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWithdrawPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListWithdrawPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWithdrawPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWithdrawPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWithdrawPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWithdrawPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWithdrawPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetWithdrawPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWithdrawPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWithdrawPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWallet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x58
	}
	if m.Page != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x50
	}
	if m.Cid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Wid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalNum != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.TotalNum))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintWallet(dAtA []byte, offset int, v uint64) int {
	offset -= sovWallet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovWallet(uint64(m.AccountId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.WType != 0 {
		n += 1 + sovWallet(uint64(m.WType))
	}
	return n
}

func (m *AddWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	return n
}

func (m *GetWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WalletId != 0 {
		n += 1 + sovWallet(uint64(m.WalletId))
	}
	return n
}

func (m *GetWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *UpdateWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WalletId != 0 {
		n += 1 + sovWallet(uint64(m.WalletId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovWallet(uint64(m.State))
	}
	return n
}

func (m *UpdateWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WalletId != 0 {
		n += 1 + sovWallet(uint64(m.WalletId))
	}
	return n
}

func (m *RemoveWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountId != 0 {
		n += 1 + sovWallet(uint64(m.AccountId))
	}
	if m.WalletId != 0 {
		n += 1 + sovWallet(uint64(m.WalletId))
	}
	if m.Page != 0 {
		n += 1 + sovWallet(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovWallet(uint64(m.PageSize))
	}
	return n
}

func (m *ListWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovWallet(uint64(m.TotalNum))
	}
	if m.Page != 0 {
		n += 1 + sovWallet(uint64(m.Page))
	}
	return n
}

func (m *ListCoinInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovWallet(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovWallet(uint64(m.PageSize))
	}
	return n
}

func (m *ListCoinInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovWallet(uint64(m.TotalNum))
	}
	if m.Page != 0 {
		n += 1 + sovWallet(uint64(m.Page))
	}
	return n
}

func (m *AddWalletCoinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *AddWalletCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWallet(uint64(m.Id))
	}
	return n
}

func (m *RemoveWalletCoinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWallet(uint64(m.Id))
	}
	return n
}

func (m *RemoveWalletCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListWalletCoinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	return n
}

func (m *ListWalletCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	return n
}

func (m *ListWalletDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	if m.Page != 0 {
		n += 1 + sovWallet(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovWallet(uint64(m.PageSize))
	}
	return n
}

func (m *ListWalletDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovWallet(uint64(m.TotalNum))
	}
	if m.Page != 0 {
		n += 1 + sovWallet(uint64(m.Page))
	}
	return n
}

func (m *ListWalletCoinDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Page != 0 {
		n += 1 + sovWallet(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovWallet(uint64(m.PageSize))
	}
	return n
}

func (m *ListWalletCoinDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovWallet(uint64(m.TotalNum))
	}
	if m.Page != 0 {
		n += 1 + sovWallet(uint64(m.Page))
	}
	return n
}

func (m *GetWalletCoinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWallet(uint64(m.Id))
	}
	return n
}

func (m *GetWalletCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *ListAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovWallet(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovWallet(uint64(m.PageSize))
	}
	return n
}

func (m *ListAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovWallet(uint64(m.TotalNum))
	}
	if m.Page != 0 {
		n += 1 + sovWallet(uint64(m.Page))
	}
	return n
}

func (m *GetNewAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	if m.Uid != 0 {
		n += 1 + sovWallet(uint64(m.Uid))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *GetNewAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *HideAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *HideAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HasAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *HasAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	return n
}

func (m *CheckAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *CheckAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	return n
}

func (m *GetCoinFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	return n
}

func (m *GetCoinFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeSlow != 0 {
		n += 9
	}
	if m.FeeMiddle != 0 {
		n += 9
	}
	if m.FeeFast != 0 {
		n += 9
	}
	if m.LimitFee != 0 {
		n += 9
	}
	if m.PlatformFee != 0 {
		n += 9
	}
	l = len(m.FeeSlowStr)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.FeeMiddleStr)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.FeeFastStr)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.LimitFeeStr)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.PlatformFeeStr)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *ListCoinTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RefAid != 0 {
		n += 1 + sovWallet(uint64(m.RefAid))
	}
	if m.RefWid != 0 {
		n += 1 + sovWallet(uint64(m.RefWid))
	}
	if m.RefCid != 0 {
		n += 1 + sovWallet(uint64(m.RefCid))
	}
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.InnerTxid)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovWallet(uint64(m.Type))
	}
	if m.MinConfirmedNum != 0 {
		n += 1 + sovWallet(uint64(m.MinConfirmedNum))
	}
	if m.MinId != 0 {
		n += 1 + sovWallet(uint64(m.MinId))
	}
	if m.MaxId != 0 {
		n += 1 + sovWallet(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovWallet(uint64(m.Limit))
	}
	if m.BeginBlockTime != 0 {
		n += 1 + sovWallet(uint64(m.BeginBlockTime))
	}
	if m.EndBlockTime != 0 {
		n += 2 + sovWallet(uint64(m.EndBlockTime))
	}
	if m.BillStatus != 0 {
		n += 2 + sovWallet(uint64(m.BillStatus))
	}
	if m.Side != 0 {
		n += 2 + sovWallet(uint64(m.Side))
	}
	return n
}

func (m *ListCoinTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	return n
}

func (m *QueryCoinTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RefAid != 0 {
		n += 1 + sovWallet(uint64(m.RefAid))
	}
	l = len(m.Txt)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if len(m.RefWids) > 0 {
		l = 0
		for _, e := range m.RefWids {
			l += sovWallet(uint64(e))
		}
		n += 1 + sovWallet(uint64(l)) + l
	}
	if len(m.RefCids) > 0 {
		l = 0
		for _, e := range m.RefCids {
			l += sovWallet(uint64(e))
		}
		n += 1 + sovWallet(uint64(l)) + l
	}
	if len(m.States) > 0 {
		l = 0
		for _, e := range m.States {
			l += sovWallet(uint64(e))
		}
		n += 1 + sovWallet(uint64(l)) + l
	}
	if len(m.Sides) > 0 {
		l = 0
		for _, e := range m.Sides {
			l += sovWallet(uint64(e))
		}
		n += 1 + sovWallet(uint64(l)) + l
	}
	if m.BeginBlockTime != 0 {
		n += 1 + sovWallet(uint64(m.BeginBlockTime))
	}
	if m.EndBlockTime != 0 {
		n += 1 + sovWallet(uint64(m.EndBlockTime))
	}
	if m.BeginCreateAt != 0 {
		n += 1 + sovWallet(uint64(m.BeginCreateAt))
	}
	if m.EndCreateAt != 0 {
		n += 1 + sovWallet(uint64(m.EndCreateAt))
	}
	if m.BeginUpdateAt != 0 {
		n += 1 + sovWallet(uint64(m.BeginUpdateAt))
	}
	if m.EndUpdateAt != 0 {
		n += 1 + sovWallet(uint64(m.EndUpdateAt))
	}
	if m.Page != 0 {
		n += 2 + sovWallet(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 2 + sovWallet(uint64(m.PageSize))
	}
	return n
}

func (m *QueryCoinTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovWallet(uint64(m.TotalNum))
	}
	if m.Page != 0 {
		n += 1 + sovWallet(uint64(m.Page))
	}
	return n
}

func (m *NewWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *NewWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InnerTxid)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *GetWithdrawDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *GetWithdrawDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *CollectCallbackRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *CollectCallbackResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InnerTxid)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *ImportOldAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	if m.Uid != 0 {
		n += 1 + sovWallet(uint64(m.Uid))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *ImportOldAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWallet(uint64(m.Id))
	}
	return n
}

func (m *GetWalletAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	return n
}

func (m *GetWalletAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *ListWalletAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	return n
}

func (m *ListWalletAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	return n
}

func (m *AddWithdrawSettingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *AddWithdrawSettingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWallet(uint64(m.Id))
	}
	return n
}

func (m *UpdateWithdrawSettingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *UpdateWithdrawSettingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveWithdrawSettingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWallet(uint64(m.Id))
	}
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	return n
}

func (m *RemoveWithdrawSettingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetWithdrawSettingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	return n
}

func (m *GetWithdrawSettingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *AddWithdrawQuotaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *AddWithdrawQuotaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWallet(uint64(m.Id))
	}
	return n
}

func (m *RemoveWithdrawQuotaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWallet(uint64(m.Id))
	}
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	return n
}

func (m *RemoveWithdrawQuotaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListWithdrawQuotaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	return n
}

func (m *ListWithdrawQuotaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	return n
}

func (m *AddWithdrawWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *AddWithdrawWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWallet(uint64(m.Id))
	}
	return n
}

func (m *RemoveWithdrawWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWallet(uint64(m.Id))
	}
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	return n
}

func (m *RemoveWithdrawWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListWithdrawWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	return n
}

func (m *ListWithdrawWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	return n
}

func (m *AddWithdrawPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *AddWithdrawPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateWithdrawPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddItem != nil {
		l = m.AddItem.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.DelItem != nil {
		l = m.DelItem.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.UpdateItem != nil {
		l = m.UpdateItem.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *UpdateWithdrawPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListWithdrawPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	return n
}

func (m *ListWithdrawPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *GetWithdrawPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	return n
}

func (m *GetWithdrawPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *AddMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *AddMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWallet(uint64(m.Id))
	}
	return n
}

func (m *UpdateMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func (m *UpdateMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovWallet(uint64(m.Aid))
	}
	if m.Wid != 0 {
		n += 1 + sovWallet(uint64(m.Wid))
	}
	if m.Cid != 0 {
		n += 1 + sovWallet(uint64(m.Cid))
	}
	if m.Page != 0 {
		n += 1 + sovWallet(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovWallet(uint64(m.PageSize))
	}
	return n
}

func (m *ListMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovWallet(uint64(m.TotalNum))
	}
	if m.Page != 0 {
		n += 1 + sovWallet(uint64(m.Page))
	}
	return n
}

func sovWallet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWallet(x uint64) (n int) {
	return sovWallet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WType", wireType)
			}
			m.WType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WType |= shared_gogo.WalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			m.WalletId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.WalletInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			m.WalletId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= shared_gogo.StateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			m.WalletId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			m.WalletId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.WalletInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCoinInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCoinInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCoinInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCoinInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCoinInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCoinInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.CoinInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWalletCoinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWalletCoinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWalletCoinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.WalletCoin{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWalletCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWalletCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWalletCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWalletCoinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWalletCoinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWalletCoinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWalletCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWalletCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWalletCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletCoinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletCoinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletCoinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.WalletCoin{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.WalletDetail{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletCoinDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletCoinDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletCoinDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletCoinDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletCoinDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletCoinDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.WalletCoinDetail{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWalletCoinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWalletCoinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWalletCoinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWalletCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWalletCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWalletCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.WalletCoin{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.AddressInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNewAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNewAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNewAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNewAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNewAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNewAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.AddressInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HideAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HideAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HideAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HideAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HideAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HideAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HasAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HasAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HasAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HasAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HasAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HasAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoinFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCoinFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCoinFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoinFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCoinFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCoinFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeSlow", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FeeSlow = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeMiddle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FeeMiddle = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeFast", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FeeFast = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitFee", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LimitFee = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformFee", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PlatformFee = float64(math.Float64frombits(v))
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeSlowStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeSlowStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeMiddleStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeMiddleStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeFastStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeFastStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitFeeStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitFeeStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformFeeStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformFeeStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCoinTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCoinTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCoinTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefAid", wireType)
			}
			m.RefAid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefAid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefWid", wireType)
			}
			m.RefWid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefWid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefCid", wireType)
			}
			m.RefCid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefCid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerTxid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InnerTxid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinConfirmedNum", wireType)
			}
			m.MinConfirmedNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinConfirmedNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlockTime", wireType)
			}
			m.BeginBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginBlockTime |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockTime", wireType)
			}
			m.EndBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlockTime |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillStatus", wireType)
			}
			m.BillStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillStatus |= GenBillStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= shared_gogo.TxSideType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCoinTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCoinTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCoinTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.CoinTx{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCoinTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCoinTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCoinTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefAid", wireType)
			}
			m.RefAid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefAid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWallet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RefWids = append(m.RefWids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWallet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWallet
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWallet
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RefWids) == 0 {
					m.RefWids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWallet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RefWids = append(m.RefWids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RefWids", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWallet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RefCids = append(m.RefCids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWallet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWallet
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWallet
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RefCids) == 0 {
					m.RefCids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWallet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RefCids = append(m.RefCids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RefCids", wireType)
			}
		case 5:
			if wireType == 0 {
				var v shared_gogo.TxStateType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWallet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= shared_gogo.TxStateType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.States = append(m.States, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWallet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWallet
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWallet
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.States) == 0 {
					m.States = make([]shared_gogo.TxStateType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v shared_gogo.TxStateType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWallet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= shared_gogo.TxStateType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.States = append(m.States, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
		case 6:
			if wireType == 0 {
				var v shared_gogo.TxSideType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWallet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= shared_gogo.TxSideType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sides = append(m.Sides, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWallet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWallet
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthWallet
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Sides) == 0 {
					m.Sides = make([]shared_gogo.TxSideType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v shared_gogo.TxSideType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWallet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= shared_gogo.TxSideType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sides = append(m.Sides, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sides", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlockTime", wireType)
			}
			m.BeginBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginBlockTime |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockTime", wireType)
			}
			m.EndBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlockTime |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginCreateAt", wireType)
			}
			m.BeginCreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginCreateAt |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndCreateAt", wireType)
			}
			m.EndCreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndCreateAt |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginUpdateAt", wireType)
			}
			m.BeginUpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginUpdateAt |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndUpdateAt", wireType)
			}
			m.EndUpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndUpdateAt |= bitbucket_org_biiigle_biiigle_wa001_dams_src_lib_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCoinTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCoinTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCoinTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.CoinTx{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.CoinTx{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerTxid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InnerTxid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWithdrawDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWithdrawDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWithdrawDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWithdrawDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWithdrawDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWithdrawDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.CoinTx{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectCallbackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectCallbackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectCallbackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.CoinTx{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectCallbackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectCallbackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectCallbackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerTxid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InnerTxid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportOldAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportOldAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportOldAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportOldAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportOldAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportOldAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWalletAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWalletAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWalletAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWalletAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWalletAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWalletAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.WalletAsset{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWalletAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWalletAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWalletAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.WalletAsset{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWithdrawSettingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWithdrawSettingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWithdrawSettingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.WithdrawSetting{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWithdrawSettingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWithdrawSettingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWithdrawSettingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWithdrawSettingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWithdrawSettingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWithdrawSettingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.WithdrawSetting{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWithdrawSettingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWithdrawSettingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWithdrawSettingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWithdrawSettingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWithdrawSettingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWithdrawSettingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWithdrawSettingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWithdrawSettingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWithdrawSettingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWithdrawSettingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWithdrawSettingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWithdrawSettingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWithdrawSettingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWithdrawSettingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWithdrawSettingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.WithdrawSetting{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWithdrawQuotaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWithdrawQuotaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWithdrawQuotaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.CoinWithdrawQuota{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWithdrawQuotaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWithdrawQuotaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWithdrawQuotaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWithdrawQuotaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWithdrawQuotaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWithdrawQuotaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWithdrawQuotaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWithdrawQuotaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWithdrawQuotaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWithdrawQuotaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWithdrawQuotaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWithdrawQuotaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWithdrawQuotaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWithdrawQuotaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWithdrawQuotaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.CoinWithdrawQuota{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWithdrawWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWithdrawWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWithdrawWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.CoinWithdrawWhitelist{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWithdrawWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWithdrawWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWithdrawWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWithdrawWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWithdrawWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWithdrawWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWithdrawWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWithdrawWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWithdrawWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWithdrawWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWithdrawWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWithdrawWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWithdrawWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWithdrawWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWithdrawWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.CoinWithdrawWhitelist{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWithdrawPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWithdrawPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWithdrawPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.WithdrawPolicy{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWithdrawPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWithdrawPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWithdrawPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWithdrawPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWithdrawPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWithdrawPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddItem == nil {
				m.AddItem = &shared_gogo.WithdrawPolicy{}
			}
			if err := m.AddItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelItem == nil {
				m.DelItem = &shared_gogo.WithdrawPolicy{}
			}
			if err := m.DelItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateItem == nil {
				m.UpdateItem = &shared_gogo.WithdrawPolicy{}
			}
			if err := m.UpdateItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWithdrawPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWithdrawPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWithdrawPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWithdrawPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWithdrawPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWithdrawPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWithdrawPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWithdrawPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWithdrawPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.WithdrawPolicy{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWithdrawPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWithdrawPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWithdrawPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWithdrawPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWithdrawPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWithdrawPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.WithdrawPolicy{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.Message{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &shared_gogo.Message{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &shared_gogo.Message{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWallet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWallet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWallet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWallet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWallet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWallet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWallet = fmt.Errorf("proto: unexpected end of group")
)
