// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: asapi.proto

package pbasapi

import (
	"context"

	bm "github.com/gisvr/golib/net/http/blademaster"
	"github.com/gisvr/golib/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathAsApiListAllCoinInfo = "/org_info"
var PathAsApiGetCoinInfo = "/coin_info"
var PathAsApiNewDepositAddress = "/new_address"
var PathAsApiHasAddress = "/address_info"
var PathAsApiCheckAddress = "/is_valid_address"
var PathAsApiListAllAddress = "/address_history"
var PathAsApiGetConfirmedTx = "/transaction"
var PathAsApiListConfirmedTx = "/transaction_history"
var PathAsApiGetUnConfirmedTx = "/deposit_info"
var PathAsApiListUnConfirmedTx = "/pending_transactions"
var PathAsApiNewWithdraw = "/new_withdraw_request"
var PathAsApiGetWithdrawDetail = "/withdraw_info_by_request_id"
var PathAsApiCollectCallback = "/collect_callback"
var PathAsApiImportOldAddress = "/import_old_address"

const (
	PermissionListAllCoinInfo   = "PermissionAsApiListAllCoinInfo"
	PermissionGetCoinInfo       = "PermissionAsApiGetCoinInfo"
	PermissionNewDepositAddress = "PermissionAsApiNewDepositAddress"
	PermissionHasAddress        = "PermissionAsApiHasAddress"
	PermissionCheckAddress      = "PermissionAsApiCheckAddress"
	PermissionListAllAddress    = "PermissionAsApiListAllAddress"
	PermissionGetConfirmedTx    = "PermissionAsApiGetConfirmedTx"
	PermissionListConfirmedTx   = "PermissionAsApiListConfirmedTx"
	PermissionGetUnConfirmedTx  = "PermissionAsApiGetUnConfirmedTx"
	PermissionListUnConfirmedTx = "PermissionAsApiListUnConfirmedTx"
	PermissionNewWithdraw       = "PermissionAsApiNewWithdraw"
	PermissionGetWithdrawDetail = "PermissionAsApiGetWithdrawDetail"
	PermissionCollectCallback   = "PermissionAsApiCollectCallback"
	PermissionImportOldAddress  = "PermissionAsApiImportOldAddress"
)

type Permission struct {
	Module      string
	Name        string
	Url         string
	Description string
}

var Perms = []Permission{
	Permission{"AsApi", PermissionListAllCoinInfo, PathAsApiListAllCoinInfo, "获取所有coin的信息及余额"},
	Permission{"AsApi", PermissionGetCoinInfo, PathAsApiGetCoinInfo, "获取指定coin钱包信息及余额"},
	Permission{"AsApi", PermissionNewDepositAddress, PathAsApiNewDepositAddress, "生成新的充值地址"},
	Permission{"AsApi", PermissionHasAddress, PathAsApiHasAddress, "验证地址归属 即地址存在否"},
	Permission{"AsApi", PermissionCheckAddress, PathAsApiCheckAddress, "验证地址合法性"},
	Permission{"AsApi", PermissionListAllAddress, PathAsApiListAllAddress, "查看地址总表"},
	Permission{"AsApi", PermissionGetConfirmedTx, PathAsApiGetConfirmedTx, "获取已入账交易详情"},
	Permission{"AsApi", PermissionListConfirmedTx, PathAsApiListConfirmedTx, "获取已入账交易列表"},
	Permission{"AsApi", PermissionGetUnConfirmedTx, PathAsApiGetUnConfirmedTx, "获取未入账交易详情"},
	Permission{"AsApi", PermissionListUnConfirmedTx, PathAsApiListUnConfirmedTx, "获取未入账交易列表"},
	Permission{"AsApi", PermissionNewWithdraw, PathAsApiNewWithdraw, "申请提现"},
	Permission{"AsApi", PermissionGetWithdrawDetail, PathAsApiGetWithdrawDetail, "查看提现详情"},
	Permission{"AsApi", PermissionCollectCallback, PathAsApiCollectCallback, "外部做归集时，提现完成回调通知"},
	Permission{"AsApi", PermissionImportOldAddress, PathAsApiImportOldAddress, "导入老地址"},
}

// AsApiBMServer is the server API for AsApi service.
type AsApiBMServer interface {
	// 获取所有coin的信息及余额
	ListAllCoinInfo(ctx context.Context, req *ListAllCoinRequest) (resp *ListAllCoinResponse, err error)

	// 获取指定coin钱包信息及余额
	GetCoinInfo(ctx context.Context, req *GetCoinInfoRequest) (resp *GetCoinInfoResponse, err error)

	// 生成新的充值地址
	NewDepositAddress(ctx context.Context, req *NewDepositAddressRequest) (resp *NewDepositAddressResponse, err error)

	// 验证地址归属 即地址存在否
	HasAddress(ctx context.Context, req *HasAddressRequest) (resp *HasAddressResponse, err error)

	// 验证地址合法性
	CheckAddress(ctx context.Context, req *CheckAddressRequest) (resp *CheckAddressResponse, err error)

	// 查看地址总表
	ListAllAddress(ctx context.Context, req *ListAllAddressRequest) (resp *ListAllAddressResponse, err error)

	// 获取已入账交易详情
	GetConfirmedTx(ctx context.Context, req *GetConfirmedTxRequest) (resp *GetConfirmedTxResponse, err error)

	// 获取已入账交易列表
	ListConfirmedTx(ctx context.Context, req *ListConfirmedTxRequest) (resp *ListConfirmedTxResponse, err error)

	// 获取未入账交易详情
	GetUnConfirmedTx(ctx context.Context, req *GetUnConfirmedTxRequest) (resp *GetUnConfirmedTxResponse, err error)

	// 获取未入账交易列表
	ListUnConfirmedTx(ctx context.Context, req *ListUnConfirmedTxRequest) (resp *ListUnConfirmedTxResponse, err error)

	// 申请提现
	NewWithdraw(ctx context.Context, req *NewWithdrawRequest) (resp *NewWithdrawResponse, err error)

	// 查看提现详情
	GetWithdrawDetail(ctx context.Context, req *GetWithdrawDetailRequest) (resp *GetWithdrawDetailResponse, err error)

	// 外部做归集时，提现完成回调通知
	CollectCallback(ctx context.Context, req *CollectCallbackRequest) (resp *CollectCallbackResponse, err error)

	// 导入老地址
	ImportOldAddress(ctx context.Context, req *ImportOldAddressRequest) (resp *ImportOldAddressResponse, err error)
}

var AsApiSvc AsApiBMServer

type JSONReaderFunc func(c *bm.Context, data interface{}, err error)

func DefaultJSONReader(c *bm.Context, data interface{}, err error) {
	c.JSON(data, err)
}

var JF JSONReaderFunc = DefaultJSONReader

func AsApiListAllCoinInfo(c *bm.Context) {
	p := new(ListAllCoinRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsApiSvc.ListAllCoinInfo(c, p)
	JF(c, resp, err)
}

func AsApiGetCoinInfo(c *bm.Context) {
	p := new(GetCoinInfoRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsApiSvc.GetCoinInfo(c, p)
	JF(c, resp, err)
}

func AsApiNewDepositAddress(c *bm.Context) {
	p := new(NewDepositAddressRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsApiSvc.NewDepositAddress(c, p)
	JF(c, resp, err)
}

func AsApiHasAddress(c *bm.Context) {
	p := new(HasAddressRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsApiSvc.HasAddress(c, p)
	JF(c, resp, err)
}

func AsApiCheckAddress(c *bm.Context) {
	p := new(CheckAddressRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsApiSvc.CheckAddress(c, p)
	JF(c, resp, err)
}

func AsApiListAllAddress(c *bm.Context) {
	p := new(ListAllAddressRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsApiSvc.ListAllAddress(c, p)
	JF(c, resp, err)
}

func AsApiGetConfirmedTx(c *bm.Context) {
	p := new(GetConfirmedTxRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsApiSvc.GetConfirmedTx(c, p)
	JF(c, resp, err)
}

func AsApiListConfirmedTx(c *bm.Context) {
	p := new(ListConfirmedTxRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsApiSvc.ListConfirmedTx(c, p)
	JF(c, resp, err)
}

func AsApiGetUnConfirmedTx(c *bm.Context) {
	p := new(GetUnConfirmedTxRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsApiSvc.GetUnConfirmedTx(c, p)
	JF(c, resp, err)
}

func AsApiListUnConfirmedTx(c *bm.Context) {
	p := new(ListUnConfirmedTxRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsApiSvc.ListUnConfirmedTx(c, p)
	JF(c, resp, err)
}

func AsApiNewWithdraw(c *bm.Context) {
	p := new(NewWithdrawRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsApiSvc.NewWithdraw(c, p)
	JF(c, resp, err)
}

func AsApiGetWithdrawDetail(c *bm.Context) {
	p := new(GetWithdrawDetailRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsApiSvc.GetWithdrawDetail(c, p)
	JF(c, resp, err)
}

func AsApiCollectCallback(c *bm.Context) {
	p := new(CollectCallbackRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsApiSvc.CollectCallback(c, p)
	JF(c, resp, err)
}

func AsApiImportOldAddress(c *bm.Context) {
	p := new(ImportOldAddressRequest)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := AsApiSvc.ImportOldAddress(c, p)
	JF(c, resp, err)
}

// RegisterAsApiBMServer Register the blademaster route
func RegisterAsApiBMServer(e *bm.Engine, server AsApiBMServer) {
	AsApiSvc = server
	e.GET(PathAsApiListAllCoinInfo, AsApiListAllCoinInfo)
	e.GET(PathAsApiGetCoinInfo, AsApiGetCoinInfo)
	e.POST(PathAsApiNewDepositAddress, AsApiNewDepositAddress)
	e.GET(PathAsApiHasAddress, AsApiHasAddress)
	e.GET(PathAsApiCheckAddress, AsApiCheckAddress)
	e.GET(PathAsApiListAllAddress, AsApiListAllAddress)
	e.GET(PathAsApiGetConfirmedTx, AsApiGetConfirmedTx)
	e.GET(PathAsApiListConfirmedTx, AsApiListConfirmedTx)
	e.GET(PathAsApiGetUnConfirmedTx, AsApiGetUnConfirmedTx)
	e.GET(PathAsApiListUnConfirmedTx, AsApiListUnConfirmedTx)
	e.POST(PathAsApiNewWithdraw, AsApiNewWithdraw)
	e.GET(PathAsApiGetWithdrawDetail, AsApiGetWithdrawDetail)
	e.POST(PathAsApiCollectCallback, AsApiCollectCallback)
	e.POST(PathAsApiImportOldAddress, AsApiImportOldAddress)
}
